{"hash":"b2b6fb44e07b95c4675de4c6f4c3980489d78dbd","fesm2020":{"code":"import * as i1 from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport 'reflect-metadata';\n\nvar EzHttpRequestMethod;\r\n(function (EzHttpRequestMethod) {\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"DELETE\"] = 0] = \"DELETE\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"GET\"] = 1] = \"GET\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"HEAD\"] = 2] = \"HEAD\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"OPTIONS\"] = 3] = \"OPTIONS\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"PATCH\"] = 4] = \"PATCH\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"POST\"] = 5] = \"POST\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"PUT\"] = 6] = \"PUT\";\r\n})(EzHttpRequestMethod || (EzHttpRequestMethod = {}));\n\nfunction EzHttpClient(apiPath, module) {\r\n    return function (targetClass) {\r\n        if (!apiPath || apiPath.length === 0) {\r\n            apiPath = '';\r\n        }\r\n        const apiBasePathDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: apiPath\r\n        };\r\n        Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\r\n        class EzHttpClientDecoratedClass extends targetClass {\r\n            constructor(http) {\r\n                super();\r\n                this.http = http;\r\n                const httpClientPropertyDescriptor = {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    writable: false,\r\n                    value: http\r\n                };\r\n                Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\r\n            }\r\n        }\r\n        EzHttpClientDecoratedClass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\n        EzHttpClientDecoratedClass.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, providedIn: module || 'root' });\r\n        i0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, decorators: [{\r\n                    type: Injectable,\r\n                    args: [{\r\n                            providedIn: module || 'root'\r\n                        }]\r\n                }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\r\n        return EzHttpClientDecoratedClass;\r\n    };\r\n}\n\nfunction EzHttpClientHeaders(headers) {\r\n    return function (targetClass) {\r\n        if (!headers) {\r\n            headers = {};\r\n        }\r\n        const apiHeadersDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: headers\r\n        };\r\n        const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\n\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\r\nfunction EzHttpClientCommonResponseOperators(options) {\r\n    return function (targetClass) {\r\n        if (!options) {\r\n            options = { operators: [] };\r\n        }\r\n        if (!options.operators) {\r\n            options.operators = [];\r\n        }\r\n        const apiHeadersDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: options\r\n        };\r\n        const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\n\nconst EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\r\nfunction EzHttpQueryParam(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\r\nfunction EzHttpPartData(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\r\nfunction EzHttpPartFile(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\r\nfunction EzHttpRequestBody(target, methodName, parameterIndex) {\r\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only one body can be defined !');\r\n    }\r\n    requestParameters.push({ index: parameterIndex, paramName: 'body' });\r\n    Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\r\n}\n\nconst EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\r\nfunction EzHttpRequestParam(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_RESPONSE_META_KEY = `EzHttpResponse`;\r\nfunction EzHttpResponse(target, methodName, parameterIndex) {\r\n    const requestParameters = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only response mapping parameter can be defined !');\r\n    }\r\n    requestParameters.push({ index: parameterIndex, paramName: 'response' });\r\n    Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\r\n}\n\n// -------------------- DECORATORS --------------------\r\nfunction EzHttpRequest(httpMethod, options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, httpMethod, options);\r\n    };\r\n}\r\nfunction EzHttpRequestDELETE(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\r\n    };\r\n}\r\nfunction EzHttpRequestGET(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\r\n    };\r\n}\r\nfunction EzHttpRequestHEAD(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\r\n    };\r\n}\r\nfunction EzHttpRequestOPTIONS(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPATCH(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPOST(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPUT(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\r\n    };\r\n}\r\n// -------------------- PRIVATE FUNCTIONS --------------------\r\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\r\nfunction resolveUrl(targetObject, hasParameters, ezRequestParams, options, args) {\r\n    let uri = options.path;\r\n    // resolve uri parameters\r\n    if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\r\n        // replace all parameters\r\n        ezRequestParams.forEach(paramDescriptor => {\r\n            uri = uri?.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\r\n        });\r\n    }\r\n    // build url\r\n    let basePath = targetObject.constructor.API_BASE_PATH || '';\r\n    if (basePath.length > 0 && basePath.endsWith('/')) {\r\n        basePath = basePath.substring(0, basePath.length - 1);\r\n    }\r\n    return `${basePath}${uri}`;\r\n}\r\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\r\nfunction buildHttpOptions(options, ezQueryParams, args, targetObject) {\r\n    const httpOptions = {};\r\n    const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\r\n    if (globalHeaders) {\r\n        options.headers = Object.assign(globalHeaders, (options.headers || {}));\r\n    }\r\n    if (options.headers || options.consume) {\r\n        httpOptions.headers = options.headers || {};\r\n        if (options.consume && options.consume.length > 0) {\r\n            stripContentType(httpOptions);\r\n            httpOptions.headers['Content-Type'] = options.consume;\r\n        }\r\n    }\r\n    if (options.responseType) {\r\n        httpOptions.responseType = options.responseType;\r\n    }\r\n    // compute http query params\r\n    if (ezQueryParams && ezQueryParams.length > 0) {\r\n        httpOptions.params = {};\r\n        ezQueryParams.forEach(paramDescriptor => {\r\n            const paramValue = args[paramDescriptor.index];\r\n            if (paramValue) {\r\n                // @ts-ignore: Object is possibly 'null'.\r\n                httpOptions.params[paramDescriptor.paramName] = paramValue;\r\n            }\r\n        });\r\n    }\r\n    return httpOptions;\r\n}\r\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\r\nfunction stripContentType(httpOptions) {\r\n    if (!httpOptions) {\r\n        return;\r\n    }\r\n    for (const key in httpOptions.headers) {\r\n        if (key.toLowerCase() === 'content-type') {\r\n            delete httpOptions.headers[key];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\r\nfunction doCall(httpClient, url, httpMethod, httpOptions, body, responseOperators) {\r\n    let responseObservable;\r\n    switch (httpMethod) {\r\n        case EzHttpRequestMethod.DELETE:\r\n            responseObservable = httpClient.delete(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.GET:\r\n            responseObservable = httpClient.get(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.HEAD:\r\n            responseObservable = httpClient.head(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.OPTIONS:\r\n            responseObservable = httpClient.options(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.PATCH:\r\n            responseObservable = httpClient.patch(url, body, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.POST:\r\n            responseObservable = httpClient.post(url, body, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.PUT:\r\n            responseObservable = httpClient.put(url, body, httpOptions);\r\n            break;\r\n    }\r\n    if (responseOperators && responseOperators.length > 0) {\r\n        responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\r\n    }\r\n    return responseObservable;\r\n}\r\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\r\nfunction apply(target, key, descriptor, httpMethod, options) {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n    if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\r\n        options.path = '/' + options.path;\r\n    }\r\n    else if (!options.path) {\r\n        options.path = '';\r\n    }\r\n    let ezRequestParams = [];\r\n    const hasParameters = !!options.path.match(/{\\w+}/g);\r\n    if (hasParameters) {\r\n        ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\r\n    }\r\n    const ezQueryParams = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\r\n    const ezBody = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\r\n    const ezPartDatas = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\r\n    const ezPartFiles = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\r\n    const ezResponseMapper = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\r\n    const originalMethod = descriptor.value;\r\n    descriptor.value = (...args) => {\r\n        // try to get http client instance\r\n        const httpClient = target.constructor.HTTP_CLIENT;\r\n        if (!httpClient) {\r\n            throw new Error('Unable to get http client instance !');\r\n        }\r\n        const url = resolveUrl(target, hasParameters, ezRequestParams, options, args);\r\n        const httpOptions = buildHttpOptions(options, ezQueryParams, args, target);\r\n        const body = ezBody?.length ? args[ezBody[0].index] : {};\r\n        const multiPartFormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\r\n        if (!!multiPartFormData) {\r\n            stripContentType(httpOptions);\r\n            console.log(httpOptions);\r\n        }\r\n        const commonOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\r\n        if (!options.responseOperators) {\r\n            options.responseOperators = {\r\n                operators: []\r\n            };\r\n        }\r\n        const operators = [];\r\n        if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options.responseOperators.skipGlobalCommonsOperators !== true) {\r\n            if (commonOperatorsOptions.before) {\r\n                operators.push(...commonOperatorsOptions.operators);\r\n                operators.push(...options.responseOperators.operators);\r\n            }\r\n            else {\r\n                operators.push(...options.responseOperators.operators);\r\n                operators.push(...commonOperatorsOptions.operators);\r\n            }\r\n        }\r\n        else {\r\n            operators.push(...options.responseOperators.operators);\r\n        }\r\n        const response = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\r\n        if (ezResponseMapper && ezResponseMapper.length > 0) {\r\n            args[ezResponseMapper[0].index] = response;\r\n            return originalMethod(...args);\r\n        }\r\n        return response;\r\n    };\r\n    return descriptor;\r\n}\r\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\r\nfunction buildMultipartFormData(args, ezPartDatas, ezPartFiles, body) {\r\n    const buildFormData = (ezPartDatas && !!ezPartDatas.length) || (ezPartFiles && !!ezPartFiles.length);\r\n    if (buildFormData) {\r\n        const formData = new FormData();\r\n        (ezPartDatas || []).forEach(data => {\r\n            const value = args[data.index];\r\n            // if type of value is not string then build blob otherwise push as is\r\n            if (typeof value === 'string') {\r\n                formData.append(data.paramName, value);\r\n            }\r\n            else {\r\n                formData.append(data.paramName, new Blob([JSON.stringify(value)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        });\r\n        (ezPartFiles || []).forEach(data => {\r\n            const value = args[data.index];\r\n            // if type of value is not File or Blob then ignore\r\n            if (value instanceof File || value instanceof Blob) {\r\n                formData.append(data.paramName, value);\r\n            }\r\n        });\r\n        if (!!body && Object.keys(body).length > 0) {\r\n            // if type of body is not string then build blob otherwise push as is\r\n            if (typeof body === 'string') {\r\n                formData.append('body', body);\r\n            }\r\n            else {\r\n                formData.append('body', new Blob([JSON.stringify(body)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n    return undefined;\r\n}\n\n/*\r\n * Public API Surface of ez-http-client-lib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { EZ_REQUEST_BODY_META_KEY, EZ_REQUEST_PARAMS_META_KEY, EZ_REQUEST_PART_DATA_META_KEY, EZ_REQUEST_PART_FILE_META_KEY, EZ_REQUEST_QUERY_PARAMS_META_KEY, EZ_RESPONSE_META_KEY, EzHttpClient, EzHttpClientCommonResponseOperators, EzHttpClientHeaders, EzHttpPartData, EzHttpPartFile, EzHttpQueryParam, EzHttpRequest, EzHttpRequestBody, EzHttpRequestDELETE, EzHttpRequestGET, EzHttpRequestHEAD, EzHttpRequestMethod, EzHttpRequestOPTIONS, EzHttpRequestPATCH, EzHttpRequestPOST, EzHttpRequestPUT, EzHttpRequestParam, EzHttpResponse };\n//# sourceMappingURL=mbo-ez-angular-ez-http-client.mjs.map\n//# sourceMappingURL=mbo-ez-angular-ez-http-client.mjs.map\n","map":{"version":3,"file":"mbo-ez-angular-ez-http-client.mjs","sources":["../../../projects/ez-http-client-lib/src/lib/models/ez-http-request-method.enum.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client-headers.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client-common-response-operators.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-query-param.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-part-data.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-part-file.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request-body.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request-param.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-response.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request.decorator.ts","../../../projects/ez-http-client-lib/src/public-api.ts","../../../projects/ez-http-client-lib/src/mbo-ez-angular-ez-http-client.ts"],"sourcesContent":["export enum EzHttpRequestMethod {\r\n    DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Type } from '@angular/core';\r\n\r\nexport function EzHttpClient(apiPath?: string, module?: Type<any>): any {\r\n    return function(targetClass: any) {\r\n        if (!apiPath || apiPath.length === 0) {\r\n            apiPath = '';\r\n        }\r\n\r\n        const apiBasePathDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: apiPath\r\n        };\r\n        Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\r\n\r\n        @Injectable({\r\n            providedIn: module || 'root'\r\n        })\r\n        class EzHttpClientDecoratedClass extends targetClass {\r\n            constructor(protected http: HttpClient) {\r\n                super();\r\n\r\n                const httpClientPropertyDescriptor: PropertyDescriptor = {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    writable: false,\r\n                    value: http\r\n                };\r\n                Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\r\n            }\r\n        }\r\n        return EzHttpClientDecoratedClass;\r\n    };\r\n}\r\n","export function EzHttpClientHeaders(headers: {\r\n    [header: string]: string | string[];\r\n}): any {\r\n    return function (targetClass: any) {\r\n        if (!headers) {\r\n            headers = {};\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: headers\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import { EzHttpReponseOperatorsOptions } from \"./models/ez-http-client-response-oeprators-options.model\";\r\n\r\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\r\nexport function EzHttpClientCommonResponseOperators(options: EzHttpReponseOperatorsOptions): any {\r\n    return function (targetClass: any) {\r\n        if (!options) {\r\n            options = {operators: []};\r\n        }\r\n\r\n        if (!options.operators) {\r\n            options.operators = [];\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: options\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\r\n\r\nexport function EzHttpQueryParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\r\n\r\nexport function EzHttpPartData(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\r\n\r\nexport function EzHttpPartFile(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\r\n\r\nexport function EzHttpRequestBody(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only one body can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'body' });\r\n    Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\r\n\r\nexport function EzHttpRequestParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_RESPONSE_META_KEY = `EzHttpResponse`;\r\n\r\nexport function EzHttpResponse(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only response mapping parameter can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'response' });\r\n    Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { EZ_REQUEST_QUERY_PARAMS_META_KEY } from './ez-http-query-param.decorator';\r\nimport { EZ_REQUEST_BODY_META_KEY } from './ez-http-request-body.decorator';\r\nimport { EZ_REQUEST_PARAMS_META_KEY } from './ez-http-request-param.decorator';\r\nimport { EZ_RESPONSE_META_KEY } from './ez-http-response.decorator';\r\nimport { EzHttpRequestMethod } from './models/ez-http-request-method.enum';\r\nimport { EzHttpRequestOptions } from './models/ez-http-request-options.model';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\nimport { EzHttpReponseOperatorsOptions } from './models/ez-http-client-response-oeprators-options.model';\r\nimport { EZ_REQUEST_PART_DATA_META_KEY } from './ez-http-part-data.decorator';\r\nimport { EZ_REQUEST_PART_FILE_META_KEY } from './ez-http-part-file.decorator';\r\n\r\n/**\r\n * Http call options\r\n */\r\ntype HttpOptions = {\r\n    headers?: {\r\n        [header: string]: string | string[];\r\n    };\r\n    params?: HttpParams | {\r\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n    };\r\n    responseType?: any;\r\n};\r\n\r\n// -------------------- DECORATORS --------------------\r\nexport function EzHttpRequest(httpMethod: EzHttpRequestMethod, options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, httpMethod, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestDELETE(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestGET(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestHEAD(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestOPTIONS(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPATCH(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPOST(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPUT(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\r\n    };\r\n}\r\n\r\n// -------------------- PRIVATE FUNCTIONS --------------------\r\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\r\nfunction resolveUrl(\r\n    targetObject: any, hasParameters: boolean, ezRequestParams: Array<EzHttpParameterDescriptor>, options: EzHttpRequestOptions, args: Array<any>\r\n): string {\r\n    let uri = options.path;\r\n\r\n    // resolve uri parameters\r\n    if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\r\n        // replace all parameters\r\n        ezRequestParams.forEach(paramDescriptor => {\r\n            uri = uri?.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\r\n        });\r\n    }\r\n\r\n    // build url\r\n    let basePath: string = targetObject.constructor.API_BASE_PATH || '';\r\n    if (basePath.length > 0 && basePath.endsWith('/')) {\r\n        basePath = basePath.substring(0, basePath.length - 1);\r\n    }\r\n\r\n    return `${basePath}${uri}`;\r\n}\r\n\r\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\r\nfunction buildHttpOptions(options: EzHttpRequestOptions, ezQueryParams: Array<EzHttpParameterDescriptor>, args: Array<any>, targetObject: any): HttpOptions {\r\n    const httpOptions: HttpOptions = {};\r\n    const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\r\n    if (globalHeaders) {\r\n        options.headers = Object.assign(globalHeaders, (options.headers || {}));\r\n    }\r\n\r\n    if (options.headers || options.consume) {\r\n        httpOptions.headers = options.headers || {};\r\n        if (options.consume && options.consume.length > 0) {\r\n            stripContentType(httpOptions);\r\n            httpOptions.headers['Content-Type'] = options.consume;\r\n        }\r\n    }\r\n\r\n    if (options.responseType) {\r\n        httpOptions.responseType = options.responseType;\r\n    }\r\n\r\n    // compute http query params\r\n    if (ezQueryParams && ezQueryParams.length > 0) {\r\n        httpOptions.params = {};\r\n        ezQueryParams.forEach(paramDescriptor => {\r\n            const paramValue: any = args[paramDescriptor.index];\r\n            if (paramValue) {\r\n                // @ts-ignore: Object is possibly 'null'.\r\n                httpOptions.params[paramDescriptor.paramName] = paramValue;\r\n            }\r\n        });\r\n    }\r\n\r\n    return httpOptions;\r\n}\r\n\r\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\r\nfunction stripContentType(httpOptions: HttpOptions): void {\r\n    if (!httpOptions) {\r\n        return;\r\n    }\r\n\r\n    for (const key in httpOptions.headers) {\r\n        if (key.toLowerCase() === 'content-type') {\r\n            delete httpOptions.headers[key];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\r\nfunction doCall(httpClient: HttpClient, url: string, httpMethod: EzHttpRequestMethod, httpOptions: HttpOptions, body: any, responseOperators?: Array<OperatorFunction<any, any>>): Observable<any> {\r\n    let responseObservable: Observable<any>;\r\n    switch (httpMethod) {\r\n        case EzHttpRequestMethod.DELETE:\r\n            responseObservable = httpClient.delete<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.GET:\r\n            responseObservable = httpClient.get<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.HEAD:\r\n            responseObservable = httpClient.head<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.OPTIONS:\r\n            responseObservable = httpClient.options<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PATCH:\r\n            responseObservable = httpClient.patch<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.POST:\r\n            responseObservable = httpClient.post<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PUT:\r\n            responseObservable = httpClient.put<any>(url, body, httpOptions);\r\n            break;\r\n    }\r\n\r\n    if (responseOperators && responseOperators.length > 0) {\r\n        responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\r\n    }\r\n\r\n    return responseObservable;\r\n}\r\n\r\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\r\nfunction apply(target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n    httpMethod: EzHttpRequestMethod,\r\n    options?: EzHttpRequestOptions): PropertyDescriptor {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n\r\n    if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\r\n        options.path = '/' + options.path;\r\n    } else if (!options.path) {\r\n        options.path = '';\r\n    }\r\n\r\n    let ezRequestParams: Array<EzHttpParameterDescriptor> = [];\r\n    const hasParameters = !!options.path.match(/{\\w+}/g);\r\n    if (hasParameters) {\r\n        ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\r\n    }\r\n\r\n    const ezQueryParams: Array<EzHttpParameterDescriptor> =\r\n        Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\r\n    const ezBody: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\r\n    const ezPartDatas: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\r\n    const ezPartFiles: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\r\n    const ezResponseMapper: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\r\n\r\n    const originalMethod: (...args: any[]) => Promise<any> = descriptor.value;\r\n    descriptor.value = (...args: any[]) => {\r\n        // try to get http client instance\r\n        const httpClient: HttpClient = target.constructor.HTTP_CLIENT;\r\n        if (!httpClient) {\r\n            throw new Error('Unable to get http client instance !');\r\n        }\r\n\r\n        const url: string = resolveUrl(target, hasParameters, ezRequestParams, options!, args);\r\n\r\n        const httpOptions: HttpOptions = buildHttpOptions(options!, ezQueryParams, args, target);\r\n        const body: any = ezBody?.length ? args[ezBody[0].index] : {};\r\n        const multiPartFormData: FormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\r\n\r\n        if (!!multiPartFormData) {\r\n            stripContentType(httpOptions);\r\n            console.log(httpOptions);\r\n        }\r\n\r\n        const commonOperatorsOptions: EzHttpReponseOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\r\n        if (!options!.responseOperators) {\r\n            options!.responseOperators = {\r\n                operators: []\r\n            };\r\n        }\r\n\r\n        const operators: Array<OperatorFunction<any, any>> = [];\r\n        if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options!.responseOperators.skipGlobalCommonsOperators !== true) {\r\n            if (commonOperatorsOptions.before) {\r\n                operators.push(...commonOperatorsOptions.operators);\r\n                operators.push(...options!.responseOperators.operators);\r\n            } else {\r\n                operators.push(...options!.responseOperators.operators);\r\n                operators.push(...commonOperatorsOptions.operators);\r\n            }\r\n        } else {\r\n            operators.push(...options!.responseOperators.operators);\r\n        }\r\n\r\n        const response: Observable<any> = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\r\n\r\n        if (ezResponseMapper && ezResponseMapper.length > 0) {\r\n            args[ezResponseMapper[0].index] = response;\r\n            return originalMethod(...args);\r\n        }\r\n        return response;\r\n    };\r\n    return descriptor;\r\n}\r\n\r\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\r\nfunction buildMultipartFormData(args: Array<any>, ezPartDatas: Array<EzHttpParameterDescriptor>, ezPartFiles: Array<EzHttpParameterDescriptor>, body?: any): FormData {\r\n    const buildFormData: boolean = (ezPartDatas && !!ezPartDatas.length) || (ezPartFiles && !!ezPartFiles.length);\r\n    if (buildFormData) {\r\n        const formData = new FormData();\r\n        (ezPartDatas || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not string then build blob otherwise push as is\r\n            if (typeof value === 'string') {\r\n                formData.append(data.paramName, value);\r\n            } else {\r\n                formData.append(data.paramName, new Blob([JSON.stringify(value)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        });\r\n\r\n        (ezPartFiles || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not File or Blob then ignore\r\n            if (value instanceof File || value instanceof Blob) {\r\n                formData.append(data.paramName, value);\r\n            }\r\n        });\r\n\r\n        if (!!body && Object.keys(body).length > 0) {\r\n            // if type of body is not string then build blob otherwise push as is\r\n            if (typeof body === 'string') {\r\n                formData.append('body', body);\r\n            } else {\r\n                formData.append('body', new Blob([JSON.stringify(body)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    return undefined!;\r\n}\r\n","/*\n * Public API Surface of ez-http-client-lib\n */\n\nexport * from './lib/models/ez-http-request-method.enum';\nexport * from './lib/models/ez-http-request-options.model';\nexport * from './lib/models/ez-http-parameter-descriptor.model';\nexport * from './lib/models/ez-http-client-response-oeprators-options.model';\nexport * from './lib/ez-http-client.decorator';\nexport * from './lib/ez-http-client-headers.decorator';\nexport * from './lib/ez-http-client-common-response-operators.decorator';\nexport * from './lib/ez-http-query-param.decorator';\nexport * from './lib/ez-http-part-data.decorator';\nexport * from './lib/ez-http-part-file.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-param.decorator';\nexport * from './lib/ez-http-request.decorator';\nexport * from './lib/ez-http-response.decorator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}},"fesm2015":{"code":"import * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport * as i1 from '@angular/common/http';\nimport 'reflect-metadata';\n\nvar EzHttpRequestMethod;\r\n(function (EzHttpRequestMethod) {\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"DELETE\"] = 0] = \"DELETE\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"GET\"] = 1] = \"GET\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"HEAD\"] = 2] = \"HEAD\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"OPTIONS\"] = 3] = \"OPTIONS\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"PATCH\"] = 4] = \"PATCH\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"POST\"] = 5] = \"POST\";\r\n    EzHttpRequestMethod[EzHttpRequestMethod[\"PUT\"] = 6] = \"PUT\";\r\n})(EzHttpRequestMethod || (EzHttpRequestMethod = {}));\n\nfunction EzHttpClient(apiPath, module) {\r\n    return function (targetClass) {\r\n        if (!apiPath || apiPath.length === 0) {\r\n            apiPath = '';\r\n        }\r\n        const apiBasePathDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: apiPath\r\n        };\r\n        Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\r\n        class EzHttpClientDecoratedClass extends targetClass {\r\n            constructor(http) {\r\n                super();\r\n                this.http = http;\r\n                const httpClientPropertyDescriptor = {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    writable: false,\r\n                    value: http\r\n                };\r\n                Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\r\n            }\r\n        }\r\n        EzHttpClientDecoratedClass.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, deps: [{ token: i1.HttpClient }], target: i0.ɵɵFactoryTarget.Injectable });\r\n        EzHttpClientDecoratedClass.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, providedIn: module || 'root' });\r\n        i0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.4\", ngImport: i0, type: EzHttpClientDecoratedClass, decorators: [{\r\n                    type: Injectable,\r\n                    args: [{\r\n                            providedIn: module || 'root'\r\n                        }]\r\n                }], ctorParameters: function () { return [{ type: i1.HttpClient }]; } });\r\n        return EzHttpClientDecoratedClass;\r\n    };\r\n}\n\nfunction EzHttpClientHeaders(headers) {\r\n    return function (targetClass) {\r\n        if (!headers) {\r\n            headers = {};\r\n        }\r\n        const apiHeadersDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: headers\r\n        };\r\n        const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\n\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\r\nfunction EzHttpClientCommonResponseOperators(options) {\r\n    return function (targetClass) {\r\n        if (!options) {\r\n            options = { operators: [] };\r\n        }\r\n        if (!options.operators) {\r\n            options.operators = [];\r\n        }\r\n        const apiHeadersDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: options\r\n        };\r\n        const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\n\nconst EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\r\nfunction EzHttpQueryParam(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\r\nfunction EzHttpPartData(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\r\nfunction EzHttpPartFile(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\r\nfunction EzHttpRequestBody(target, methodName, parameterIndex) {\r\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only one body can be defined !');\r\n    }\r\n    requestParameters.push({ index: parameterIndex, paramName: 'body' });\r\n    Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\r\n}\n\nconst EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\r\nfunction EzHttpRequestParam(paramName) {\r\n    return function (target, methodName, parameterIndex) {\r\n        const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\n\nconst EZ_RESPONSE_META_KEY = `EzHttpResponse`;\r\nfunction EzHttpResponse(target, methodName, parameterIndex) {\r\n    const requestParameters = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only response mapping parameter can be defined !');\r\n    }\r\n    requestParameters.push({ index: parameterIndex, paramName: 'response' });\r\n    Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\r\n}\n\n// -------------------- DECORATORS --------------------\r\nfunction EzHttpRequest(httpMethod, options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, httpMethod, options);\r\n    };\r\n}\r\nfunction EzHttpRequestDELETE(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\r\n    };\r\n}\r\nfunction EzHttpRequestGET(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\r\n    };\r\n}\r\nfunction EzHttpRequestHEAD(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\r\n    };\r\n}\r\nfunction EzHttpRequestOPTIONS(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPATCH(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPOST(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\r\n    };\r\n}\r\nfunction EzHttpRequestPUT(options) {\r\n    return function (target, key, descriptor) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\r\n    };\r\n}\r\n// -------------------- PRIVATE FUNCTIONS --------------------\r\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\r\nfunction resolveUrl(targetObject, hasParameters, ezRequestParams, options, args) {\r\n    let uri = options.path;\r\n    // resolve uri parameters\r\n    if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\r\n        // replace all parameters\r\n        ezRequestParams.forEach(paramDescriptor => {\r\n            uri = uri === null || uri === void 0 ? void 0 : uri.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\r\n        });\r\n    }\r\n    // build url\r\n    let basePath = targetObject.constructor.API_BASE_PATH || '';\r\n    if (basePath.length > 0 && basePath.endsWith('/')) {\r\n        basePath = basePath.substring(0, basePath.length - 1);\r\n    }\r\n    return `${basePath}${uri}`;\r\n}\r\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\r\nfunction buildHttpOptions(options, ezQueryParams, args, targetObject) {\r\n    const httpOptions = {};\r\n    const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\r\n    if (globalHeaders) {\r\n        options.headers = Object.assign(globalHeaders, (options.headers || {}));\r\n    }\r\n    if (options.headers || options.consume) {\r\n        httpOptions.headers = options.headers || {};\r\n        if (options.consume && options.consume.length > 0) {\r\n            stripContentType(httpOptions);\r\n            httpOptions.headers['Content-Type'] = options.consume;\r\n        }\r\n    }\r\n    if (options.responseType) {\r\n        httpOptions.responseType = options.responseType;\r\n    }\r\n    // compute http query params\r\n    if (ezQueryParams && ezQueryParams.length > 0) {\r\n        httpOptions.params = {};\r\n        ezQueryParams.forEach(paramDescriptor => {\r\n            const paramValue = args[paramDescriptor.index];\r\n            if (paramValue) {\r\n                // @ts-ignore: Object is possibly 'null'.\r\n                httpOptions.params[paramDescriptor.paramName] = paramValue;\r\n            }\r\n        });\r\n    }\r\n    return httpOptions;\r\n}\r\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\r\nfunction stripContentType(httpOptions) {\r\n    if (!httpOptions) {\r\n        return;\r\n    }\r\n    for (const key in httpOptions.headers) {\r\n        if (key.toLowerCase() === 'content-type') {\r\n            delete httpOptions.headers[key];\r\n        }\r\n    }\r\n}\r\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\r\nfunction doCall(httpClient, url, httpMethod, httpOptions, body, responseOperators) {\r\n    let responseObservable;\r\n    switch (httpMethod) {\r\n        case EzHttpRequestMethod.DELETE:\r\n            responseObservable = httpClient.delete(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.GET:\r\n            responseObservable = httpClient.get(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.HEAD:\r\n            responseObservable = httpClient.head(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.OPTIONS:\r\n            responseObservable = httpClient.options(url, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.PATCH:\r\n            responseObservable = httpClient.patch(url, body, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.POST:\r\n            responseObservable = httpClient.post(url, body, httpOptions);\r\n            break;\r\n        case EzHttpRequestMethod.PUT:\r\n            responseObservable = httpClient.put(url, body, httpOptions);\r\n            break;\r\n    }\r\n    if (responseOperators && responseOperators.length > 0) {\r\n        responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\r\n    }\r\n    return responseObservable;\r\n}\r\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\r\nfunction apply(target, key, descriptor, httpMethod, options) {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n    if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\r\n        options.path = '/' + options.path;\r\n    }\r\n    else if (!options.path) {\r\n        options.path = '';\r\n    }\r\n    let ezRequestParams = [];\r\n    const hasParameters = !!options.path.match(/{\\w+}/g);\r\n    if (hasParameters) {\r\n        ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\r\n    }\r\n    const ezQueryParams = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\r\n    const ezBody = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\r\n    const ezPartDatas = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\r\n    const ezPartFiles = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\r\n    const ezResponseMapper = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\r\n    const originalMethod = descriptor.value;\r\n    descriptor.value = (...args) => {\r\n        // try to get http client instance\r\n        const httpClient = target.constructor.HTTP_CLIENT;\r\n        if (!httpClient) {\r\n            throw new Error('Unable to get http client instance !');\r\n        }\r\n        const url = resolveUrl(target, hasParameters, ezRequestParams, options, args);\r\n        const httpOptions = buildHttpOptions(options, ezQueryParams, args, target);\r\n        const body = (ezBody === null || ezBody === void 0 ? void 0 : ezBody.length) ? args[ezBody[0].index] : {};\r\n        const multiPartFormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\r\n        if (!!multiPartFormData) {\r\n            stripContentType(httpOptions);\r\n            console.log(httpOptions);\r\n        }\r\n        const commonOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\r\n        if (!options.responseOperators) {\r\n            options.responseOperators = {\r\n                operators: []\r\n            };\r\n        }\r\n        const operators = [];\r\n        if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options.responseOperators.skipGlobalCommonsOperators !== true) {\r\n            if (commonOperatorsOptions.before) {\r\n                operators.push(...commonOperatorsOptions.operators);\r\n                operators.push(...options.responseOperators.operators);\r\n            }\r\n            else {\r\n                operators.push(...options.responseOperators.operators);\r\n                operators.push(...commonOperatorsOptions.operators);\r\n            }\r\n        }\r\n        else {\r\n            operators.push(...options.responseOperators.operators);\r\n        }\r\n        const response = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\r\n        if (ezResponseMapper && ezResponseMapper.length > 0) {\r\n            args[ezResponseMapper[0].index] = response;\r\n            return originalMethod(...args);\r\n        }\r\n        return response;\r\n    };\r\n    return descriptor;\r\n}\r\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\r\nfunction buildMultipartFormData(args, ezPartDatas, ezPartFiles, body) {\r\n    const buildFormData = (ezPartDatas && !!ezPartDatas.length) || (ezPartFiles && !!ezPartFiles.length);\r\n    if (buildFormData) {\r\n        const formData = new FormData();\r\n        (ezPartDatas || []).forEach(data => {\r\n            const value = args[data.index];\r\n            // if type of value is not string then build blob otherwise push as is\r\n            if (typeof value === 'string') {\r\n                formData.append(data.paramName, value);\r\n            }\r\n            else {\r\n                formData.append(data.paramName, new Blob([JSON.stringify(value)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        });\r\n        (ezPartFiles || []).forEach(data => {\r\n            const value = args[data.index];\r\n            // if type of value is not File or Blob then ignore\r\n            if (value instanceof File || value instanceof Blob) {\r\n                formData.append(data.paramName, value);\r\n            }\r\n        });\r\n        if (!!body && Object.keys(body).length > 0) {\r\n            // if type of body is not string then build blob otherwise push as is\r\n            if (typeof body === 'string') {\r\n                formData.append('body', body);\r\n            }\r\n            else {\r\n                formData.append('body', new Blob([JSON.stringify(body)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        }\r\n        return formData;\r\n    }\r\n    return undefined;\r\n}\n\n/*\r\n * Public API Surface of ez-http-client-lib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { EZ_REQUEST_BODY_META_KEY, EZ_REQUEST_PARAMS_META_KEY, EZ_REQUEST_PART_DATA_META_KEY, EZ_REQUEST_PART_FILE_META_KEY, EZ_REQUEST_QUERY_PARAMS_META_KEY, EZ_RESPONSE_META_KEY, EzHttpClient, EzHttpClientCommonResponseOperators, EzHttpClientHeaders, EzHttpPartData, EzHttpPartFile, EzHttpQueryParam, EzHttpRequest, EzHttpRequestBody, EzHttpRequestDELETE, EzHttpRequestGET, EzHttpRequestHEAD, EzHttpRequestMethod, EzHttpRequestOPTIONS, EzHttpRequestPATCH, EzHttpRequestPOST, EzHttpRequestPUT, EzHttpRequestParam, EzHttpResponse };\n//# sourceMappingURL=mbo-ez-angular-ez-http-client.mjs.map\n//# sourceMappingURL=mbo-ez-angular-ez-http-client.mjs.map\n","map":{"version":3,"file":"mbo-ez-angular-ez-http-client.mjs","sources":["../../../projects/ez-http-client-lib/src/lib/models/ez-http-request-method.enum.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client-headers.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-client-common-response-operators.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-query-param.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-part-data.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-part-file.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request-body.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request-param.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-response.decorator.ts","../../../projects/ez-http-client-lib/src/lib/ez-http-request.decorator.ts","../../../projects/ez-http-client-lib/src/public-api.ts","../../../projects/ez-http-client-lib/src/mbo-ez-angular-ez-http-client.ts"],"sourcesContent":["export enum EzHttpRequestMethod {\r\n    DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Type } from '@angular/core';\r\n\r\nexport function EzHttpClient(apiPath?: string, module?: Type<any>): any {\r\n    return function(targetClass: any) {\r\n        if (!apiPath || apiPath.length === 0) {\r\n            apiPath = '';\r\n        }\r\n\r\n        const apiBasePathDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: apiPath\r\n        };\r\n        Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\r\n\r\n        @Injectable({\r\n            providedIn: module || 'root'\r\n        })\r\n        class EzHttpClientDecoratedClass extends targetClass {\r\n            constructor(protected http: HttpClient) {\r\n                super();\r\n\r\n                const httpClientPropertyDescriptor: PropertyDescriptor = {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    writable: false,\r\n                    value: http\r\n                };\r\n                Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\r\n            }\r\n        }\r\n        return EzHttpClientDecoratedClass;\r\n    };\r\n}\r\n","export function EzHttpClientHeaders(headers: {\r\n    [header: string]: string | string[];\r\n}): any {\r\n    return function (targetClass: any) {\r\n        if (!headers) {\r\n            headers = {};\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: headers\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import { EzHttpReponseOperatorsOptions } from \"./models/ez-http-client-response-oeprators-options.model\";\r\n\r\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\r\nexport function EzHttpClientCommonResponseOperators(options: EzHttpReponseOperatorsOptions): any {\r\n    return function (targetClass: any) {\r\n        if (!options) {\r\n            options = {operators: []};\r\n        }\r\n\r\n        if (!options.operators) {\r\n            options.operators = [];\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: options\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\r\n\r\nexport function EzHttpQueryParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\r\n\r\nexport function EzHttpPartData(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\r\n\r\nexport function EzHttpPartFile(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\r\n\r\nexport function EzHttpRequestBody(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only one body can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'body' });\r\n    Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\r\n\r\nexport function EzHttpRequestParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_RESPONSE_META_KEY = `EzHttpResponse`;\r\n\r\nexport function EzHttpResponse(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only response mapping parameter can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'response' });\r\n    Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { EZ_REQUEST_QUERY_PARAMS_META_KEY } from './ez-http-query-param.decorator';\r\nimport { EZ_REQUEST_BODY_META_KEY } from './ez-http-request-body.decorator';\r\nimport { EZ_REQUEST_PARAMS_META_KEY } from './ez-http-request-param.decorator';\r\nimport { EZ_RESPONSE_META_KEY } from './ez-http-response.decorator';\r\nimport { EzHttpRequestMethod } from './models/ez-http-request-method.enum';\r\nimport { EzHttpRequestOptions } from './models/ez-http-request-options.model';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\nimport { EzHttpReponseOperatorsOptions } from './models/ez-http-client-response-oeprators-options.model';\r\nimport { EZ_REQUEST_PART_DATA_META_KEY } from './ez-http-part-data.decorator';\r\nimport { EZ_REQUEST_PART_FILE_META_KEY } from './ez-http-part-file.decorator';\r\n\r\n/**\r\n * Http call options\r\n */\r\ntype HttpOptions = {\r\n    headers?: {\r\n        [header: string]: string | string[];\r\n    };\r\n    params?: HttpParams | {\r\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n    };\r\n    responseType?: any;\r\n};\r\n\r\n// -------------------- DECORATORS --------------------\r\nexport function EzHttpRequest(httpMethod: EzHttpRequestMethod, options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, httpMethod, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestDELETE(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestGET(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestHEAD(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestOPTIONS(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPATCH(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPOST(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPUT(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\r\n    };\r\n}\r\n\r\n// -------------------- PRIVATE FUNCTIONS --------------------\r\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\r\nfunction resolveUrl(\r\n    targetObject: any, hasParameters: boolean, ezRequestParams: Array<EzHttpParameterDescriptor>, options: EzHttpRequestOptions, args: Array<any>\r\n): string {\r\n    let uri = options.path;\r\n\r\n    // resolve uri parameters\r\n    if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\r\n        // replace all parameters\r\n        ezRequestParams.forEach(paramDescriptor => {\r\n            uri = uri?.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\r\n        });\r\n    }\r\n\r\n    // build url\r\n    let basePath: string = targetObject.constructor.API_BASE_PATH || '';\r\n    if (basePath.length > 0 && basePath.endsWith('/')) {\r\n        basePath = basePath.substring(0, basePath.length - 1);\r\n    }\r\n\r\n    return `${basePath}${uri}`;\r\n}\r\n\r\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\r\nfunction buildHttpOptions(options: EzHttpRequestOptions, ezQueryParams: Array<EzHttpParameterDescriptor>, args: Array<any>, targetObject: any): HttpOptions {\r\n    const httpOptions: HttpOptions = {};\r\n    const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\r\n    if (globalHeaders) {\r\n        options.headers = Object.assign(globalHeaders, (options.headers || {}));\r\n    }\r\n\r\n    if (options.headers || options.consume) {\r\n        httpOptions.headers = options.headers || {};\r\n        if (options.consume && options.consume.length > 0) {\r\n            stripContentType(httpOptions);\r\n            httpOptions.headers['Content-Type'] = options.consume;\r\n        }\r\n    }\r\n\r\n    if (options.responseType) {\r\n        httpOptions.responseType = options.responseType;\r\n    }\r\n\r\n    // compute http query params\r\n    if (ezQueryParams && ezQueryParams.length > 0) {\r\n        httpOptions.params = {};\r\n        ezQueryParams.forEach(paramDescriptor => {\r\n            const paramValue: any = args[paramDescriptor.index];\r\n            if (paramValue) {\r\n                // @ts-ignore: Object is possibly 'null'.\r\n                httpOptions.params[paramDescriptor.paramName] = paramValue;\r\n            }\r\n        });\r\n    }\r\n\r\n    return httpOptions;\r\n}\r\n\r\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\r\nfunction stripContentType(httpOptions: HttpOptions): void {\r\n    if (!httpOptions) {\r\n        return;\r\n    }\r\n\r\n    for (const key in httpOptions.headers) {\r\n        if (key.toLowerCase() === 'content-type') {\r\n            delete httpOptions.headers[key];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\r\nfunction doCall(httpClient: HttpClient, url: string, httpMethod: EzHttpRequestMethod, httpOptions: HttpOptions, body: any, responseOperators?: Array<OperatorFunction<any, any>>): Observable<any> {\r\n    let responseObservable: Observable<any>;\r\n    switch (httpMethod) {\r\n        case EzHttpRequestMethod.DELETE:\r\n            responseObservable = httpClient.delete<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.GET:\r\n            responseObservable = httpClient.get<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.HEAD:\r\n            responseObservable = httpClient.head<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.OPTIONS:\r\n            responseObservable = httpClient.options<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PATCH:\r\n            responseObservable = httpClient.patch<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.POST:\r\n            responseObservable = httpClient.post<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PUT:\r\n            responseObservable = httpClient.put<any>(url, body, httpOptions);\r\n            break;\r\n    }\r\n\r\n    if (responseOperators && responseOperators.length > 0) {\r\n        responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\r\n    }\r\n\r\n    return responseObservable;\r\n}\r\n\r\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\r\nfunction apply(target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n    httpMethod: EzHttpRequestMethod,\r\n    options?: EzHttpRequestOptions): PropertyDescriptor {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n\r\n    if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\r\n        options.path = '/' + options.path;\r\n    } else if (!options.path) {\r\n        options.path = '';\r\n    }\r\n\r\n    let ezRequestParams: Array<EzHttpParameterDescriptor> = [];\r\n    const hasParameters = !!options.path.match(/{\\w+}/g);\r\n    if (hasParameters) {\r\n        ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\r\n    }\r\n\r\n    const ezQueryParams: Array<EzHttpParameterDescriptor> =\r\n        Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\r\n    const ezBody: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\r\n    const ezPartDatas: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\r\n    const ezPartFiles: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\r\n    const ezResponseMapper: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\r\n\r\n    const originalMethod: (...args: any[]) => Promise<any> = descriptor.value;\r\n    descriptor.value = (...args: any[]) => {\r\n        // try to get http client instance\r\n        const httpClient: HttpClient = target.constructor.HTTP_CLIENT;\r\n        if (!httpClient) {\r\n            throw new Error('Unable to get http client instance !');\r\n        }\r\n\r\n        const url: string = resolveUrl(target, hasParameters, ezRequestParams, options!, args);\r\n\r\n        const httpOptions: HttpOptions = buildHttpOptions(options!, ezQueryParams, args, target);\r\n        const body: any = ezBody?.length ? args[ezBody[0].index] : {};\r\n        const multiPartFormData: FormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\r\n\r\n        if (!!multiPartFormData) {\r\n            stripContentType(httpOptions);\r\n            console.log(httpOptions);\r\n        }\r\n\r\n        const commonOperatorsOptions: EzHttpReponseOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\r\n        if (!options!.responseOperators) {\r\n            options!.responseOperators = {\r\n                operators: []\r\n            };\r\n        }\r\n\r\n        const operators: Array<OperatorFunction<any, any>> = [];\r\n        if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options!.responseOperators.skipGlobalCommonsOperators !== true) {\r\n            if (commonOperatorsOptions.before) {\r\n                operators.push(...commonOperatorsOptions.operators);\r\n                operators.push(...options!.responseOperators.operators);\r\n            } else {\r\n                operators.push(...options!.responseOperators.operators);\r\n                operators.push(...commonOperatorsOptions.operators);\r\n            }\r\n        } else {\r\n            operators.push(...options!.responseOperators.operators);\r\n        }\r\n\r\n        const response: Observable<any> = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\r\n\r\n        if (ezResponseMapper && ezResponseMapper.length > 0) {\r\n            args[ezResponseMapper[0].index] = response;\r\n            return originalMethod(...args);\r\n        }\r\n        return response;\r\n    };\r\n    return descriptor;\r\n}\r\n\r\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\r\nfunction buildMultipartFormData(args: Array<any>, ezPartDatas: Array<EzHttpParameterDescriptor>, ezPartFiles: Array<EzHttpParameterDescriptor>, body?: any): FormData {\r\n    const buildFormData: boolean = (ezPartDatas && !!ezPartDatas.length) || (ezPartFiles && !!ezPartFiles.length);\r\n    if (buildFormData) {\r\n        const formData = new FormData();\r\n        (ezPartDatas || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not string then build blob otherwise push as is\r\n            if (typeof value === 'string') {\r\n                formData.append(data.paramName, value);\r\n            } else {\r\n                formData.append(data.paramName, new Blob([JSON.stringify(value)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        });\r\n\r\n        (ezPartFiles || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not File or Blob then ignore\r\n            if (value instanceof File || value instanceof Blob) {\r\n                formData.append(data.paramName, value);\r\n            }\r\n        });\r\n\r\n        if (!!body && Object.keys(body).length > 0) {\r\n            // if type of body is not string then build blob otherwise push as is\r\n            if (typeof body === 'string') {\r\n                formData.append('body', body);\r\n            } else {\r\n                formData.append('body', new Blob([JSON.stringify(body)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    return undefined!;\r\n}\r\n","/*\n * Public API Surface of ez-http-client-lib\n */\n\nexport * from './lib/models/ez-http-request-method.enum';\nexport * from './lib/models/ez-http-request-options.model';\nexport * from './lib/models/ez-http-parameter-descriptor.model';\nexport * from './lib/models/ez-http-client-response-oeprators-options.model';\nexport * from './lib/ez-http-client.decorator';\nexport * from './lib/ez-http-client-headers.decorator';\nexport * from './lib/ez-http-client-common-response-operators.decorator';\nexport * from './lib/ez-http-query-param.decorator';\nexport * from './lib/ez-http-part-data.decorator';\nexport * from './lib/ez-http-part-file.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-param.decorator';\nexport * from './lib/ez-http-request.decorator';\nexport * from './lib/ez-http-response.decorator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}}}