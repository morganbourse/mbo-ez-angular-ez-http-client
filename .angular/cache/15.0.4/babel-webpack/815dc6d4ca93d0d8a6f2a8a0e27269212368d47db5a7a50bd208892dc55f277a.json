{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n  let length = arguments.length;\n  let scheduler = async;\n\n  if (isScheduler(arguments[arguments.length - 1])) {\n    scheduler = arguments[arguments.length - 1];\n    length--;\n  }\n\n  let bufferCreationInterval = null;\n\n  if (length >= 2) {\n    bufferCreationInterval = arguments[1];\n  }\n\n  let maxBufferSize = Number.POSITIVE_INFINITY;\n\n  if (length >= 3) {\n    maxBufferSize = arguments[2];\n  }\n\n  return function bufferTimeOperatorFunction(source) {\n    return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n  };\n}\n\nclass BufferTimeOperator {\n  constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n  }\n\n}\n\nclass Context {\n  constructor() {\n    this.buffer = [];\n  }\n\n}\n\nclass BufferTimeSubscriber extends Subscriber {\n  constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n    super(destination);\n    this.bufferTimeSpan = bufferTimeSpan;\n    this.bufferCreationInterval = bufferCreationInterval;\n    this.maxBufferSize = maxBufferSize;\n    this.scheduler = scheduler;\n    this.contexts = [];\n    const context = this.openContext();\n    this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n\n    if (this.timespanOnly) {\n      const timeSpanOnlyState = {\n        subscriber: this,\n        context,\n        bufferTimeSpan\n      };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    } else {\n      const closeState = {\n        subscriber: this,\n        context\n      };\n      const creationState = {\n        bufferTimeSpan,\n        bufferCreationInterval,\n        subscriber: this,\n        scheduler\n      };\n      this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n      this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n    }\n  }\n\n  _next(value) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n    let filledBufferContext;\n\n    for (let i = 0; i < len; i++) {\n      const context = contexts[i];\n      const buffer = context.buffer;\n      buffer.push(value);\n\n      if (buffer.length == this.maxBufferSize) {\n        filledBufferContext = context;\n      }\n    }\n\n    if (filledBufferContext) {\n      this.onBufferFull(filledBufferContext);\n    }\n  }\n\n  _error(err) {\n    this.contexts.length = 0;\n\n    super._error(err);\n  }\n\n  _complete() {\n    const {\n      contexts,\n      destination\n    } = this;\n\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      destination.next(context.buffer);\n    }\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    this.contexts = null;\n  }\n\n  onBufferFull(context) {\n    this.closeContext(context);\n    const closeAction = context.closeAction;\n    closeAction.unsubscribe();\n    this.remove(closeAction);\n\n    if (!this.closed && this.timespanOnly) {\n      context = this.openContext();\n      const bufferTimeSpan = this.bufferTimeSpan;\n      const timeSpanOnlyState = {\n        subscriber: this,\n        context,\n        bufferTimeSpan\n      };\n      this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n    }\n  }\n\n  openContext() {\n    const context = new Context();\n    this.contexts.push(context);\n    return context;\n  }\n\n  closeContext(context) {\n    this.destination.next(context.buffer);\n    const contexts = this.contexts;\n    const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n\n    if (spliceIndex >= 0) {\n      contexts.splice(contexts.indexOf(context), 1);\n    }\n  }\n\n}\n\nfunction dispatchBufferTimeSpanOnly(state) {\n  const subscriber = state.subscriber;\n  const prevContext = state.context;\n\n  if (prevContext) {\n    subscriber.closeContext(prevContext);\n  }\n\n  if (!subscriber.closed) {\n    state.context = subscriber.openContext();\n    state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n  }\n}\n\nfunction dispatchBufferCreation(state) {\n  const {\n    bufferCreationInterval,\n    bufferTimeSpan,\n    subscriber,\n    scheduler\n  } = state;\n  const context = subscriber.openContext();\n  const action = this;\n\n  if (!subscriber.closed) {\n    subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, {\n      subscriber,\n      context\n    }));\n    action.schedule(state, bufferCreationInterval);\n  }\n}\n\nfunction dispatchBufferClose(arg) {\n  const {\n    subscriber,\n    context\n  } = arg;\n  subscriber.closeContext(context);\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/bufferTime.js"],"names":["async","Subscriber","isScheduler","bufferTime","bufferTimeSpan","length","arguments","scheduler","bufferCreationInterval","maxBufferSize","Number","POSITIVE_INFINITY","bufferTimeOperatorFunction","source","lift","BufferTimeOperator","constructor","call","subscriber","subscribe","BufferTimeSubscriber","Context","buffer","destination","contexts","context","openContext","timespanOnly","timeSpanOnlyState","add","closeAction","schedule","dispatchBufferTimeSpanOnly","closeState","creationState","dispatchBufferClose","dispatchBufferCreation","_next","value","len","filledBufferContext","i","push","onBufferFull","_error","err","_complete","shift","next","_unsubscribe","closeContext","unsubscribe","remove","closed","spliceIndex","indexOf","splice","state","prevContext","action","arg"],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { Subscriber } from '../Subscriber';\nimport { isScheduler } from '../util/isScheduler';\nexport function bufferTime(bufferTimeSpan) {\n    let length = arguments.length;\n    let scheduler = async;\n    if (isScheduler(arguments[arguments.length - 1])) {\n        scheduler = arguments[arguments.length - 1];\n        length--;\n    }\n    let bufferCreationInterval = null;\n    if (length >= 2) {\n        bufferCreationInterval = arguments[1];\n    }\n    let maxBufferSize = Number.POSITIVE_INFINITY;\n    if (length >= 3) {\n        maxBufferSize = arguments[2];\n    }\n    return function bufferTimeOperatorFunction(source) {\n        return source.lift(new BufferTimeOperator(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler));\n    };\n}\nclass BufferTimeOperator {\n    constructor(bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferTimeSubscriber(subscriber, this.bufferTimeSpan, this.bufferCreationInterval, this.maxBufferSize, this.scheduler));\n    }\n}\nclass Context {\n    constructor() {\n        this.buffer = [];\n    }\n}\nclass BufferTimeSubscriber extends Subscriber {\n    constructor(destination, bufferTimeSpan, bufferCreationInterval, maxBufferSize, scheduler) {\n        super(destination);\n        this.bufferTimeSpan = bufferTimeSpan;\n        this.bufferCreationInterval = bufferCreationInterval;\n        this.maxBufferSize = maxBufferSize;\n        this.scheduler = scheduler;\n        this.contexts = [];\n        const context = this.openContext();\n        this.timespanOnly = bufferCreationInterval == null || bufferCreationInterval < 0;\n        if (this.timespanOnly) {\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n        else {\n            const closeState = { subscriber: this, context };\n            const creationState = { bufferTimeSpan, bufferCreationInterval, subscriber: this, scheduler };\n            this.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, closeState));\n            this.add(scheduler.schedule(dispatchBufferCreation, bufferCreationInterval, creationState));\n        }\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        let filledBufferContext;\n        for (let i = 0; i < len; i++) {\n            const context = contexts[i];\n            const buffer = context.buffer;\n            buffer.push(value);\n            if (buffer.length == this.maxBufferSize) {\n                filledBufferContext = context;\n            }\n        }\n        if (filledBufferContext) {\n            this.onBufferFull(filledBufferContext);\n        }\n    }\n    _error(err) {\n        this.contexts.length = 0;\n        super._error(err);\n    }\n    _complete() {\n        const { contexts, destination } = this;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            destination.next(context.buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.contexts = null;\n    }\n    onBufferFull(context) {\n        this.closeContext(context);\n        const closeAction = context.closeAction;\n        closeAction.unsubscribe();\n        this.remove(closeAction);\n        if (!this.closed && this.timespanOnly) {\n            context = this.openContext();\n            const bufferTimeSpan = this.bufferTimeSpan;\n            const timeSpanOnlyState = { subscriber: this, context, bufferTimeSpan };\n            this.add(context.closeAction = this.scheduler.schedule(dispatchBufferTimeSpanOnly, bufferTimeSpan, timeSpanOnlyState));\n        }\n    }\n    openContext() {\n        const context = new Context();\n        this.contexts.push(context);\n        return context;\n    }\n    closeContext(context) {\n        this.destination.next(context.buffer);\n        const contexts = this.contexts;\n        const spliceIndex = contexts ? contexts.indexOf(context) : -1;\n        if (spliceIndex >= 0) {\n            contexts.splice(contexts.indexOf(context), 1);\n        }\n    }\n}\nfunction dispatchBufferTimeSpanOnly(state) {\n    const subscriber = state.subscriber;\n    const prevContext = state.context;\n    if (prevContext) {\n        subscriber.closeContext(prevContext);\n    }\n    if (!subscriber.closed) {\n        state.context = subscriber.openContext();\n        state.context.closeAction = this.schedule(state, state.bufferTimeSpan);\n    }\n}\nfunction dispatchBufferCreation(state) {\n    const { bufferCreationInterval, bufferTimeSpan, subscriber, scheduler } = state;\n    const context = subscriber.openContext();\n    const action = this;\n    if (!subscriber.closed) {\n        subscriber.add(context.closeAction = scheduler.schedule(dispatchBufferClose, bufferTimeSpan, { subscriber, context }));\n        action.schedule(state, bufferCreationInterval);\n    }\n}\nfunction dispatchBufferClose(arg) {\n    const { subscriber, context } = arg;\n    subscriber.closeContext(context);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}