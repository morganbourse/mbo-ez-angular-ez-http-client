{"ast":null,"code":"import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nclass BufferWhenOperator {\n  constructor(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  }\n\n}\n\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, closingSelector) {\n    super(destination);\n    this.closingSelector = closingSelector;\n    this.subscribing = false;\n    this.openBuffer();\n  }\n\n  _next(value) {\n    this.buffer.push(value);\n  }\n\n  _complete() {\n    const buffer = this.buffer;\n\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    this.buffer = undefined;\n    this.subscribing = false;\n  }\n\n  notifyNext() {\n    this.openBuffer();\n  }\n\n  notifyComplete() {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  }\n\n  openBuffer() {\n    let {\n      closingSubscription\n    } = this;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    const buffer = this.buffer;\n\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n    let closingNotifier;\n\n    try {\n      const {\n        closingSelector\n      } = this;\n      closingNotifier = closingSelector();\n    } catch (err) {\n      return this.error(err);\n    }\n\n    closingSubscription = new Subscription();\n    this.closingSubscription = closingSubscription;\n    this.add(closingSubscription);\n    this.subscribing = true;\n    closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n    this.subscribing = false;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/bufferWhen.js"],"names":["Subscription","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","bufferWhen","closingSelector","source","lift","BufferWhenOperator","constructor","call","subscriber","subscribe","BufferWhenSubscriber","destination","subscribing","openBuffer","_next","value","buffer","push","_complete","next","_unsubscribe","undefined","notifyNext","notifyComplete","complete","closingSubscription","remove","unsubscribe","closingNotifier","err","error","add"],"mappings":"AAAA,SAASA,YAAT,QAA6B,iBAA7B;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,UAAT,CAAoBC,eAApB,EAAqC;AACxC,SAAO,UAAUC,MAAV,EAAkB;AACrB,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBH,eAAvB,CAAZ,CAAP;AACH,GAFD;AAGH;;AACD,MAAMG,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACJ,eAAD,EAAkB;AACzB,SAAKA,eAAL,GAAuBA,eAAvB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKN,eAA1C,CAAjB,CAAP;AACH;;AANoB;;AAQzB,MAAMQ,oBAAN,SAAmCZ,qBAAnC,CAAyD;AACrDQ,EAAAA,WAAW,CAACK,WAAD,EAAcT,eAAd,EAA+B;AACtC,UAAMS,WAAN;AACA,SAAKT,eAAL,GAAuBA,eAAvB;AACA,SAAKU,WAAL,GAAmB,KAAnB;AACA,SAAKC,UAAL;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKC,MAAL,CAAYC,IAAZ,CAAiBF,KAAjB;AACH;;AACDG,EAAAA,SAAS,GAAG;AACR,UAAMF,MAAM,GAAG,KAAKA,MAApB;;AACA,QAAIA,MAAJ,EAAY;AACR,WAAKL,WAAL,CAAiBQ,IAAjB,CAAsBH,MAAtB;AACH;;AACD,UAAME,SAAN;AACH;;AACDE,EAAAA,YAAY,GAAG;AACX,SAAKJ,MAAL,GAAcK,SAAd;AACA,SAAKT,WAAL,GAAmB,KAAnB;AACH;;AACDU,EAAAA,UAAU,GAAG;AACT,SAAKT,UAAL;AACH;;AACDU,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKX,WAAT,EAAsB;AAClB,WAAKY,QAAL;AACH,KAFD,MAGK;AACD,WAAKX,UAAL;AACH;AACJ;;AACDA,EAAAA,UAAU,GAAG;AACT,QAAI;AAAEY,MAAAA;AAAF,QAA0B,IAA9B;;AACA,QAAIA,mBAAJ,EAAyB;AACrB,WAAKC,MAAL,CAAYD,mBAAZ;AACAA,MAAAA,mBAAmB,CAACE,WAApB;AACH;;AACD,UAAMX,MAAM,GAAG,KAAKA,MAApB;;AACA,QAAI,KAAKA,MAAT,EAAiB;AACb,WAAKL,WAAL,CAAiBQ,IAAjB,CAAsBH,MAAtB;AACH;;AACD,SAAKA,MAAL,GAAc,EAAd;AACA,QAAIY,eAAJ;;AACA,QAAI;AACA,YAAM;AAAE1B,QAAAA;AAAF,UAAsB,IAA5B;AACA0B,MAAAA,eAAe,GAAG1B,eAAe,EAAjC;AACH,KAHD,CAIA,OAAO2B,GAAP,EAAY;AACR,aAAO,KAAKC,KAAL,CAAWD,GAAX,CAAP;AACH;;AACDJ,IAAAA,mBAAmB,GAAG,IAAI5B,YAAJ,EAAtB;AACA,SAAK4B,mBAAL,GAA2BA,mBAA3B;AACA,SAAKM,GAAL,CAASN,mBAAT;AACA,SAAKb,WAAL,GAAmB,IAAnB;AACAa,IAAAA,mBAAmB,CAACM,GAApB,CAAwBhC,cAAc,CAAC6B,eAAD,EAAkB,IAAI5B,qBAAJ,CAA0B,IAA1B,CAAlB,CAAtC;AACA,SAAKY,WAAL,GAAmB,KAAnB;AACH;;AAzDoD","sourcesContent":["import { Subscription } from '../Subscription';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nclass BufferWhenOperator {\n    constructor(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    }\n}\nclass BufferWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    _next(value) {\n        this.buffer.push(value);\n    }\n    _complete() {\n        const buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        this.buffer = undefined;\n        this.subscribing = false;\n    }\n    notifyNext() {\n        this.openBuffer();\n    }\n    notifyComplete() {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    }\n    openBuffer() {\n        let { closingSubscription } = this;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        const buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        let closingNotifier;\n        try {\n            const { closingSelector } = this;\n            closingNotifier = closingSelector();\n        }\n        catch (err) {\n            return this.error(err);\n        }\n        closingSubscription = new Subscription();\n        this.closingSubscription = closingSubscription;\n        this.add(closingSubscription);\n        this.subscribing = true;\n        closingSubscription.add(innerSubscribe(closingNotifier, new SimpleInnerSubscriber(this)));\n        this.subscribing = false;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}