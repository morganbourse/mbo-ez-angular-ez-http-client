{"ast":null,"code":"import { EventEmitter, SimpleChanges } from '@angular/core';\nimport { ModalDirective } from 'angular-bootstrap-md';\nimport { TaskService } from 'src/app/core/services/task.service';\nimport { ToastService } from 'src/app/core/services/toast.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/task.service\";\nimport * as i2 from \"src/app/core/services/toast.service\";\nimport * as i3 from \"@angular/common\";\nimport * as i4 from \"angular-bootstrap-md\";\n\nfunction ImportTasksPopupComponent_div_14_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 15);\n    i0.ɵɵelement(1, \"mdb-icon\", 16);\n    i0.ɵɵtext(2, \" File required \");\n    i0.ɵɵelementEnd();\n  }\n}\n\nexport class ImportTasksPopupComponent {\n  constructor(taskService, notifyService) {\n    this.taskService = taskService;\n    this.notifyService = notifyService;\n    this.displayFileRequired = false;\n    this.displayChange = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n    this.onHiddenSubscription = this.modal?.onHidden.subscribe(() => {\n      this.onClose.emit();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (changes.display.currentValue === true) {\n      this.modal?.show();\n    } else {\n      this.modal?.hide();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onHiddenSubscription && !this.onHiddenSubscription.closed) {\n      this.onHiddenSubscription.unsubscribe();\n    }\n  }\n\n  onFileSelected(event) {\n    this.file = event.target.files ? event.target.files[0] : undefined;\n    this.displayFileRequired = !this.file;\n  }\n  /**\r\n   * Close the current modal instance\r\n   */\n\n\n  close() {\n    this.display = false;\n    this.displayChange.emit(false);\n  }\n  /**\r\n   * Import tasks\r\n   */\n\n\n  import() {\n    this.displayFileRequired = !this.file;\n\n    if (this.displayFileRequired) {\n      return;\n    }\n\n    this.taskService.importTasks(this.file).then(tasks => {\n      this.onSuccess.emit(tasks);\n      this.close();\n      this.notifyService.success(`${tasks.length} tasks imported successfully !`);\n    }).catch(e => {\n      this.notifyService.error('An error has occured pending tasks import...');\n      console.error(e);\n    });\n  }\n\n}\n\nImportTasksPopupComponent.ɵfac = function ImportTasksPopupComponent_Factory(t) {\n  return new (t || ImportTasksPopupComponent)(i0.ɵɵdirectiveInject(i1.TaskService), i0.ɵɵdirectiveInject(i2.ToastService));\n};\n\nImportTasksPopupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: ImportTasksPopupComponent,\n  selectors: [[\"import-tasks-popup\"]],\n  viewQuery: function ImportTasksPopupComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ModalDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);\n    }\n  },\n  inputs: {\n    display: \"display\"\n  },\n  outputs: {\n    displayChange: \"displayChange\",\n    onClose: \"onClose\",\n    onSuccess: \"onSuccess\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 19,\n  vars: 3,\n  consts: [[\"mdbModal\", \"\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"myModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [\"modalUpdateTask\", \"mdbModal\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-notify\", \"modal-info\"], [1, \"modal-content\"], [1, \"modal-header\", \"text-center\"], [1, \"modal-title\", \"white-text\", \"w-100\", \"font-weight-bold\", \"py-2\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"white-text\"], [1, \"modal-body\"], [\"for\", \"formFile\", 1, \"form-label\"], [\"id\", \"formFile\", \"type\", \"file\", \"accept\", \".json\", 1, \"form-control\", \"form-control-lg\", 3, \"change\"], [\"class\", \"text-danger mt-2\", 4, \"ngIf\"], [1, \"modal-footer\", \"justify-content-center\"], [\"mdbBtn\", \"\", \"color\", \"info\", \"mdbWavesEffect\", \"\", 1, \"waves-effect\", 3, \"outline\", \"disabled\", \"click\"], [\"far\", \"\", \"icon\", \"plus-square\", 1, \"mr-1\"], [1, \"text-danger\", \"mt-2\"], [\"fas\", \"\", \"icon\", \"exclamation-circle\", 1, \"text-danger\"]],\n  template: function ImportTasksPopupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n      i0.ɵɵtext(6, \"IMPORT TASKS\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function ImportTasksPopupComponent_Template_button_click_7_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵelementStart(8, \"span\", 7);\n      i0.ɵɵtext(9, \"\\u00D7\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"label\", 9);\n      i0.ɵɵtext(12, \"Tasks CSV file\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 10);\n      i0.ɵɵlistener(\"change\", function ImportTasksPopupComponent_Template_input_change_13_listener($event) {\n        return ctx.onFileSelected($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(14, ImportTasksPopupComponent_div_14_Template, 3, 0, \"div\", 11);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(15, \"div\", 12)(16, \"button\", 13);\n      i0.ɵɵlistener(\"click\", function ImportTasksPopupComponent_Template_button_click_16_listener() {\n        return ctx.import();\n      });\n      i0.ɵɵelement(17, \"mdb-icon\", 14);\n      i0.ɵɵtext(18, \" IMPORT \");\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(14);\n      i0.ɵɵproperty(\"ngIf\", ctx.displayFileRequired);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"outline\", true)(\"disabled\", ctx.displayFileRequired);\n    }\n  },\n  dependencies: [i3.NgIf, i4.MdbBtnDirective, i4.WavesDirective, i4.ModalDirective, i4.MdbIconComponent, i4.FarDirective, i4.FasDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\features\\todo-list\\import-tasks-popup\\import-tasks-popup.component.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\features\\todo-list\\import-tasks-popup\\import-tasks-popup.component.html"],"names":[],"mappings":"AAAA,SAAoB,YAApB,EAAuE,aAAvE,QAAuG,eAAvG;AACA,SAAS,cAAT,QAA+B,sBAA/B;AAGA,SAAS,WAAT,QAA4B,oCAA5B;AACA,SAAS,YAAT,QAA6B,qCAA7B;;;;;;;;;ACSQ,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AACE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,UAAA,EAAA,EAAA;AACA,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,iBAAA;AACF,IAAA,EAAA,CAAA,YAAA;;;;ADLR,OAAM,MAAO,yBAAP,CAAgC;AAsBpC,EAAA,WAAA,CAAoB,WAApB,EAAsD,aAAtD,EAAiF;AAA7D,SAAA,WAAA,GAAA,WAAA;AAAkC,SAAA,aAAA,GAAA,aAAA;AAFtD,SAAA,mBAAA,GAAsB,KAAtB;AAGE,SAAK,aAAL,GAAqB,IAAI,YAAJ,EAArB;AACA,SAAK,OAAL,GAAe,IAAI,YAAJ,EAAf;AACA,SAAK,SAAL,GAAiB,IAAI,YAAJ,EAAjB;AAEA,SAAK,oBAAL,GAA4B,KAAK,KAAL,EAAY,QAAZ,CAAqB,SAArB,CAA+B,MAAK;AAC9D,WAAK,OAAL,CAAa,IAAb;AACD,KAF2B,CAA5B;AAGD;;AAED,EAAA,WAAW,CAAC,OAAD,EAAuB;AAChC,QAAI,OAAO,CAAC,OAAR,CAAgB,YAAhB,KAAiC,IAArC,EAA2C;AACzC,WAAK,KAAL,EAAY,IAAZ;AACD,KAFD,MAEO;AACL,WAAK,KAAL,EAAY,IAAZ;AACD;AACF;;AAED,EAAA,WAAW,GAAA;AACT,QAAI,KAAK,oBAAL,IAA6B,CAAC,KAAK,oBAAL,CAA0B,MAA5D,EAAoE;AAClE,WAAK,oBAAL,CAA0B,WAA1B;AACD;AACF;;AAED,EAAA,cAAc,CAAC,KAAD,EAAW;AACvB,SAAK,IAAL,GAAY,KAAK,CAAC,MAAN,CAAa,KAAb,GAAqB,KAAK,CAAC,MAAN,CAAa,KAAb,CAAmB,CAAnB,CAArB,GAA6C,SAAzD;AACA,SAAK,mBAAL,GAA2B,CAAC,KAAK,IAAjC;AACD;AAED;;AAEG;;;AACH,EAAA,KAAK,GAAA;AACH,SAAK,OAAL,GAAe,KAAf;AACA,SAAK,aAAL,CAAmB,IAAnB,CAAwB,KAAxB;AACD;AAED;;AAEG;;;AACH,EAAA,MAAM,GAAA;AACJ,SAAK,mBAAL,GAA2B,CAAC,KAAK,IAAjC;;AACA,QAAI,KAAK,mBAAT,EAA8B;AAC5B;AACD;;AAED,SAAK,WAAL,CAAiB,WAAjB,CAA6B,KAAK,IAAlC,EAAwC,IAAxC,CAA8C,KAAD,IAAU;AACrD,WAAK,SAAL,CAAe,IAAf,CAAoB,KAApB;AACA,WAAK,KAAL;AACA,WAAK,aAAL,CAAmB,OAAnB,CAA2B,GAAG,KAAK,CAAC,MAAM,gCAA1C;AACD,KAJD,EAIG,KAJH,CAIU,CAAD,IAAM;AACb,WAAK,aAAL,CAAmB,KAAnB,CAAyB,8CAAzB;AACA,MAAA,OAAO,CAAC,KAAR,CAAc,CAAd;AACD,KAPD;AAQD;;AA5EmC;;AAAzB,yB;mBAAA,yB,EAAyB,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,WAAA,C,EAAA,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,YAAA,C;AAAA,C;;AAAzB,yB;QAAA,yB;AAAyB,EAAA,SAAA,EAAA,CAAA,CAAA,oBAAA,CAAA,C;AAAA,EAAA,SAAA,EAAA,SAAA,+BAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;qBACzB,c,EAAc,C;;;;;;;;;;;;;;;;;;;;;;;ACb3B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA,EAAA,CAAA,EACqB,CADrB,EACqB,KADrB,EACqB,CADrB,EACqB,CADrB,EACqB,KADrB,EACqB,CADrB,EACqB,CADrB,EACqB,KADrB,EACqB,CADrB,EACqB,CADrB,EACqB,IADrB,EACqB,CADrB;AAKuE,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,cAAA;AAAY,MAAA,EAAA,CAAA,YAAA;AAC3E,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,QAAA,EAAA,CAAA;AAA4E,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,0DAAA,GAAA;AAAA,eAAS,GAAA,CAAA,KAAA,EAAT;AAAgB,OAAhB;AAC1E,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA,EAAA,CAAA;AAA4C,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,QAAA;AAAO,MAAA,EAAA,CAAA,YAAA;AAIvD,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA,EAAwB,EAAxB,EAAwB,OAAxB,EAAwB,CAAxB;AAC2C,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,gBAAA;AAAc,MAAA,EAAA,CAAA,YAAA;AACvD,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA;AAAqF,MAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,SAAA,2DAAA,CAAA,MAAA,EAAA;AAAA,eAAU,GAAA,CAAA,cAAA,CAAA,MAAA,CAAV;AAAgC,OAAhC;AAArF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,yCAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;AAIF,MAAA,EAAA,CAAA,YAAA;AAEA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA,EAAiD,EAAjD,EAAiD,QAAjD,EAAiD,EAAjD;AACoE,MAAA,EAAA,CAAA,UAAA,CAAA,OAAA,EAAA,SAAA,2DAAA,GAAA;AAAA,eAAS,GAAA,CAAA,MAAA,EAAT;AAAiB,OAAjB;AAChE,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,UAAA,EAAA,EAAA;AACA,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,UAAA;AACF,MAAA,EAAA,CAAA,YAAA;;;;AAV+B,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,GAAA,CAAA,mBAAA;AAOH,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,IAAA,EAAgB,UAAhB,EAAgB,GAAA,CAAA,mBAAhB","sourcesContent":["import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ModalDirective } from 'angular-bootstrap-md';\nimport { Subscription } from 'rxjs';\nimport { Task } from 'src/app/core/models/tasks/task.model';\nimport { TaskService } from 'src/app/core/services/task.service';\nimport { ToastService } from 'src/app/core/services/toast.service';\n\n@Component({\n  selector: 'import-tasks-popup',\n  templateUrl: './import-tasks-popup.component.html',\n  styleUrls: ['./import-tasks-popup.component.scss']\n})\nexport class ImportTasksPopupComponent implements OnChanges, OnDestroy {\n  @ViewChild(ModalDirective) \n  private modal: ModalDirective | undefined;\n\n  private onHiddenSubscription?: Subscription;\n\n  @Input()\n  display!: boolean;\n\n  @Output()\n  displayChange: EventEmitter<boolean>;\n\n  @Output()\n  onClose: EventEmitter<any>;\n\n  @Output()\n  onSuccess: EventEmitter<Array<Task>>;\n\n  file!: File;\n\n  displayFileRequired = false;\n\n  constructor(private taskService: TaskService, private notifyService: ToastService) {\n    this.displayChange = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n\n    this.onHiddenSubscription = this.modal?.onHidden.subscribe(() => {\n      this.onClose.emit();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.display.currentValue === true) {\n      this.modal?.show();\n    } else {\n      this.modal?.hide();\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.onHiddenSubscription && !this.onHiddenSubscription.closed) {\n      this.onHiddenSubscription.unsubscribe();\n    }\n  }\n\n  onFileSelected(event: any): void {\n    this.file = event.target.files ? event.target.files[0] : undefined;\n    this.displayFileRequired = !this.file;\n  }\n\n  /**\n   * Close the current modal instance\n   */\n  close(): void {\n    this.display = false;\n    this.displayChange.emit(false);\n  }\n\n  /**\n   * Import tasks\n   */\n  import(): void {\n    this.displayFileRequired = !this.file;\n    if (this.displayFileRequired) {\n      return;\n    }\n\n    this.taskService.importTasks(this.file).then((tasks) => {\n      this.onSuccess.emit(tasks);\n      this.close();\n      this.notifyService.success(`${tasks.length} tasks imported successfully !`);\n    }).catch((e) => {\n      this.notifyService.error('An error has occured pending tasks import...');\n      console.error(e);\n    });\n  }\n}\n","<div mdbModal #modalUpdateTask=\"mdbModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"myModalLabel\"\n  aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-notify modal-info\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header text-center\">\n        <h4 class=\"modal-title white-text w-100 font-weight-bold py-2\">IMPORT TASKS</h4>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"close()\">\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <label for=\"formFile\" class=\"form-label\">Tasks CSV file</label>\n        <input class=\"form-control form-control-lg\" id=\"formFile\" type=\"file\" accept=\".json\" (change)=\"onFileSelected($event)\" />\n        <div class=\"text-danger mt-2\" *ngIf=\"displayFileRequired\">\n          <mdb-icon fas icon=\"exclamation-circle\" class=\"text-danger\"></mdb-icon>\n          File required\n        </div>\n      </div>\n\n      <div class=\"modal-footer justify-content-center\">\n        <button mdbBtn color=\"info\" [outline]=\"true\" class=\"waves-effect\" (click)=\"import()\" [disabled]=\"displayFileRequired\" mdbWavesEffect>\n          <mdb-icon far icon=\"plus-square\" class=\"mr-1\"></mdb-icon>\n          IMPORT\n        </button>\n      </div>\n    </div>\n  </div>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}