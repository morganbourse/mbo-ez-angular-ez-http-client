{"ast":null,"code":"import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function onErrorResumeNext(...nextSources) {\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  return source => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexport function onErrorResumeNextStatic(...nextSources) {\n  let source = undefined;\n\n  if (nextSources.length === 1 && isArray(nextSources[0])) {\n    nextSources = nextSources[0];\n  }\n\n  source = nextSources.shift();\n  return from(source).lift(new OnErrorResumeNextOperator(nextSources));\n}\n\nclass OnErrorResumeNextOperator {\n  constructor(nextSources) {\n    this.nextSources = nextSources;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n  }\n\n}\n\nclass OnErrorResumeNextSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, nextSources) {\n    super(destination);\n    this.destination = destination;\n    this.nextSources = nextSources;\n  }\n\n  notifyError() {\n    this.subscribeToNextSource();\n  }\n\n  notifyComplete() {\n    this.subscribeToNextSource();\n  }\n\n  _error(err) {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.subscribeToNextSource();\n    this.unsubscribe();\n  }\n\n  subscribeToNextSource() {\n    const next = this.nextSources.shift();\n\n    if (!!next) {\n      const innerSubscriber = new SimpleInnerSubscriber(this);\n      const destination = this.destination;\n      destination.add(innerSubscriber);\n      const innerSubscription = innerSubscribe(next, innerSubscriber);\n\n      if (innerSubscription !== innerSubscriber) {\n        destination.add(innerSubscription);\n      }\n    } else {\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/onErrorResumeNext.js"],"names":["from","isArray","SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","onErrorResumeNext","nextSources","length","source","lift","OnErrorResumeNextOperator","onErrorResumeNextStatic","undefined","shift","constructor","call","subscriber","subscribe","OnErrorResumeNextSubscriber","destination","notifyError","subscribeToNextSource","notifyComplete","_error","err","unsubscribe","_complete","next","innerSubscriber","add","innerSubscription","complete"],"mappings":"AAAA,SAASA,IAAT,QAAqB,oBAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,qBAAT,EAAgCC,qBAAhC,EAAuDC,cAAvD,QAA6E,mBAA7E;AACA,OAAO,SAASC,iBAAT,CAA2B,GAAGC,WAA9B,EAA2C;AAC9C,MAAIA,WAAW,CAACC,MAAZ,KAAuB,CAAvB,IAA4BN,OAAO,CAACK,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACrDA,IAAAA,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAzB;AACH;;AACD,SAAQE,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,yBAAJ,CAA8BJ,WAA9B,CAAZ,CAAnB;AACH;AACD,OAAO,SAASK,uBAAT,CAAiC,GAAGL,WAApC,EAAiD;AACpD,MAAIE,MAAM,GAAGI,SAAb;;AACA,MAAIN,WAAW,CAACC,MAAZ,KAAuB,CAAvB,IAA4BN,OAAO,CAACK,WAAW,CAAC,CAAD,CAAZ,CAAvC,EAAyD;AACrDA,IAAAA,WAAW,GAAGA,WAAW,CAAC,CAAD,CAAzB;AACH;;AACDE,EAAAA,MAAM,GAAGF,WAAW,CAACO,KAAZ,EAAT;AACA,SAAOb,IAAI,CAACQ,MAAD,CAAJ,CAAaC,IAAb,CAAkB,IAAIC,yBAAJ,CAA8BJ,WAA9B,CAAlB,CAAP;AACH;;AACD,MAAMI,yBAAN,CAAgC;AAC5BI,EAAAA,WAAW,CAACR,WAAD,EAAc;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;AACDS,EAAAA,IAAI,CAACC,UAAD,EAAaR,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACS,SAAP,CAAiB,IAAIC,2BAAJ,CAAgCF,UAAhC,EAA4C,KAAKV,WAAjD,CAAjB,CAAP;AACH;;AAN2B;;AAQhC,MAAMY,2BAAN,SAA0ChB,qBAA1C,CAAgE;AAC5DY,EAAAA,WAAW,CAACK,WAAD,EAAcb,WAAd,EAA2B;AAClC,UAAMa,WAAN;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKb,WAAL,GAAmBA,WAAnB;AACH;;AACDc,EAAAA,WAAW,GAAG;AACV,SAAKC,qBAAL;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,SAAKD,qBAAL;AACH;;AACDE,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,SAAKH,qBAAL;AACA,SAAKI,WAAL;AACH;;AACDC,EAAAA,SAAS,GAAG;AACR,SAAKL,qBAAL;AACA,SAAKI,WAAL;AACH;;AACDJ,EAAAA,qBAAqB,GAAG;AACpB,UAAMM,IAAI,GAAG,KAAKrB,WAAL,CAAiBO,KAAjB,EAAb;;AACA,QAAI,CAAC,CAACc,IAAN,EAAY;AACR,YAAMC,eAAe,GAAG,IAAIzB,qBAAJ,CAA0B,IAA1B,CAAxB;AACA,YAAMgB,WAAW,GAAG,KAAKA,WAAzB;AACAA,MAAAA,WAAW,CAACU,GAAZ,CAAgBD,eAAhB;AACA,YAAME,iBAAiB,GAAG1B,cAAc,CAACuB,IAAD,EAAOC,eAAP,CAAxC;;AACA,UAAIE,iBAAiB,KAAKF,eAA1B,EAA2C;AACvCT,QAAAA,WAAW,CAACU,GAAZ,CAAgBC,iBAAhB;AACH;AACJ,KARD,MASK;AACD,WAAKX,WAAL,CAAiBY,QAAjB;AACH;AACJ;;AAlC2D","sourcesContent":["import { from } from '../observable/from';\nimport { isArray } from '../util/isArray';\nimport { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function onErrorResumeNext(...nextSources) {\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    return (source) => source.lift(new OnErrorResumeNextOperator(nextSources));\n}\nexport function onErrorResumeNextStatic(...nextSources) {\n    let source = undefined;\n    if (nextSources.length === 1 && isArray(nextSources[0])) {\n        nextSources = nextSources[0];\n    }\n    source = nextSources.shift();\n    return from(source).lift(new OnErrorResumeNextOperator(nextSources));\n}\nclass OnErrorResumeNextOperator {\n    constructor(nextSources) {\n        this.nextSources = nextSources;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new OnErrorResumeNextSubscriber(subscriber, this.nextSources));\n    }\n}\nclass OnErrorResumeNextSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, nextSources) {\n        super(destination);\n        this.destination = destination;\n        this.nextSources = nextSources;\n    }\n    notifyError() {\n        this.subscribeToNextSource();\n    }\n    notifyComplete() {\n        this.subscribeToNextSource();\n    }\n    _error(err) {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    _complete() {\n        this.subscribeToNextSource();\n        this.unsubscribe();\n    }\n    subscribeToNextSource() {\n        const next = this.nextSources.shift();\n        if (!!next) {\n            const innerSubscriber = new SimpleInnerSubscriber(this);\n            const destination = this.destination;\n            destination.add(innerSubscriber);\n            const innerSubscription = innerSubscribe(next, innerSubscriber);\n            if (innerSubscription !== innerSubscriber) {\n                destination.add(innerSubscription);\n            }\n        }\n        else {\n            this.destination.complete();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}