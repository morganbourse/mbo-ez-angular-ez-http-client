{"ast":null,"code":"import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n  return new Observable(subscriber => {\n    let resource;\n\n    try {\n      resource = resourceFactory();\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    let result;\n\n    try {\n      result = observableFactory(resource);\n    } catch (err) {\n      subscriber.error(err);\n      return undefined;\n    }\n\n    const source = result ? from(result) : EMPTY;\n    const subscription = source.subscribe(subscriber);\n    return () => {\n      subscription.unsubscribe();\n\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/observable/using.js"],"names":["Observable","from","EMPTY","using","resourceFactory","observableFactory","subscriber","resource","err","error","undefined","result","source","subscription","subscribe","unsubscribe"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,SAASC,KAAT,CAAeC,eAAf,EAAgCC,iBAAhC,EAAmD;AACtD,SAAO,IAAIL,UAAJ,CAAeM,UAAU,IAAI;AAChC,QAAIC,QAAJ;;AACA,QAAI;AACAA,MAAAA,QAAQ,GAAGH,eAAe,EAA1B;AACH,KAFD,CAGA,OAAOI,GAAP,EAAY;AACRF,MAAAA,UAAU,CAACG,KAAX,CAAiBD,GAAjB;AACA,aAAOE,SAAP;AACH;;AACD,QAAIC,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAGN,iBAAiB,CAACE,QAAD,CAA1B;AACH,KAFD,CAGA,OAAOC,GAAP,EAAY;AACRF,MAAAA,UAAU,CAACG,KAAX,CAAiBD,GAAjB;AACA,aAAOE,SAAP;AACH;;AACD,UAAME,MAAM,GAAGD,MAAM,GAAGV,IAAI,CAACU,MAAD,CAAP,GAAkBT,KAAvC;AACA,UAAMW,YAAY,GAAGD,MAAM,CAACE,SAAP,CAAiBR,UAAjB,CAArB;AACA,WAAO,MAAM;AACTO,MAAAA,YAAY,CAACE,WAAb;;AACA,UAAIR,QAAJ,EAAc;AACVA,QAAAA,QAAQ,CAACQ,WAAT;AACH;AACJ,KALD;AAMH,GAzBM,CAAP;AA0BH","sourcesContent":["import { Observable } from '../Observable';\nimport { from } from './from';\nimport { EMPTY } from './empty';\nexport function using(resourceFactory, observableFactory) {\n    return new Observable(subscriber => {\n        let resource;\n        try {\n            resource = resourceFactory();\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        let result;\n        try {\n            result = observableFactory(resource);\n        }\n        catch (err) {\n            subscriber.error(err);\n            return undefined;\n        }\n        const source = result ? from(result) : EMPTY;\n        const subscription = source.subscribe(subscriber);\n        return () => {\n            subscription.unsubscribe();\n            if (resource) {\n                resource.unsubscribe();\n            }\n        };\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}