{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nexport function skipLast(count) {\n  return source => source.lift(new SkipLastOperator(count));\n}\n\nclass SkipLastOperator {\n  constructor(_skipCount) {\n    this._skipCount = _skipCount;\n\n    if (this._skipCount < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  call(subscriber, source) {\n    if (this._skipCount === 0) {\n      return source.subscribe(new Subscriber(subscriber));\n    } else {\n      return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n    }\n  }\n\n}\n\nclass SkipLastSubscriber extends Subscriber {\n  constructor(destination, _skipCount) {\n    super(destination);\n    this._skipCount = _skipCount;\n    this._count = 0;\n    this._ring = new Array(_skipCount);\n  }\n\n  _next(value) {\n    const skipCount = this._skipCount;\n    const count = this._count++;\n\n    if (count < skipCount) {\n      this._ring[count] = value;\n    } else {\n      const currentIndex = count % skipCount;\n      const ring = this._ring;\n      const oldValue = ring[currentIndex];\n      ring[currentIndex] = value;\n      this.destination.next(oldValue);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/skipLast.js"],"names":["Subscriber","ArgumentOutOfRangeError","skipLast","count","source","lift","SkipLastOperator","constructor","_skipCount","call","subscriber","subscribe","SkipLastSubscriber","destination","_count","_ring","Array","_next","value","skipCount","currentIndex","ring","oldValue","next"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,OAAO,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAC5B,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,gBAAJ,CAAqBH,KAArB,CAAZ,CAAnB;AACH;;AACD,MAAMG,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACC,UAAD,EAAa;AACpB,SAAKA,UAAL,GAAkBA,UAAlB;;AACA,QAAI,KAAKA,UAAL,GAAkB,CAAtB,EAAyB;AACrB,YAAM,IAAIP,uBAAJ,EAAN;AACH;AACJ;;AACDQ,EAAAA,IAAI,CAACC,UAAD,EAAaN,MAAb,EAAqB;AACrB,QAAI,KAAKI,UAAL,KAAoB,CAAxB,EAA2B;AACvB,aAAOJ,MAAM,CAACO,SAAP,CAAiB,IAAIX,UAAJ,CAAeU,UAAf,CAAjB,CAAP;AACH,KAFD,MAGK;AACD,aAAON,MAAM,CAACO,SAAP,CAAiB,IAAIC,kBAAJ,CAAuBF,UAAvB,EAAmC,KAAKF,UAAxC,CAAjB,CAAP;AACH;AACJ;;AAdkB;;AAgBvB,MAAMI,kBAAN,SAAiCZ,UAAjC,CAA4C;AACxCO,EAAAA,WAAW,CAACM,WAAD,EAAcL,UAAd,EAA0B;AACjC,UAAMK,WAAN;AACA,SAAKL,UAAL,GAAkBA,UAAlB;AACA,SAAKM,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,IAAIC,KAAJ,CAAUR,UAAV,CAAb;AACH;;AACDS,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,UAAMC,SAAS,GAAG,KAAKX,UAAvB;AACA,UAAML,KAAK,GAAG,KAAKW,MAAL,EAAd;;AACA,QAAIX,KAAK,GAAGgB,SAAZ,EAAuB;AACnB,WAAKJ,KAAL,CAAWZ,KAAX,IAAoBe,KAApB;AACH,KAFD,MAGK;AACD,YAAME,YAAY,GAAGjB,KAAK,GAAGgB,SAA7B;AACA,YAAME,IAAI,GAAG,KAAKN,KAAlB;AACA,YAAMO,QAAQ,GAAGD,IAAI,CAACD,YAAD,CAArB;AACAC,MAAAA,IAAI,CAACD,YAAD,CAAJ,GAAqBF,KAArB;AACA,WAAKL,WAAL,CAAiBU,IAAjB,CAAsBD,QAAtB;AACH;AACJ;;AApBuC","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nexport function skipLast(count) {\n    return (source) => source.lift(new SkipLastOperator(count));\n}\nclass SkipLastOperator {\n    constructor(_skipCount) {\n        this._skipCount = _skipCount;\n        if (this._skipCount < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        if (this._skipCount === 0) {\n            return source.subscribe(new Subscriber(subscriber));\n        }\n        else {\n            return source.subscribe(new SkipLastSubscriber(subscriber, this._skipCount));\n        }\n    }\n}\nclass SkipLastSubscriber extends Subscriber {\n    constructor(destination, _skipCount) {\n        super(destination);\n        this._skipCount = _skipCount;\n        this._count = 0;\n        this._ring = new Array(_skipCount);\n    }\n    _next(value) {\n        const skipCount = this._skipCount;\n        const count = this._count++;\n        if (count < skipCount) {\n            this._ring[count] = value;\n        }\n        else {\n            const currentIndex = count % skipCount;\n            const ring = this._ring;\n            const oldValue = ring[currentIndex];\n            ring[currentIndex] = value;\n            this.destination.next(oldValue);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}