{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function audit(durationSelector) {\n  return function auditOperatorFunction(source) {\n    return source.lift(new AuditOperator(durationSelector));\n  };\n}\n\nclass AuditOperator {\n  constructor(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n  }\n\n}\n\nclass AuditSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, durationSelector) {\n    super(destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n\n    if (!this.throttled) {\n      let duration;\n\n      try {\n        const {\n          durationSelector\n        } = this;\n        duration = durationSelector(value);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n\n      const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n\n      if (!innerSubscription || innerSubscription.closed) {\n        this.clearThrottle();\n      } else {\n        this.add(this.throttled = innerSubscription);\n      }\n    }\n  }\n\n  clearThrottle() {\n    const {\n      value,\n      hasValue,\n      throttled\n    } = this;\n\n    if (throttled) {\n      this.remove(throttled);\n      this.throttled = undefined;\n      throttled.unsubscribe();\n    }\n\n    if (hasValue) {\n      this.value = undefined;\n      this.hasValue = false;\n      this.destination.next(value);\n    }\n  }\n\n  notifyNext() {\n    this.clearThrottle();\n  }\n\n  notifyComplete() {\n    this.clearThrottle();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/audit.js"],"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","audit","durationSelector","auditOperatorFunction","source","lift","AuditOperator","constructor","call","subscriber","subscribe","AuditSubscriber","destination","hasValue","_next","value","throttled","duration","err","error","innerSubscription","closed","clearThrottle","add","remove","undefined","unsubscribe","next","notifyNext","notifyComplete"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,KAAT,CAAeC,gBAAf,EAAiC;AACpC,SAAO,SAASC,qBAAT,CAA+BC,MAA/B,EAAuC;AAC1C,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,aAAJ,CAAkBJ,gBAAlB,CAAZ,CAAP;AACH,GAFD;AAGH;;AACD,MAAMI,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACL,gBAAD,EAAmB;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;;AACDM,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,UAApB,EAAgC,KAAKP,gBAArC,CAAjB,CAAP;AACH;;AANe;;AAQpB,MAAMS,eAAN,SAA8Bb,qBAA9B,CAAoD;AAChDS,EAAAA,WAAW,CAACK,WAAD,EAAcV,gBAAd,EAAgC;AACvC,UAAMU,WAAN;AACA,SAAKV,gBAAL,GAAwBA,gBAAxB;AACA,SAAKW,QAAL,GAAgB,KAAhB;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKF,QAAL,GAAgB,IAAhB;;AACA,QAAI,CAAC,KAAKG,SAAV,EAAqB;AACjB,UAAIC,QAAJ;;AACA,UAAI;AACA,cAAM;AAAEf,UAAAA;AAAF,YAAuB,IAA7B;AACAe,QAAAA,QAAQ,GAAGf,gBAAgB,CAACa,KAAD,CAA3B;AACH,OAHD,CAIA,OAAOG,GAAP,EAAY;AACR,eAAO,KAAKN,WAAL,CAAiBO,KAAjB,CAAuBD,GAAvB,CAAP;AACH;;AACD,YAAME,iBAAiB,GAAGrB,cAAc,CAACkB,QAAD,EAAW,IAAIjB,qBAAJ,CAA0B,IAA1B,CAAX,CAAxC;;AACA,UAAI,CAACoB,iBAAD,IAAsBA,iBAAiB,CAACC,MAA5C,EAAoD;AAChD,aAAKC,aAAL;AACH,OAFD,MAGK;AACD,aAAKC,GAAL,CAAS,KAAKP,SAAL,GAAiBI,iBAA1B;AACH;AACJ;AACJ;;AACDE,EAAAA,aAAa,GAAG;AACZ,UAAM;AAAEP,MAAAA,KAAF;AAASF,MAAAA,QAAT;AAAmBG,MAAAA;AAAnB,QAAiC,IAAvC;;AACA,QAAIA,SAAJ,EAAe;AACX,WAAKQ,MAAL,CAAYR,SAAZ;AACA,WAAKA,SAAL,GAAiBS,SAAjB;AACAT,MAAAA,SAAS,CAACU,WAAV;AACH;;AACD,QAAIb,QAAJ,EAAc;AACV,WAAKE,KAAL,GAAaU,SAAb;AACA,WAAKZ,QAAL,GAAgB,KAAhB;AACA,WAAKD,WAAL,CAAiBe,IAAjB,CAAsBZ,KAAtB;AACH;AACJ;;AACDa,EAAAA,UAAU,GAAG;AACT,SAAKN,aAAL;AACH;;AACDO,EAAAA,cAAc,GAAG;AACb,SAAKP,aAAL;AACH;;AA7C+C","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function audit(durationSelector) {\n    return function auditOperatorFunction(source) {\n        return source.lift(new AuditOperator(durationSelector));\n    };\n}\nclass AuditOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new AuditSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass AuditSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n        if (!this.throttled) {\n            let duration;\n            try {\n                const { durationSelector } = this;\n                duration = durationSelector(value);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n            const innerSubscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n            if (!innerSubscription || innerSubscription.closed) {\n                this.clearThrottle();\n            }\n            else {\n                this.add(this.throttled = innerSubscription);\n            }\n        }\n    }\n    clearThrottle() {\n        const { value, hasValue, throttled } = this;\n        if (throttled) {\n            this.remove(throttled);\n            this.throttled = undefined;\n            throttled.unsubscribe();\n        }\n        if (hasValue) {\n            this.value = undefined;\n            this.hasValue = false;\n            this.destination.next(value);\n        }\n    }\n    notifyNext() {\n        this.clearThrottle();\n    }\n    notifyComplete() {\n        this.clearThrottle();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}