{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return source => new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n  }\n\n  return source => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\n\nclass DelayWhenOperator {\n  constructor(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  }\n\n}\n\nclass DelayWhenSubscriber extends OuterSubscriber {\n  constructor(destination, delayDurationSelector) {\n    super(destination);\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.index = 0;\n  }\n\n  notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  }\n\n  notifyError(error, innerSub) {\n    this._error(error);\n  }\n\n  notifyComplete(innerSub) {\n    const value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  }\n\n  _next(value) {\n    const index = this.index++;\n\n    try {\n      const delayNotifier = this.delayDurationSelector(value, index);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  _complete() {\n    this.completed = true;\n    this.tryComplete();\n    this.unsubscribe();\n  }\n\n  removeSubscription(subscription) {\n    subscription.unsubscribe();\n    const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n\n    if (subscriptionIdx !== -1) {\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n    }\n\n    return subscription.outerValue;\n  }\n\n  tryDelay(delayNotifier, value) {\n    const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      const destination = this.destination;\n      destination.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n  }\n\n  tryComplete() {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  }\n\n}\n\nclass SubscriptionDelayObservable extends Observable {\n  constructor(source, subscriptionDelay) {\n    super();\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n\n  _subscribe(subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  }\n\n}\n\nclass SubscriptionDelaySubscriber extends Subscriber {\n  constructor(parent, source) {\n    super();\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n\n  _next(unused) {\n    this.subscribeToSource();\n  }\n\n  _error(err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  }\n\n  _complete() {\n    this.unsubscribe();\n    this.subscribeToSource();\n  }\n\n  subscribeToSource() {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/delayWhen.js"],"names":["Subscriber","Observable","OuterSubscriber","subscribeToResult","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","constructor","call","subscriber","subscribe","DelayWhenSubscriber","destination","completed","delayNotifierSubscriptions","index","notifyNext","outerValue","_innerValue","_outerIndex","_innerIndex","innerSub","next","removeSubscription","tryComplete","notifyError","error","_error","notifyComplete","value","_next","delayNotifier","tryDelay","err","_complete","unsubscribe","subscription","subscriptionIdx","indexOf","splice","notifierSubscription","closed","add","push","length","complete","_subscribe","SubscriptionDelaySubscriber","parent","sourceSubscribed","unused","subscribeToSource"],"mappings":"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","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return (source) => new SubscriptionDelayObservable(source, subscriptionDelay)\n            .lift(new DelayWhenOperator(delayDurationSelector));\n    }\n    return (source) => source.lift(new DelayWhenOperator(delayDurationSelector));\n}\nclass DelayWhenOperator {\n    constructor(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    }\n}\nclass DelayWhenSubscriber extends OuterSubscriber {\n    constructor(destination, delayDurationSelector) {\n        super(destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.index = 0;\n    }\n    notifyNext(outerValue, _innerValue, _outerIndex, _innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    }\n    notifyError(error, innerSub) {\n        this._error(error);\n    }\n    notifyComplete(innerSub) {\n        const value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    }\n    _next(value) {\n        const index = this.index++;\n        try {\n            const delayNotifier = this.delayDurationSelector(value, index);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.completed = true;\n        this.tryComplete();\n        this.unsubscribe();\n    }\n    removeSubscription(subscription) {\n        subscription.unsubscribe();\n        const subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        if (subscriptionIdx !== -1) {\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n        }\n        return subscription.outerValue;\n    }\n    tryDelay(delayNotifier, value) {\n        const notifierSubscription = subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            const destination = this.destination;\n            destination.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n    }\n    tryComplete() {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    }\n}\nclass SubscriptionDelayObservable extends Observable {\n    constructor(source, subscriptionDelay) {\n        super();\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    _subscribe(subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    }\n}\nclass SubscriptionDelaySubscriber extends Subscriber {\n    constructor(parent, source) {\n        super();\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    _next(unused) {\n        this.subscribeToSource();\n    }\n    _error(err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    }\n    _complete() {\n        this.unsubscribe();\n        this.subscribeToSource();\n    }\n    subscribeToSource() {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}