{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n  return source => source.lift(new RetryWhenOperator(notifier, source));\n}\n\nclass RetryWhenOperator {\n  constructor(notifier, source) {\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n  }\n\n}\n\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n  }\n\n  error(err) {\n    if (!this.isStopped) {\n      let errors = this.errors;\n      let retries = this.retries;\n      let retriesSubscription = this.retriesSubscription;\n\n      if (!retries) {\n        errors = new Subject();\n\n        try {\n          const {\n            notifier\n          } = this;\n          retries = notifier(errors);\n        } catch (e) {\n          return super.error(e);\n        }\n\n        retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n      } else {\n        this.errors = undefined;\n        this.retriesSubscription = undefined;\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.errors = errors;\n      this.retries = retries;\n      this.retriesSubscription = retriesSubscription;\n      errors.next(err);\n    }\n  }\n\n  _unsubscribe() {\n    const {\n      errors,\n      retriesSubscription\n    } = this;\n\n    if (errors) {\n      errors.unsubscribe();\n      this.errors = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  }\n\n  notifyNext() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n\n    this._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    this.source.subscribe(this);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/retryWhen.js"],"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","retryWhen","notifier","source","lift","RetryWhenOperator","constructor","call","subscriber","subscribe","RetryWhenSubscriber","destination","error","err","isStopped","errors","retries","retriesSubscription","e","undefined","_unsubscribeAndRecycle","next","_unsubscribe","unsubscribe","notifyNext"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,EAAgCC,MAAhC,CAAZ,CAAnB;AACH;;AACD,MAAME,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACJ,QAAD,EAAWC,MAAX,EAAmB;AAC1B,SAAKD,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDI,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKN,QAAzC,EAAmD,KAAKC,MAAxD,CAAjB,CAAP;AACH;;AAPmB;;AASxB,MAAMO,mBAAN,SAAkCZ,qBAAlC,CAAwD;AACpDQ,EAAAA,WAAW,CAACK,WAAD,EAAcT,QAAd,EAAwBC,MAAxB,EAAgC;AACvC,UAAMQ,WAAN;AACA,SAAKT,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDS,EAAAA,KAAK,CAACC,GAAD,EAAM;AACP,QAAI,CAAC,KAAKC,SAAV,EAAqB;AACjB,UAAIC,MAAM,GAAG,KAAKA,MAAlB;AACA,UAAIC,OAAO,GAAG,KAAKA,OAAnB;AACA,UAAIC,mBAAmB,GAAG,KAAKA,mBAA/B;;AACA,UAAI,CAACD,OAAL,EAAc;AACVD,QAAAA,MAAM,GAAG,IAAIlB,OAAJ,EAAT;;AACA,YAAI;AACA,gBAAM;AAAEK,YAAAA;AAAF,cAAe,IAArB;AACAc,UAAAA,OAAO,GAAGd,QAAQ,CAACa,MAAD,CAAlB;AACH,SAHD,CAIA,OAAOG,CAAP,EAAU;AACN,iBAAO,MAAMN,KAAN,CAAYM,CAAZ,CAAP;AACH;;AACDD,QAAAA,mBAAmB,GAAGlB,cAAc,CAACiB,OAAD,EAAU,IAAIhB,qBAAJ,CAA0B,IAA1B,CAAV,CAApC;AACH,OAVD,MAWK;AACD,aAAKe,MAAL,GAAcI,SAAd;AACA,aAAKF,mBAAL,GAA2BE,SAA3B;AACH;;AACD,WAAKC,sBAAL;;AACA,WAAKL,MAAL,GAAcA,MAAd;AACA,WAAKC,OAAL,GAAeA,OAAf;AACA,WAAKC,mBAAL,GAA2BA,mBAA3B;AACAF,MAAAA,MAAM,CAACM,IAAP,CAAYR,GAAZ;AACH;AACJ;;AACDS,EAAAA,YAAY,GAAG;AACX,UAAM;AAAEP,MAAAA,MAAF;AAAUE,MAAAA;AAAV,QAAkC,IAAxC;;AACA,QAAIF,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACQ,WAAP;AACA,WAAKR,MAAL,GAAcI,SAAd;AACH;;AACD,QAAIF,mBAAJ,EAAyB;AACrBA,MAAAA,mBAAmB,CAACM,WAApB;AACA,WAAKN,mBAAL,GAA2BE,SAA3B;AACH;;AACD,SAAKH,OAAL,GAAeG,SAAf;AACH;;AACDK,EAAAA,UAAU,GAAG;AACT,UAAM;AAAEF,MAAAA;AAAF,QAAmB,IAAzB;AACA,SAAKA,YAAL,GAAoB,IAApB;;AACA,SAAKF,sBAAL;;AACA,SAAKE,YAAL,GAAoBA,YAApB;AACA,SAAKnB,MAAL,CAAYM,SAAZ,CAAsB,IAAtB;AACH;;AAnDmD","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function retryWhen(notifier) {\n    return (source) => source.lift(new RetryWhenOperator(notifier, source));\n}\nclass RetryWhenOperator {\n    constructor(notifier, source) {\n        this.notifier = notifier;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RetryWhenSubscriber(subscriber, this.notifier, this.source));\n    }\n}\nclass RetryWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n    }\n    error(err) {\n        if (!this.isStopped) {\n            let errors = this.errors;\n            let retries = this.retries;\n            let retriesSubscription = this.retriesSubscription;\n            if (!retries) {\n                errors = new Subject();\n                try {\n                    const { notifier } = this;\n                    retries = notifier(errors);\n                }\n                catch (e) {\n                    return super.error(e);\n                }\n                retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n            }\n            else {\n                this.errors = undefined;\n                this.retriesSubscription = undefined;\n            }\n            this._unsubscribeAndRecycle();\n            this.errors = errors;\n            this.retries = retries;\n            this.retriesSubscription = retriesSubscription;\n            errors.next(err);\n        }\n    }\n    _unsubscribe() {\n        const { errors, retriesSubscription } = this;\n        if (errors) {\n            errors.unsubscribe();\n            this.errors = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    notifyNext() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        this._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        this.source.subscribe(this);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}