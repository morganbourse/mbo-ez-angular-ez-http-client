{"ast":null,"code":"import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n  return source => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n  constructor(accumulator, seed, concurrent) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.concurrent = concurrent;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n  }\n\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, accumulator, acc, concurrent) {\n    super(destination);\n    this.accumulator = accumulator;\n    this.acc = acc;\n    this.concurrent = concurrent;\n    this.hasValue = false;\n    this.hasCompleted = false;\n    this.buffer = [];\n    this.active = 0;\n    this.index = 0;\n  }\n\n  _next(value) {\n    if (this.active < this.concurrent) {\n      const index = this.index++;\n      const destination = this.destination;\n      let ish;\n\n      try {\n        const {\n          accumulator\n        } = this;\n        ish = accumulator(this.acc, value, index);\n      } catch (e) {\n        return destination.error(e);\n      }\n\n      this.active++;\n\n      this._innerSub(ish);\n    } else {\n      this.buffer.push(value);\n    }\n  }\n\n  _innerSub(ish) {\n    const innerSubscriber = new SimpleInnerSubscriber(this);\n    const destination = this.destination;\n    destination.add(innerSubscriber);\n    const innerSubscription = innerSubscribe(ish, innerSubscriber);\n\n    if (innerSubscription !== innerSubscriber) {\n      destination.add(innerSubscription);\n    }\n  }\n\n  _complete() {\n    this.hasCompleted = true;\n\n    if (this.active === 0 && this.buffer.length === 0) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n\n    this.unsubscribe();\n  }\n\n  notifyNext(innerValue) {\n    const {\n      destination\n    } = this;\n    this.acc = innerValue;\n    this.hasValue = true;\n    destination.next(innerValue);\n  }\n\n  notifyComplete() {\n    const buffer = this.buffer;\n    this.active--;\n\n    if (buffer.length > 0) {\n      this._next(buffer.shift());\n    } else if (this.active === 0 && this.hasCompleted) {\n      if (this.hasValue === false) {\n        this.destination.next(this.acc);\n      }\n\n      this.destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/mergeScan.js"],"names":["SimpleOuterSubscriber","SimpleInnerSubscriber","innerSubscribe","mergeScan","accumulator","seed","concurrent","Number","POSITIVE_INFINITY","source","lift","MergeScanOperator","constructor","call","subscriber","subscribe","MergeScanSubscriber","destination","acc","hasValue","hasCompleted","buffer","active","index","_next","value","ish","e","error","_innerSub","push","innerSubscriber","add","innerSubscription","_complete","length","next","complete","unsubscribe","notifyNext","innerValue","notifyComplete","shift"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,qBAAhC,EAAuDC,cAAvD,QAA6E,mBAA7E;AACA,OAAO,SAASC,SAAT,CAAmBC,WAAnB,EAAgCC,IAAhC,EAAsCC,UAAU,GAAGC,MAAM,CAACC,iBAA1D,EAA6E;AAChF,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBP,WAAtB,EAAmCC,IAAnC,EAAyCC,UAAzC,CAAZ,CAAnB;AACH;AACD,OAAO,MAAMK,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACR,WAAD,EAAcC,IAAd,EAAoBC,UAApB,EAAgC;AACvC,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,UAAL,GAAkBA,UAAlB;AACH;;AACDO,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKV,WAAzC,EAAsD,KAAKC,IAA3D,EAAiE,KAAKC,UAAtE,CAAjB,CAAP;AACH;;AAR0B;AAU/B,OAAO,MAAMU,mBAAN,SAAkChB,qBAAlC,CAAwD;AAC3DY,EAAAA,WAAW,CAACK,WAAD,EAAcb,WAAd,EAA2Bc,GAA3B,EAAgCZ,UAAhC,EAA4C;AACnD,UAAMW,WAAN;AACA,SAAKb,WAAL,GAAmBA,WAAnB;AACA,SAAKc,GAAL,GAAWA,GAAX;AACA,SAAKZ,UAAL,GAAkBA,UAAlB;AACA,SAAKa,QAAL,GAAgB,KAAhB;AACA,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,MAAL,GAAc,EAAd;AACA,SAAKC,MAAL,GAAc,CAAd;AACA,SAAKC,KAAL,GAAa,CAAb;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAI,KAAKH,MAAL,GAAc,KAAKhB,UAAvB,EAAmC;AAC/B,YAAMiB,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,YAAMN,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAIS,GAAJ;;AACA,UAAI;AACA,cAAM;AAAEtB,UAAAA;AAAF,YAAkB,IAAxB;AACAsB,QAAAA,GAAG,GAAGtB,WAAW,CAAC,KAAKc,GAAN,EAAWO,KAAX,EAAkBF,KAAlB,CAAjB;AACH,OAHD,CAIA,OAAOI,CAAP,EAAU;AACN,eAAOV,WAAW,CAACW,KAAZ,CAAkBD,CAAlB,CAAP;AACH;;AACD,WAAKL,MAAL;;AACA,WAAKO,SAAL,CAAeH,GAAf;AACH,KAbD,MAcK;AACD,WAAKL,MAAL,CAAYS,IAAZ,CAAiBL,KAAjB;AACH;AACJ;;AACDI,EAAAA,SAAS,CAACH,GAAD,EAAM;AACX,UAAMK,eAAe,GAAG,IAAI9B,qBAAJ,CAA0B,IAA1B,CAAxB;AACA,UAAMgB,WAAW,GAAG,KAAKA,WAAzB;AACAA,IAAAA,WAAW,CAACe,GAAZ,CAAgBD,eAAhB;AACA,UAAME,iBAAiB,GAAG/B,cAAc,CAACwB,GAAD,EAAMK,eAAN,CAAxC;;AACA,QAAIE,iBAAiB,KAAKF,eAA1B,EAA2C;AACvCd,MAAAA,WAAW,CAACe,GAAZ,CAAgBC,iBAAhB;AACH;AACJ;;AACDC,EAAAA,SAAS,GAAG;AACR,SAAKd,YAAL,GAAoB,IAApB;;AACA,QAAI,KAAKE,MAAL,KAAgB,CAAhB,IAAqB,KAAKD,MAAL,CAAYc,MAAZ,KAAuB,CAAhD,EAAmD;AAC/C,UAAI,KAAKhB,QAAL,KAAkB,KAAtB,EAA6B;AACzB,aAAKF,WAAL,CAAiBmB,IAAjB,CAAsB,KAAKlB,GAA3B;AACH;;AACD,WAAKD,WAAL,CAAiBoB,QAAjB;AACH;;AACD,SAAKC,WAAL;AACH;;AACDC,EAAAA,UAAU,CAACC,UAAD,EAAa;AACnB,UAAM;AAAEvB,MAAAA;AAAF,QAAkB,IAAxB;AACA,SAAKC,GAAL,GAAWsB,UAAX;AACA,SAAKrB,QAAL,GAAgB,IAAhB;AACAF,IAAAA,WAAW,CAACmB,IAAZ,CAAiBI,UAAjB;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,UAAMpB,MAAM,GAAG,KAAKA,MAApB;AACA,SAAKC,MAAL;;AACA,QAAID,MAAM,CAACc,MAAP,GAAgB,CAApB,EAAuB;AACnB,WAAKX,KAAL,CAAWH,MAAM,CAACqB,KAAP,EAAX;AACH,KAFD,MAGK,IAAI,KAAKpB,MAAL,KAAgB,CAAhB,IAAqB,KAAKF,YAA9B,EAA4C;AAC7C,UAAI,KAAKD,QAAL,KAAkB,KAAtB,EAA6B;AACzB,aAAKF,WAAL,CAAiBmB,IAAjB,CAAsB,KAAKlB,GAA3B;AACH;;AACD,WAAKD,WAAL,CAAiBoB,QAAjB;AACH;AACJ;;AApE0D","sourcesContent":["import { SimpleOuterSubscriber, SimpleInnerSubscriber, innerSubscribe } from '../innerSubscribe';\nexport function mergeScan(accumulator, seed, concurrent = Number.POSITIVE_INFINITY) {\n    return (source) => source.lift(new MergeScanOperator(accumulator, seed, concurrent));\n}\nexport class MergeScanOperator {\n    constructor(accumulator, seed, concurrent) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.concurrent = concurrent;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new MergeScanSubscriber(subscriber, this.accumulator, this.seed, this.concurrent));\n    }\n}\nexport class MergeScanSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, accumulator, acc, concurrent) {\n        super(destination);\n        this.accumulator = accumulator;\n        this.acc = acc;\n        this.concurrent = concurrent;\n        this.hasValue = false;\n        this.hasCompleted = false;\n        this.buffer = [];\n        this.active = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.active < this.concurrent) {\n            const index = this.index++;\n            const destination = this.destination;\n            let ish;\n            try {\n                const { accumulator } = this;\n                ish = accumulator(this.acc, value, index);\n            }\n            catch (e) {\n                return destination.error(e);\n            }\n            this.active++;\n            this._innerSub(ish);\n        }\n        else {\n            this.buffer.push(value);\n        }\n    }\n    _innerSub(ish) {\n        const innerSubscriber = new SimpleInnerSubscriber(this);\n        const destination = this.destination;\n        destination.add(innerSubscriber);\n        const innerSubscription = innerSubscribe(ish, innerSubscriber);\n        if (innerSubscription !== innerSubscriber) {\n            destination.add(innerSubscription);\n        }\n    }\n    _complete() {\n        this.hasCompleted = true;\n        if (this.active === 0 && this.buffer.length === 0) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n        this.unsubscribe();\n    }\n    notifyNext(innerValue) {\n        const { destination } = this;\n        this.acc = innerValue;\n        this.hasValue = true;\n        destination.next(innerValue);\n    }\n    notifyComplete() {\n        const buffer = this.buffer;\n        this.active--;\n        if (buffer.length > 0) {\n            this._next(buffer.shift());\n        }\n        else if (this.active === 0 && this.hasCompleted) {\n            if (this.hasValue === false) {\n                this.destination.next(this.acc);\n            }\n            this.destination.complete();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}