{"ast":null,"code":"import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n  if (arguments.length >= 2) {\n    return function reduceOperatorFunctionWithSeed(source) {\n      return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n    };\n  }\n\n  return function reduceOperatorFunction(source) {\n    return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n  };\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/reduce.js"],"names":["scan","takeLast","defaultIfEmpty","pipe","reduce","accumulator","seed","arguments","length","reduceOperatorFunctionWithSeed","source","reduceOperatorFunction","acc","value","index"],"mappings":"AAAA,SAASA,IAAT,QAAqB,QAArB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,cAAT,QAA+B,kBAA/B;AACA,SAASC,IAAT,QAAqB,cAArB;AACA,OAAO,SAASC,MAAT,CAAgBC,WAAhB,EAA6BC,IAA7B,EAAmC;AACtC,MAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AACvB,WAAO,SAASC,8BAAT,CAAwCC,MAAxC,EAAgD;AACnD,aAAOP,IAAI,CAACH,IAAI,CAACK,WAAD,EAAcC,IAAd,CAAL,EAA0BL,QAAQ,CAAC,CAAD,CAAlC,EAAuCC,cAAc,CAACI,IAAD,CAArD,CAAJ,CAAiEI,MAAjE,CAAP;AACH,KAFD;AAGH;;AACD,SAAO,SAASC,sBAAT,CAAgCD,MAAhC,EAAwC;AAC3C,WAAOP,IAAI,CAACH,IAAI,CAAC,CAACY,GAAD,EAAMC,KAAN,EAAaC,KAAb,KAAuBT,WAAW,CAACO,GAAD,EAAMC,KAAN,EAAaC,KAAK,GAAG,CAArB,CAAnC,CAAL,EAAkEb,QAAQ,CAAC,CAAD,CAA1E,CAAJ,CAAmFS,MAAnF,CAAP;AACH,GAFD;AAGH","sourcesContent":["import { scan } from './scan';\nimport { takeLast } from './takeLast';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { pipe } from '../util/pipe';\nexport function reduce(accumulator, seed) {\n    if (arguments.length >= 2) {\n        return function reduceOperatorFunctionWithSeed(source) {\n            return pipe(scan(accumulator, seed), takeLast(1), defaultIfEmpty(seed))(source);\n        };\n    }\n    return function reduceOperatorFunction(source) {\n        return pipe(scan((acc, value, index) => accumulator(acc, value, index + 1)), takeLast(1))(source);\n    };\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}