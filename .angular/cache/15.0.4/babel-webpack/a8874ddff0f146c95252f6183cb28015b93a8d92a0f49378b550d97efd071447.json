{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function find(predicate, thisArg) {\n  if (typeof predicate !== 'function') {\n    throw new TypeError('predicate is not a function');\n  }\n\n  return source => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\nexport class FindValueOperator {\n  constructor(predicate, source, yieldIndex, thisArg) {\n    this.predicate = predicate;\n    this.source = source;\n    this.yieldIndex = yieldIndex;\n    this.thisArg = thisArg;\n  }\n\n  call(observer, source) {\n    return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n  }\n\n}\nexport class FindValueSubscriber extends Subscriber {\n  constructor(destination, predicate, source, yieldIndex, thisArg) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.yieldIndex = yieldIndex;\n    this.thisArg = thisArg;\n    this.index = 0;\n  }\n\n  notifyComplete(value) {\n    const destination = this.destination;\n    destination.next(value);\n    destination.complete();\n    this.unsubscribe();\n  }\n\n  _next(value) {\n    const {\n      predicate,\n      thisArg\n    } = this;\n    const index = this.index++;\n\n    try {\n      const result = predicate.call(thisArg || this, value, index, this.source);\n\n      if (result) {\n        this.notifyComplete(this.yieldIndex ? index : value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  _complete() {\n    this.notifyComplete(this.yieldIndex ? -1 : undefined);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/find.js"],"names":["Subscriber","find","predicate","thisArg","TypeError","source","lift","FindValueOperator","constructor","yieldIndex","call","observer","subscribe","FindValueSubscriber","destination","index","notifyComplete","value","next","complete","unsubscribe","_next","result","err","error","_complete","undefined"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,IAAT,CAAcC,SAAd,EAAyBC,OAAzB,EAAkC;AACrC,MAAI,OAAOD,SAAP,KAAqB,UAAzB,EAAqC;AACjC,UAAM,IAAIE,SAAJ,CAAc,6BAAd,CAAN;AACH;;AACD,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBL,SAAtB,EAAiCG,MAAjC,EAAyC,KAAzC,EAAgDF,OAAhD,CAAZ,CAAnB;AACH;AACD,OAAO,MAAMI,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACN,SAAD,EAAYG,MAAZ,EAAoBI,UAApB,EAAgCN,OAAhC,EAAyC;AAChD,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKI,UAAL,GAAkBA,UAAlB;AACA,SAAKN,OAAL,GAAeA,OAAf;AACH;;AACDO,EAAAA,IAAI,CAACC,QAAD,EAAWN,MAAX,EAAmB;AACnB,WAAOA,MAAM,CAACO,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,QAAxB,EAAkC,KAAKT,SAAvC,EAAkD,KAAKG,MAAvD,EAA+D,KAAKI,UAApE,EAAgF,KAAKN,OAArF,CAAjB,CAAP;AACH;;AAT0B;AAW/B,OAAO,MAAMU,mBAAN,SAAkCb,UAAlC,CAA6C;AAChDQ,EAAAA,WAAW,CAACM,WAAD,EAAcZ,SAAd,EAAyBG,MAAzB,EAAiCI,UAAjC,EAA6CN,OAA7C,EAAsD;AAC7D,UAAMW,WAAN;AACA,SAAKZ,SAAL,GAAiBA,SAAjB;AACA,SAAKG,MAAL,GAAcA,MAAd;AACA,SAAKI,UAAL,GAAkBA,UAAlB;AACA,SAAKN,OAAL,GAAeA,OAAf;AACA,SAAKY,KAAL,GAAa,CAAb;AACH;;AACDC,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,UAAMH,WAAW,GAAG,KAAKA,WAAzB;AACAA,IAAAA,WAAW,CAACI,IAAZ,CAAiBD,KAAjB;AACAH,IAAAA,WAAW,CAACK,QAAZ;AACA,SAAKC,WAAL;AACH;;AACDC,EAAAA,KAAK,CAACJ,KAAD,EAAQ;AACT,UAAM;AAAEf,MAAAA,SAAF;AAAaC,MAAAA;AAAb,QAAyB,IAA/B;AACA,UAAMY,KAAK,GAAG,KAAKA,KAAL,EAAd;;AACA,QAAI;AACA,YAAMO,MAAM,GAAGpB,SAAS,CAACQ,IAAV,CAAeP,OAAO,IAAI,IAA1B,EAAgCc,KAAhC,EAAuCF,KAAvC,EAA8C,KAAKV,MAAnD,CAAf;;AACA,UAAIiB,MAAJ,EAAY;AACR,aAAKN,cAAL,CAAoB,KAAKP,UAAL,GAAkBM,KAAlB,GAA0BE,KAA9C;AACH;AACJ,KALD,CAMA,OAAOM,GAAP,EAAY;AACR,WAAKT,WAAL,CAAiBU,KAAjB,CAAuBD,GAAvB;AACH;AACJ;;AACDE,EAAAA,SAAS,GAAG;AACR,SAAKT,cAAL,CAAoB,KAAKP,UAAL,GAAkB,CAAC,CAAnB,GAAuBiB,SAA3C;AACH;;AA9B+C","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function find(predicate, thisArg) {\n    if (typeof predicate !== 'function') {\n        throw new TypeError('predicate is not a function');\n    }\n    return (source) => source.lift(new FindValueOperator(predicate, source, false, thisArg));\n}\nexport class FindValueOperator {\n    constructor(predicate, source, yieldIndex, thisArg) {\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n    }\n    call(observer, source) {\n        return source.subscribe(new FindValueSubscriber(observer, this.predicate, this.source, this.yieldIndex, this.thisArg));\n    }\n}\nexport class FindValueSubscriber extends Subscriber {\n    constructor(destination, predicate, source, yieldIndex, thisArg) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.yieldIndex = yieldIndex;\n        this.thisArg = thisArg;\n        this.index = 0;\n    }\n    notifyComplete(value) {\n        const destination = this.destination;\n        destination.next(value);\n        destination.complete();\n        this.unsubscribe();\n    }\n    _next(value) {\n        const { predicate, thisArg } = this;\n        const index = this.index++;\n        try {\n            const result = predicate.call(thisArg || this, value, index, this.source);\n            if (result) {\n                this.notifyComplete(this.yieldIndex ? index : value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.notifyComplete(this.yieldIndex ? -1 : undefined);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}