{"ast":null,"code":"import { __decorate, __metadata, __param } from \"tslib\";\nimport { EzHttpClient, EzHttpClientCommonResponseOperators, EzHttpClientHeaders, EzHttpQueryParam, EzHttpPartFile, EzHttpRequestBody, EzHttpRequestDELETE, EzHttpRequestGET, EzHttpRequestParam, EzHttpRequestPOST, EzHttpRequestPUT, EzHttpResponse } from \"ez-http-client-lib\";\nimport { Observable, throwError } from \"rxjs\";\nimport { catchError } from \"rxjs/operators\";\nimport { CoreModule } from \"../core.module\";\nlet TaskService = class TaskService {\n  getTasks(sort, page, rowCount, searchText, searchState, response) {\n    return response.toPromise();\n  }\n\n  updateTask(id, partialTask, response) {\n    return response.toPromise();\n  }\n\n  updateTaskState(id, state, response) {\n    return response.toPromise();\n  }\n\n  deleteTask(id, response) {\n    return response.toPromise();\n  }\n\n  addTask(partialTask, response) {\n    return response.toPromise();\n  }\n\n  importTasks(file, response) {\n    return response.toPromise();\n  }\n\n};\n\n__decorate([EzHttpRequestGET(), __param(0, EzHttpQueryParam('sort')), __param(1, EzHttpQueryParam('page')), __param(2, EzHttpQueryParam('size')), __param(3, EzHttpQueryParam('text')), __param(4, EzHttpQueryParam('state')), __param(5, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Array, Number, Number, String, String, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"getTasks\", null);\n\n__decorate([EzHttpRequestPUT({\n  path: '/{taskId}'\n}), __param(0, EzHttpRequestParam('taskId')), __param(1, EzHttpRequestBody), __param(2, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"updateTask\", null);\n\n__decorate([EzHttpRequestPUT({\n  path: '/{taskId}/state'\n}), __param(0, EzHttpRequestParam('taskId')), __param(1, EzHttpRequestBody), __param(2, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Object, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"updateTaskState\", null);\n\n__decorate([EzHttpRequestDELETE({\n  path: '/{taskId}'\n}), __param(0, EzHttpRequestParam('taskId')), __param(1, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Number, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"deleteTask\", null);\n\n__decorate([EzHttpRequestPOST(), __param(0, EzHttpRequestBody), __param(1, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [Object, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"addTask\", null);\n\n__decorate([EzHttpRequestPOST({\n  path: '/import'\n}), __param(0, EzHttpPartFile('file')), __param(1, EzHttpResponse), __metadata(\"design:type\", Function), __metadata(\"design:paramtypes\", [File, Observable]), __metadata(\"design:returntype\", Promise)], TaskService.prototype, \"importTasks\", null);\n\nTaskService = __decorate([EzHttpClientHeaders({\n  'Content-Type': 'application/json'\n}), EzHttpClientCommonResponseOperators({\n  operators: [catchError(error => {\n    return throwError(error.error.errorCode);\n  })],\n  before: true\n}), EzHttpClient('/api/tasks', CoreModule)], TaskService);\nexport { TaskService };","map":{"version":3,"sources":["C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\core\\services\\task.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { EzHttpClient, EzHttpClientCommonResponseOperators, EzHttpClientHeaders, EzHttpQueryParam, EzHttpPartFile, EzHttpRequestBody, EzHttpRequestDELETE, EzHttpRequestGET, EzHttpRequestParam, EzHttpRequestPOST, EzHttpRequestPUT, EzHttpResponse } from \"ez-http-client-lib\";\r\nimport { Observable, throwError } from \"rxjs\";\r\nimport { catchError } from \"rxjs/operators\";\r\nimport { CoreModule } from \"../core.module\";\r\nimport { Page } from \"../models/page.model\";\r\nimport { PartialTask } from \"../models/tasks/partial-task.model\";\r\nimport { Task } from \"../models/tasks/task.model\";\r\n\r\n@EzHttpClientHeaders({\r\n    'Content-Type': 'application/json'\r\n})\r\n@EzHttpClientCommonResponseOperators({\r\n    operators: [\r\n        catchError((error) => {\r\n            return throwError(error.error.errorCode);\r\n        })\r\n    ],\r\n    before: true\r\n})\r\n@EzHttpClient('/api/tasks', CoreModule)\r\nexport class TaskService {\r\n    @EzHttpRequestGET()\r\n    public getTasks(\r\n        @EzHttpQueryParam('sort') sort: Array<string>,\r\n        @EzHttpQueryParam('page') page: number,\r\n        @EzHttpQueryParam('size') rowCount: number,\r\n        @EzHttpQueryParam('text') searchText?: string,\r\n        @EzHttpQueryParam('state') searchState?: string,\r\n        @EzHttpResponse response?: Observable<Page<Task>>\r\n    ): Promise<Page<Task>> {\r\n        return response!.toPromise();\r\n    }\r\n\r\n    @EzHttpRequestPUT({\r\n        path: '/{taskId}'\r\n    })\r\n    public updateTask(@EzHttpRequestParam('taskId') id: number, @EzHttpRequestBody partialTask: PartialTask, @EzHttpResponse response?: Observable<Task>): Promise<Task> {\r\n        return response!.toPromise();\r\n    }\r\n\r\n    @EzHttpRequestPUT({\r\n        path: '/{taskId}/state'\r\n    })\r\n    public updateTaskState(@EzHttpRequestParam('taskId') id: number, @EzHttpRequestBody state: {done: boolean}, @EzHttpResponse response?: Observable<Task>): Promise<Task> {\r\n        return response!.toPromise();\r\n    }\r\n\r\n    @EzHttpRequestDELETE({\r\n        path: '/{taskId}'\r\n    })\r\n    public deleteTask(@EzHttpRequestParam('taskId') id: number, @EzHttpResponse response?: Observable<Task>): Promise<Task> {\r\n        return response!.toPromise();\r\n    }\r\n\r\n    @EzHttpRequestPOST()\r\n    public addTask(@EzHttpRequestBody partialTask: PartialTask, @EzHttpResponse response?: Observable<Task>): Promise<Task> {\r\n        return response!.toPromise();\r\n    }\r\n\r\n    @EzHttpRequestPOST({\r\n        path: '/import'\r\n    })\r\n    public importTasks(@EzHttpPartFile('file') file: File, @EzHttpResponse response?: Observable<Array<Task>>): Promise<Array<Task>> {\r\n        return response!.toPromise();\r\n    }\r\n}\r\n"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}