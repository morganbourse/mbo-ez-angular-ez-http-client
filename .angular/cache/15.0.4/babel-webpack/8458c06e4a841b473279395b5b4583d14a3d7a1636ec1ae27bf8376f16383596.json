{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Directive, NgModule, InjectionToken, Injectable, Inject, SecurityContext, Injector, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/platform-browser';\nconst _c0 = [\"toast-component\", \"\"];\n\nfunction Toast_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function Toast_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction Toast_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction Toast_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, Toast_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction Toast_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction Toast_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction Toast_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nfunction ToastNoAnimation_button_0_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r6 = i0.ɵɵgetCurrentView();\n\n    i0.ɵɵelementStart(0, \"button\", 5);\n    i0.ɵɵlistener(\"click\", function ToastNoAnimation_button_0_Template_button_click_0_listener() {\n      i0.ɵɵrestoreView(_r6);\n      const ctx_r5 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r5.remove());\n    });\n    i0.ɵɵelementStart(1, \"span\", 6);\n    i0.ɵɵtext(2, \"\\xD7\");\n    i0.ɵɵelementEnd()();\n  }\n}\n\nfunction ToastNoAnimation_div_1_ng_container_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementContainerEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r7 = i0.ɵɵnextContext(2);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\"[\", ctx_r7.duplicatesCount + 1, \"]\");\n  }\n}\n\nfunction ToastNoAnimation_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵtemplate(2, ToastNoAnimation_div_1_ng_container_2_Template, 2, 1, \"ng-container\", 4);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r1.options.titleClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r1.title);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r1.title, \" \");\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", ctx_r1.duplicatesCount);\n  }\n}\n\nfunction ToastNoAnimation_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"div\", 7);\n  }\n\n  if (rf & 2) {\n    const ctx_r2 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r2.options.messageClass);\n    i0.ɵɵproperty(\"innerHTML\", ctx_r2.message, i0.ɵɵsanitizeHtml);\n  }\n}\n\nfunction ToastNoAnimation_div_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 8);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r3 = i0.ɵɵnextContext();\n    i0.ɵɵclassMap(ctx_r3.options.messageClass);\n    i0.ɵɵattribute(\"aria-label\", ctx_r3.message);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", ctx_r3.message, \" \");\n  }\n}\n\nfunction ToastNoAnimation_div_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵelement(1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r4 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵstyleProp(\"width\", ctx_r4.width + \"%\");\n  }\n}\n\nclass ToastContainerDirective {\n  constructor(el) {\n    this.el = el;\n  }\n\n  getContainerElement() {\n    return this.el.nativeElement;\n  }\n\n}\n\nToastContainerDirective.ɵfac = function ToastContainerDirective_Factory(t) {\n  return new (t || ToastContainerDirective)(i0.ɵɵdirectiveInject(i0.ElementRef));\n};\n\nToastContainerDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: ToastContainerDirective,\n  selectors: [[\"\", \"toastContainer\", \"\"]],\n  exportAs: [\"toastContainer\"]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastContainerDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[toastContainer]',\n      exportAs: 'toastContainer'\n    }]\n  }], function () {\n    return [{\n      type: i0.ElementRef\n    }];\n  }, null);\n})();\n\nclass ToastContainerModule {}\n\nToastContainerModule.ɵfac = function ToastContainerModule_Factory(t) {\n  return new (t || ToastContainerModule)();\n};\n\nToastContainerModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastContainerModule\n});\nToastContainerModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastContainerModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [ToastContainerDirective],\n      exports: [ToastContainerDirective]\n    }]\n  }], null, null);\n})();\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\n\n\nclass ComponentPortal {\n  constructor(component, injector) {\n    this.component = component;\n    this.injector = injector;\n  }\n  /** Attach this portal to a host. */\n\n\n  attach(host, newestOnTop) {\n    this._attachedHost = host;\n    return host.attach(this, newestOnTop);\n  }\n  /** Detach this portal from its host */\n\n\n  detach() {\n    const host = this._attachedHost;\n\n    if (host) {\n      this._attachedHost = undefined;\n      return host.detach();\n    }\n  }\n  /** Whether this portal is attached to a host. */\n\n\n  get isAttached() {\n    return this._attachedHost != null;\n  }\n  /**\n   * Sets the PortalHost reference without performing `attach()`. This is used directly by\n   * the PortalHost when it is performing an `attach()` or `detach()`.\n   */\n\n\n  setAttachedHost(host) {\n    this._attachedHost = host;\n  }\n\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\n\n\nclass BasePortalHost {\n  attach(portal, newestOnTop) {\n    this._attachedPortal = portal;\n    return this.attachComponentPortal(portal, newestOnTop);\n  }\n\n  detach() {\n    if (this._attachedPortal) {\n      this._attachedPortal.setAttachedHost();\n    }\n\n    this._attachedPortal = undefined;\n\n    if (this._disposeFn) {\n      this._disposeFn();\n\n      this._disposeFn = undefined;\n    }\n  }\n\n  setDisposeFn(fn) {\n    this._disposeFn = fn;\n  }\n\n}\n/**\n * Reference to a toast opened via the Toastr service.\n */\n\n\nclass ToastRef {\n  constructor(_overlayRef) {\n    this._overlayRef = _overlayRef;\n    /** Count of duplicates of this toast */\n\n    this.duplicatesCount = 0;\n    /** Subject for notifying the user that the toast has finished closing. */\n\n    this._afterClosed = new Subject();\n    /** triggered when toast is activated */\n\n    this._activate = new Subject();\n    /** notifies the toast that it should close before the timeout */\n\n    this._manualClose = new Subject();\n    /** notifies the toast that it should reset the timeouts */\n\n    this._resetTimeout = new Subject();\n    /** notifies the toast that it should count a duplicate toast */\n\n    this._countDuplicate = new Subject();\n  }\n\n  manualClose() {\n    this._manualClose.next();\n\n    this._manualClose.complete();\n  }\n\n  manualClosed() {\n    return this._manualClose.asObservable();\n  }\n\n  timeoutReset() {\n    return this._resetTimeout.asObservable();\n  }\n\n  countDuplicate() {\n    return this._countDuplicate.asObservable();\n  }\n  /**\n   * Close the toast.\n   */\n\n\n  close() {\n    this._overlayRef.detach();\n\n    this._afterClosed.next();\n\n    this._manualClose.next();\n\n    this._afterClosed.complete();\n\n    this._manualClose.complete();\n\n    this._activate.complete();\n\n    this._resetTimeout.complete();\n\n    this._countDuplicate.complete();\n  }\n  /** Gets an observable that is notified when the toast is finished closing. */\n\n\n  afterClosed() {\n    return this._afterClosed.asObservable();\n  }\n\n  isInactive() {\n    return this._activate.isStopped;\n  }\n\n  activate() {\n    this._activate.next();\n\n    this._activate.complete();\n  }\n  /** Gets an observable that is notified when the toast has started opening. */\n\n\n  afterActivate() {\n    return this._activate.asObservable();\n  }\n  /** Reset the toast timouts and count duplicates */\n\n\n  onDuplicate(resetTimeout, countDuplicate) {\n    if (resetTimeout) {\n      this._resetTimeout.next();\n    }\n\n    if (countDuplicate) {\n      this._countDuplicate.next(++this.duplicatesCount);\n    }\n  }\n\n}\n/**\n * Everything a toast needs to launch\n */\n\n\nclass ToastPackage {\n  constructor(toastId, config, message, title, toastType, toastRef) {\n    this.toastId = toastId;\n    this.config = config;\n    this.message = message;\n    this.title = title;\n    this.toastType = toastType;\n    this.toastRef = toastRef;\n    this._onTap = new Subject();\n    this._onAction = new Subject();\n    this.toastRef.afterClosed().subscribe(() => {\n      this._onAction.complete();\n\n      this._onTap.complete();\n    });\n  }\n  /** Fired on click */\n\n\n  triggerTap() {\n    this._onTap.next();\n\n    if (this.config.tapToDismiss) {\n      this._onTap.complete();\n    }\n  }\n\n  onTap() {\n    return this._onTap.asObservable();\n  }\n  /** available for use in custom toast */\n\n\n  triggerAction(action) {\n    this._onAction.next(action);\n  }\n\n  onAction() {\n    return this._onAction.asObservable();\n  }\n\n}\n\nconst DefaultNoComponentGlobalConfig = {\n  maxOpened: 0,\n  autoDismiss: false,\n  newestOnTop: true,\n  preventDuplicates: false,\n  countDuplicates: false,\n  resetTimeoutOnDuplicate: false,\n  includeTitleDuplicates: false,\n  iconClasses: {\n    error: 'toast-error',\n    info: 'toast-info',\n    success: 'toast-success',\n    warning: 'toast-warning'\n  },\n  // Individual\n  closeButton: false,\n  disableTimeOut: false,\n  timeOut: 5000,\n  extendedTimeOut: 1000,\n  enableHtml: false,\n  progressBar: false,\n  toastClass: 'ngx-toastr',\n  positionClass: 'toast-top-right',\n  titleClass: 'toast-title',\n  messageClass: 'toast-message',\n  easing: 'ease-in',\n  easeTime: 300,\n  tapToDismiss: true,\n  onActivateTick: false,\n  progressAnimation: 'decreasing',\n  payload: null\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\n\nclass DomPortalHost extends BasePortalHost {\n  constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n    super();\n    this._hostDomElement = _hostDomElement;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n  }\n  /**\n   * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n   * @param portal Portal to be attached\n   */\n\n\n  attachComponentPortal(portal, newestOnTop) {\n    const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n\n    let componentRef; // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n    // for the component (in terms of Angular's component tree, not rendering).\n    // When the ViewContainerRef is missing, we use the factory to create the component directly\n    // and then manually attach the ChangeDetector for that component to the application (which\n    // happens automatically when using a ViewContainer).\n\n    componentRef = componentFactory.create(portal.injector); // When creating a component outside of a ViewContainer, we need to manually register\n    // its ChangeDetector with the application. This API is unfortunately not yet published\n    // in Angular core. The change detector must also be deregistered when the component\n    // is destroyed to prevent memory leaks.\n\n    this._appRef.attachView(componentRef.hostView);\n\n    this.setDisposeFn(() => {\n      this._appRef.detachView(componentRef.hostView);\n\n      componentRef.destroy();\n    }); // At this point the component has been instantiated, so we move it to the location in the DOM\n    // where we want it to be rendered.\n\n    if (newestOnTop) {\n      this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n    } else {\n      this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n    }\n\n    return componentRef;\n  }\n  /** Gets the root HTMLElement for an instantiated component. */\n\n\n  _getComponentRootNode(componentRef) {\n    return componentRef.hostView.rootNodes[0];\n  }\n\n}\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\n\n\nclass OverlayRef {\n  constructor(_portalHost) {\n    this._portalHost = _portalHost;\n  }\n\n  attach(portal, newestOnTop = true) {\n    return this._portalHost.attach(portal, newestOnTop);\n  }\n  /**\n   * Detaches an overlay from a portal.\n   * @returns Resolves when the overlay has been detached.\n   */\n\n\n  detach() {\n    return this._portalHost.detach();\n  }\n\n}\n/** Container inside which all toasts will render. */\n\n\nclass OverlayContainer {\n  constructor(_document) {\n    this._document = _document;\n  }\n\n  ngOnDestroy() {\n    if (this._containerElement && this._containerElement.parentNode) {\n      this._containerElement.parentNode.removeChild(this._containerElement);\n    }\n  }\n  /**\n   * This method returns the overlay container element. It will lazily\n   * create the element the first time  it is called to facilitate using\n   * the container in non-browser environments.\n   * @returns the container element\n   */\n\n\n  getContainerElement() {\n    if (!this._containerElement) {\n      this._createContainer();\n    }\n\n    return this._containerElement;\n  }\n  /**\n   * Create the overlay container element, which is simply a div\n   * with the 'cdk-overlay-container' class on the document body\n   * and 'aria-live=\"polite\"'\n   */\n\n\n  _createContainer() {\n    const container = this._document.createElement('div');\n\n    container.classList.add('overlay-container');\n    container.setAttribute('aria-live', 'polite');\n\n    this._document.body.appendChild(container);\n\n    this._containerElement = container;\n  }\n\n}\n\nOverlayContainer.ɵfac = function OverlayContainer_Factory(t) {\n  return new (t || OverlayContainer)(i0.ɵɵinject(DOCUMENT));\n};\n\nOverlayContainer.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: OverlayContainer,\n  factory: OverlayContainer.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(OverlayContainer, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\n\n\nclass Overlay {\n  constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n    this._overlayContainer = _overlayContainer;\n    this._componentFactoryResolver = _componentFactoryResolver;\n    this._appRef = _appRef;\n    this._document = _document; // Namespace panes by overlay container\n\n    this._paneElements = new Map();\n  }\n  /**\n   * Creates an overlay.\n   * @returns A reference to the created overlay.\n   */\n\n\n  create(positionClass, overlayContainer) {\n    // get existing pane if possible\n    return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n  }\n\n  getPaneElement(positionClass = '', overlayContainer) {\n    if (!this._paneElements.get(overlayContainer)) {\n      this._paneElements.set(overlayContainer, {});\n    }\n\n    if (!this._paneElements.get(overlayContainer)[positionClass]) {\n      this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n    }\n\n    return this._paneElements.get(overlayContainer)[positionClass];\n  }\n  /**\n   * Creates the DOM element for an overlay and appends it to the overlay container.\n   * @returns Newly-created pane element\n   */\n\n\n  _createPaneElement(positionClass, overlayContainer) {\n    const pane = this._document.createElement('div');\n\n    pane.id = 'toast-container';\n    pane.classList.add(positionClass);\n    pane.classList.add('toast-container');\n\n    if (!overlayContainer) {\n      this._overlayContainer.getContainerElement().appendChild(pane);\n    } else {\n      overlayContainer.getContainerElement().appendChild(pane);\n    }\n\n    return pane;\n  }\n  /**\n   * Create a DomPortalHost into which the overlay content can be loaded.\n   * @param pane The DOM element to turn into a portal host.\n   * @returns A portal host for the given DOM element.\n   */\n\n\n  _createPortalHost(pane) {\n    return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n  }\n  /**\n   * Creates an OverlayRef for an overlay in the given DOM element.\n   * @param pane DOM element for the overlay\n   */\n\n\n  _createOverlayRef(pane) {\n    return new OverlayRef(this._createPortalHost(pane));\n  }\n\n}\n\nOverlay.ɵfac = function Overlay_Factory(t) {\n  return new (t || Overlay)(i0.ɵɵinject(OverlayContainer), i0.ɵɵinject(i0.ComponentFactoryResolver), i0.ɵɵinject(i0.ApplicationRef), i0.ɵɵinject(DOCUMENT));\n};\n\nOverlay.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: Overlay,\n  factory: Overlay.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Overlay, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: OverlayContainer\n    }, {\n      type: i0.ComponentFactoryResolver\n    }, {\n      type: i0.ApplicationRef\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DOCUMENT]\n      }]\n    }];\n  }, null);\n})();\n\nclass ToastrService {\n  constructor(token, overlay, _injector, sanitizer, ngZone) {\n    this.overlay = overlay;\n    this._injector = _injector;\n    this.sanitizer = sanitizer;\n    this.ngZone = ngZone;\n    this.currentlyActive = 0;\n    this.toasts = [];\n    this.index = 0;\n    this.toastrConfig = { ...token.default,\n      ...token.config\n    };\n\n    if (token.config.iconClasses) {\n      this.toastrConfig.iconClasses = { ...token.default.iconClasses,\n        ...token.config.iconClasses\n      };\n    }\n  }\n  /** show toast */\n\n\n  show(message, title, override = {}, type = '') {\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show successful toast */\n\n\n  success(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.success || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show error toast */\n\n\n  error(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.error || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show info toast */\n\n\n  info(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.info || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /** show warning toast */\n\n\n  warning(message, title, override = {}) {\n    const type = this.toastrConfig.iconClasses.warning || '';\n    return this._preBuildNotification(type, message, title, this.applyConfig(override));\n  }\n  /**\n   * Remove all or a single toast by id\n   */\n\n\n  clear(toastId) {\n    // Call every toastRef manualClose function\n    for (const toast of this.toasts) {\n      if (toastId !== undefined) {\n        if (toast.toastId === toastId) {\n          toast.toastRef.manualClose();\n          return;\n        }\n      } else {\n        toast.toastRef.manualClose();\n      }\n    }\n  }\n  /**\n   * Remove and destroy a single toast by id\n   */\n\n\n  remove(toastId) {\n    const found = this._findToast(toastId);\n\n    if (!found) {\n      return false;\n    }\n\n    found.activeToast.toastRef.close();\n    this.toasts.splice(found.index, 1);\n    this.currentlyActive = this.currentlyActive - 1;\n\n    if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n      return false;\n    }\n\n    if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n      const p = this.toasts[this.currentlyActive].toastRef;\n\n      if (!p.isInactive()) {\n        this.currentlyActive = this.currentlyActive + 1;\n        p.activate();\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Determines if toast message is already shown\n   */\n\n\n  findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n    const {\n      includeTitleDuplicates\n    } = this.toastrConfig;\n\n    for (const toast of this.toasts) {\n      const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n\n      if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n        toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n        return toast;\n      }\n    }\n\n    return null;\n  }\n  /** create a clone of global config and apply individual settings */\n\n\n  applyConfig(override = {}) {\n    return { ...this.toastrConfig,\n      ...override\n    };\n  }\n  /**\n   * Find toast object by id\n   */\n\n\n  _findToast(toastId) {\n    for (let i = 0; i < this.toasts.length; i++) {\n      if (this.toasts[i].toastId === toastId) {\n        return {\n          index: i,\n          activeToast: this.toasts[i]\n        };\n      }\n    }\n\n    return null;\n  }\n  /**\n   * Determines the need to run inside angular's zone then builds the toast\n   */\n\n\n  _preBuildNotification(toastType, message, title, config) {\n    if (config.onActivateTick) {\n      return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n    }\n\n    return this._buildNotification(toastType, message, title, config);\n  }\n  /**\n   * Creates and attaches toast data to component\n   * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n   */\n\n\n  _buildNotification(toastType, message, title, config) {\n    if (!config.toastComponent) {\n      throw new Error('toastComponent required');\n    } // max opened and auto dismiss = true\n    // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n    // a timeout at all\n\n\n    const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n\n    if ((this.toastrConfig.includeTitleDuplicates && title || message) && this.toastrConfig.preventDuplicates && duplicate !== null) {\n      return duplicate;\n    }\n\n    this.previousToastMessage = message;\n    let keepInactive = false;\n\n    if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n      keepInactive = true;\n\n      if (this.toastrConfig.autoDismiss) {\n        this.clear(this.toasts[0].toastId);\n      }\n    }\n\n    const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n    this.index = this.index + 1;\n    let sanitizedMessage = message;\n\n    if (message && config.enableHtml) {\n      sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n    }\n\n    const toastRef = new ToastRef(overlayRef);\n    const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n    /** New injector that contains an instance of `ToastPackage`. */\n\n    const providers = [{\n      provide: ToastPackage,\n      useValue: toastPackage\n    }];\n    const toastInjector = Injector.create({\n      providers,\n      parent: this._injector\n    });\n    const component = new ComponentPortal(config.toastComponent, toastInjector);\n    const portal = overlayRef.attach(component, config.newestOnTop);\n    toastRef.componentInstance = portal.instance;\n    const ins = {\n      toastId: this.index,\n      title: title || '',\n      message: message || '',\n      toastRef,\n      onShown: toastRef.afterActivate(),\n      onHidden: toastRef.afterClosed(),\n      onTap: toastPackage.onTap(),\n      onAction: toastPackage.onAction(),\n      portal\n    };\n\n    if (!keepInactive) {\n      this.currentlyActive = this.currentlyActive + 1;\n      setTimeout(() => {\n        ins.toastRef.activate();\n      });\n    }\n\n    this.toasts.push(ins);\n    return ins;\n  }\n\n}\n\nToastrService.ɵfac = function ToastrService_Factory(t) {\n  return new (t || ToastrService)(i0.ɵɵinject(TOAST_CONFIG), i0.ɵɵinject(Overlay), i0.ɵɵinject(i0.Injector), i0.ɵɵinject(i2.DomSanitizer), i0.ɵɵinject(i0.NgZone));\n};\n\nToastrService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: ToastrService,\n  factory: ToastrService.ɵfac,\n  providedIn: 'root'\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrService, [{\n    type: Injectable,\n    args: [{\n      providedIn: 'root'\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [TOAST_CONFIG]\n      }]\n    }, {\n      type: Overlay\n    }, {\n      type: i0.Injector\n    }, {\n      type: i2.DomSanitizer\n    }, {\n      type: i0.NgZone\n    }];\n  }, null);\n})();\n\nclass Toast {\n  constructor(toastrService, toastPackage, ngZone) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.ngZone = ngZone;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = {\n      value: 'inactive',\n      params: {\n        easeTime: this.toastPackage.config.easeTime,\n        easing: 'ease-in'\n      }\n    };\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state.value === 'inactive') {\n      return 'none';\n    }\n\n    return;\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = { ...this.state,\n      value: 'active'\n    };\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.outsideTimeout(() => this.remove(), this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.outsideInterval(() => this.updateProgress(), 10);\n      }\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = { ...this.state,\n      value: 'active'\n    };\n    this.outsideTimeout(() => this.remove(), this.originalTimeout);\n    this.options.timeOut = this.originalTimeout;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = { ...this.state,\n      value: 'removed'\n    };\n    this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n  }\n\n  tapToast() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state.value === 'removed') {\n      return;\n    }\n\n    if (this.options.disableTimeOut !== 'extendedTimeOut') {\n      clearTimeout(this.timeout);\n      this.options.timeOut = 0;\n      this.hideTime = 0; // disable progressBar\n\n      clearInterval(this.intervalId);\n      this.width = 0;\n    }\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state.value === 'removed') {\n      return;\n    }\n\n    this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.outsideInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n  outsideTimeout(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.timeout = setTimeout(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.timeout = setTimeout(() => func(), timeout);\n    }\n  }\n\n  outsideInterval(func, timeout) {\n    if (this.ngZone) {\n      this.ngZone.runOutsideAngular(() => this.intervalId = setInterval(() => this.runInsideAngular(func), timeout));\n    } else {\n      this.intervalId = setInterval(() => func(), timeout);\n    }\n  }\n\n  runInsideAngular(func) {\n    if (this.ngZone) {\n      this.ngZone.run(() => func());\n    } else {\n      func();\n    }\n  }\n\n}\n\nToast.ɵfac = function Toast_Factory(t) {\n  return new (t || Toast)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.NgZone));\n};\n\nToast.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: Toast,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 5,\n  hostBindings: function Toast_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function Toast_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function Toast_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function Toast_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵsyntheticHostProperty(\"@flyInOut\", ctx.state);\n      i0.ɵɵclassMap(ctx.toastClasses);\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n  template: function Toast_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, Toast_button_0_Template, 3, 0, \"button\", 0);\n      i0.ɵɵtemplate(1, Toast_div_1_Template, 3, 5, \"div\", 1);\n      i0.ɵɵtemplate(2, Toast_div_2_Template, 1, 3, \"div\", 2);\n      i0.ɵɵtemplate(3, Toast_div_3_Template, 2, 4, \"div\", 3);\n      i0.ɵɵtemplate(4, Toast_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  dependencies: [i3.NgIf],\n  encapsulation: 2,\n  data: {\n    animation: [trigger('flyInOut', [state('inactive', style({\n      opacity: 0\n    })), state('active', style({\n      opacity: 1\n    })), state('removed', style({\n      opacity: 0\n    })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])]\n  }\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(Toast, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n      animations: [trigger('flyInOut', [state('inactive', style({\n        opacity: 0\n      })), state('active', style({\n        opacity: 1\n      })), state('removed', style({\n        opacity: 0\n      })), transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')), transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))])],\n      preserveWhitespaces: false\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: i0.NgZone\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    state: [{\n      type: HostBinding,\n      args: ['@flyInOut']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: Toast\n};\n\nclass ToastrModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrModule.ɵfac = function ToastrModule_Factory(t) {\n  return new (t || ToastrModule)();\n};\n\nToastrModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastrModule\n});\nToastrModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [Toast],\n      exports: [Toast]\n    }]\n  }], null, null);\n})();\n\nclass ToastrComponentlessModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastrModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoComponentGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastrComponentlessModule.ɵfac = function ToastrComponentlessModule_Factory(t) {\n  return new (t || ToastrComponentlessModule)();\n};\n\nToastrComponentlessModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastrComponentlessModule\n});\nToastrComponentlessModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastrComponentlessModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule]\n    }]\n  }], null, null);\n})();\n\nclass ToastNoAnimation {\n  constructor(toastrService, toastPackage, appRef) {\n    this.toastrService = toastrService;\n    this.toastPackage = toastPackage;\n    this.appRef = appRef;\n    /** width of progress bar */\n\n    this.width = -1;\n    /** a combination of toast type and options.toastClass */\n\n    this.toastClasses = '';\n    /** controls animation */\n\n    this.state = 'inactive';\n    this.message = toastPackage.message;\n    this.title = toastPackage.title;\n    this.options = toastPackage.config;\n    this.originalTimeout = toastPackage.config.timeOut;\n    this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n    this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n      this.activateToast();\n    });\n    this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n      this.remove();\n    });\n    this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n      this.resetTimeout();\n    });\n    this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n      this.duplicatesCount = count;\n    });\n  }\n  /** hides component when waiting to be displayed */\n\n\n  get displayStyle() {\n    if (this.state === 'inactive') {\n      return 'none';\n    }\n  }\n\n  ngOnDestroy() {\n    this.sub.unsubscribe();\n    this.sub1.unsubscribe();\n    this.sub2.unsubscribe();\n    this.sub3.unsubscribe();\n    clearInterval(this.intervalId);\n    clearTimeout(this.timeout);\n  }\n  /**\n   * activates toast and sets timeout\n   */\n\n\n  activateToast() {\n    this.state = 'active';\n\n    if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n      this.timeout = setTimeout(() => {\n        this.remove();\n      }, this.options.timeOut);\n      this.hideTime = new Date().getTime() + this.options.timeOut;\n\n      if (this.options.progressBar) {\n        this.intervalId = setInterval(() => this.updateProgress(), 10);\n      }\n    }\n\n    if (this.options.onActivateTick) {\n      this.appRef.tick();\n    }\n  }\n  /**\n   * updates progress bar width\n   */\n\n\n  updateProgress() {\n    if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n      return;\n    }\n\n    const now = new Date().getTime();\n    const remaining = this.hideTime - now;\n    this.width = remaining / this.options.timeOut * 100;\n\n    if (this.options.progressAnimation === 'increasing') {\n      this.width = 100 - this.width;\n    }\n\n    if (this.width <= 0) {\n      this.width = 0;\n    }\n\n    if (this.width >= 100) {\n      this.width = 100;\n    }\n  }\n\n  resetTimeout() {\n    clearTimeout(this.timeout);\n    clearInterval(this.intervalId);\n    this.state = 'active';\n    this.options.timeOut = this.originalTimeout;\n    this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n    this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n  /**\n   * tells toastrService to remove this toast after animation time\n   */\n\n\n  remove() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.state = 'removed';\n    this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n  }\n\n  tapToast() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    this.toastPackage.triggerTap();\n\n    if (this.options.tapToDismiss) {\n      this.remove();\n    }\n  }\n\n  stickAround() {\n    if (this.state === 'removed') {\n      return;\n    }\n\n    clearTimeout(this.timeout);\n    this.options.timeOut = 0;\n    this.hideTime = 0; // disable progressBar\n\n    clearInterval(this.intervalId);\n    this.width = 0;\n  }\n\n  delayedHideToast() {\n    if (this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut' || this.options.extendedTimeOut === 0 || this.state === 'removed') {\n      return;\n    }\n\n    this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n    this.options.timeOut = this.options.extendedTimeOut;\n    this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n    this.width = -1;\n\n    if (this.options.progressBar) {\n      this.intervalId = setInterval(() => this.updateProgress(), 10);\n    }\n  }\n\n}\n\nToastNoAnimation.ɵfac = function ToastNoAnimation_Factory(t) {\n  return new (t || ToastNoAnimation)(i0.ɵɵdirectiveInject(ToastrService), i0.ɵɵdirectiveInject(ToastPackage), i0.ɵɵdirectiveInject(i0.ApplicationRef));\n};\n\nToastNoAnimation.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n  type: ToastNoAnimation,\n  selectors: [[\"\", \"toast-component\", \"\"]],\n  hostVars: 4,\n  hostBindings: function ToastNoAnimation_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"click\", function ToastNoAnimation_click_HostBindingHandler() {\n        return ctx.tapToast();\n      })(\"mouseenter\", function ToastNoAnimation_mouseenter_HostBindingHandler() {\n        return ctx.stickAround();\n      })(\"mouseleave\", function ToastNoAnimation_mouseleave_HostBindingHandler() {\n        return ctx.delayedHideToast();\n      });\n    }\n\n    if (rf & 2) {\n      i0.ɵɵclassMap(ctx.toastClasses);\n      i0.ɵɵstyleProp(\"display\", ctx.displayStyle);\n    }\n  },\n  attrs: _c0,\n  decls: 5,\n  vars: 5,\n  consts: [[\"type\", \"button\", \"class\", \"toast-close-button\", \"aria-label\", \"Close\", 3, \"click\", 4, \"ngIf\"], [3, \"class\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", \"innerHTML\", 4, \"ngIf\"], [\"role\", \"alert\", 3, \"class\", 4, \"ngIf\"], [4, \"ngIf\"], [\"type\", \"button\", \"aria-label\", \"Close\", 1, \"toast-close-button\", 3, \"click\"], [\"aria-hidden\", \"true\"], [\"role\", \"alert\", 3, \"innerHTML\"], [\"role\", \"alert\"], [1, \"toast-progress\"]],\n  template: function ToastNoAnimation_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtemplate(0, ToastNoAnimation_button_0_Template, 3, 0, \"button\", 0);\n      i0.ɵɵtemplate(1, ToastNoAnimation_div_1_Template, 3, 5, \"div\", 1);\n      i0.ɵɵtemplate(2, ToastNoAnimation_div_2_Template, 1, 3, \"div\", 2);\n      i0.ɵɵtemplate(3, ToastNoAnimation_div_3_Template, 2, 4, \"div\", 3);\n      i0.ɵɵtemplate(4, ToastNoAnimation_div_4_Template, 2, 2, \"div\", 4);\n    }\n\n    if (rf & 2) {\n      i0.ɵɵproperty(\"ngIf\", ctx.options.closeButton);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.title);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.message && !ctx.options.enableHtml);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", ctx.options.progressBar);\n    }\n  },\n  dependencies: [i3.NgIf],\n  encapsulation: 2\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimation, [{\n    type: Component,\n    args: [{\n      selector: '[toast-component]',\n      template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `\n    }]\n  }], function () {\n    return [{\n      type: ToastrService\n    }, {\n      type: ToastPackage\n    }, {\n      type: i0.ApplicationRef\n    }];\n  }, {\n    toastClasses: [{\n      type: HostBinding,\n      args: ['class']\n    }],\n    displayStyle: [{\n      type: HostBinding,\n      args: ['style.display']\n    }],\n    tapToast: [{\n      type: HostListener,\n      args: ['click']\n    }],\n    stickAround: [{\n      type: HostListener,\n      args: ['mouseenter']\n    }],\n    delayedHideToast: [{\n      type: HostListener,\n      args: ['mouseleave']\n    }]\n  });\n})();\n\nconst DefaultNoAnimationsGlobalConfig = { ...DefaultNoComponentGlobalConfig,\n  toastComponent: ToastNoAnimation\n};\n\nclass ToastNoAnimationModule {\n  static forRoot(config = {}) {\n    return {\n      ngModule: ToastNoAnimationModule,\n      providers: [{\n        provide: TOAST_CONFIG,\n        useValue: {\n          default: DefaultNoAnimationsGlobalConfig,\n          config\n        }\n      }]\n    };\n  }\n\n}\n\nToastNoAnimationModule.ɵfac = function ToastNoAnimationModule_Factory(t) {\n  return new (t || ToastNoAnimationModule)();\n};\n\nToastNoAnimationModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: ToastNoAnimationModule\n});\nToastNoAnimationModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [CommonModule]\n});\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(ToastNoAnimationModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule],\n      declarations: [ToastNoAnimation],\n      exports: [ToastNoAnimation]\n    }]\n  }], null, null);\n})();\n/**\n * Generated bundle index. Do not edit.\n */\n\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/ngx-toastr/fesm2020/ngx-toastr.mjs"],"names":["i0","Directive","NgModule","InjectionToken","Injectable","Inject","SecurityContext","Injector","Component","HostBinding","HostListener","trigger","state","style","transition","animate","Subject","i3","DOCUMENT","CommonModule","i2","ToastContainerDirective","constructor","el","getContainerElement","nativeElement","ɵfac","ElementRef","ɵdir","type","args","selector","exportAs","ToastContainerModule","ɵmod","ɵinj","declarations","exports","ComponentPortal","component","injector","attach","host","newestOnTop","_attachedHost","detach","undefined","isAttached","setAttachedHost","BasePortalHost","portal","_attachedPortal","attachComponentPortal","_disposeFn","setDisposeFn","fn","ToastRef","_overlayRef","duplicatesCount","_afterClosed","_activate","_manualClose","_resetTimeout","_countDuplicate","manualClose","next","complete","manualClosed","asObservable","timeoutReset","countDuplicate","close","afterClosed","isInactive","isStopped","activate","afterActivate","onDuplicate","resetTimeout","ToastPackage","toastId","config","message","title","toastType","toastRef","_onTap","_onAction","subscribe","triggerTap","tapToDismiss","onTap","triggerAction","action","onAction","DefaultNoComponentGlobalConfig","maxOpened","autoDismiss","preventDuplicates","countDuplicates","resetTimeoutOnDuplicate","includeTitleDuplicates","iconClasses","error","info","success","warning","closeButton","disableTimeOut","timeOut","extendedTimeOut","enableHtml","progressBar","toastClass","positionClass","titleClass","messageClass","easing","easeTime","onActivateTick","progressAnimation","payload","TOAST_CONFIG","DomPortalHost","_hostDomElement","_componentFactoryResolver","_appRef","componentFactory","resolveComponentFactory","componentRef","create","attachView","hostView","detachView","destroy","insertBefore","_getComponentRootNode","firstChild","appendChild","rootNodes","OverlayRef","_portalHost","OverlayContainer","_document","ngOnDestroy","_containerElement","parentNode","removeChild","_createContainer","container","createElement","classList","add","setAttribute","body","ɵprov","providedIn","decorators","Overlay","_overlayContainer","_paneElements","Map","overlayContainer","_createOverlayRef","getPaneElement","get","set","_createPaneElement","pane","id","_createPortalHost","ComponentFactoryResolver","ApplicationRef","ToastrService","token","overlay","_injector","sanitizer","ngZone","currentlyActive","toasts","index","toastrConfig","default","show","override","_preBuildNotification","applyConfig","clear","toast","remove","found","_findToast","activeToast","splice","length","p","findDuplicate","resetOnDuplicate","hasDuplicateTitle","i","run","_buildNotification","toastComponent","Error","duplicate","previousToastMessage","keepInactive","overlayRef","sanitizedMessage","sanitize","HTML","toastPackage","providers","provide","useValue","toastInjector","parent","componentInstance","instance","ins","onShown","onHidden","setTimeout","push","DomSanitizer","NgZone","Toast","toastrService","width","toastClasses","value","params","options","originalTimeout","sub","activateToast","sub1","sub2","sub3","count","displayStyle","unsubscribe","clearInterval","intervalId","clearTimeout","timeout","outsideTimeout","hideTime","Date","getTime","outsideInterval","updateProgress","now","remaining","tapToast","stickAround","delayedHideToast","func","runOutsideAngular","runInsideAngular","setInterval","ɵcmp","NgIf","opacity","template","animations","preserveWhitespaces","DefaultGlobalConfig","ToastrModule","forRoot","ngModule","imports","ToastrComponentlessModule","ToastNoAnimation","appRef","tick","DefaultNoAnimationsGlobalConfig","ToastNoAnimationModule"],"mappings":"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","sourcesContent":["import * as i0 from '@angular/core';\nimport { Directive, NgModule, InjectionToken, Injectable, Inject, SecurityContext, Injector, Component, HostBinding, HostListener } from '@angular/core';\nimport { trigger, state, style, transition, animate } from '@angular/animations';\nimport { Subject } from 'rxjs';\nimport * as i3 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i2 from '@angular/platform-browser';\n\nclass ToastContainerDirective {\n    constructor(el) {\n        this.el = el;\n    }\n    getContainerElement() {\n        return this.el.nativeElement;\n    }\n}\nToastContainerDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nToastContainerDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"15.0.0\", type: ToastContainerDirective, selector: \"[toastContainer]\", exportAs: [\"toastContainer\"], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[toastContainer]',\n                    exportAs: 'toastContainer',\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; } });\nclass ToastContainerModule {\n}\nToastContainerModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nToastContainerModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerModule, declarations: [ToastContainerDirective], exports: [ToastContainerDirective] });\nToastContainerModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerModule });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastContainerModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [ToastContainerDirective],\n                    exports: [ToastContainerDirective],\n                }]\n        }] });\n\n/**\n * A `ComponentPortal` is a portal that instantiates some Component upon attachment.\n */\nclass ComponentPortal {\n    constructor(component, injector) {\n        this.component = component;\n        this.injector = injector;\n    }\n    /** Attach this portal to a host. */\n    attach(host, newestOnTop) {\n        this._attachedHost = host;\n        return host.attach(this, newestOnTop);\n    }\n    /** Detach this portal from its host */\n    detach() {\n        const host = this._attachedHost;\n        if (host) {\n            this._attachedHost = undefined;\n            return host.detach();\n        }\n    }\n    /** Whether this portal is attached to a host. */\n    get isAttached() {\n        return this._attachedHost != null;\n    }\n    /**\n     * Sets the PortalHost reference without performing `attach()`. This is used directly by\n     * the PortalHost when it is performing an `attach()` or `detach()`.\n     */\n    setAttachedHost(host) {\n        this._attachedHost = host;\n    }\n}\n/**\n * Partial implementation of PortalHost that only deals with attaching a\n * ComponentPortal\n */\nclass BasePortalHost {\n    attach(portal, newestOnTop) {\n        this._attachedPortal = portal;\n        return this.attachComponentPortal(portal, newestOnTop);\n    }\n    detach() {\n        if (this._attachedPortal) {\n            this._attachedPortal.setAttachedHost();\n        }\n        this._attachedPortal = undefined;\n        if (this._disposeFn) {\n            this._disposeFn();\n            this._disposeFn = undefined;\n        }\n    }\n    setDisposeFn(fn) {\n        this._disposeFn = fn;\n    }\n}\n\n/**\n * Reference to a toast opened via the Toastr service.\n */\nclass ToastRef {\n    constructor(_overlayRef) {\n        this._overlayRef = _overlayRef;\n        /** Count of duplicates of this toast */\n        this.duplicatesCount = 0;\n        /** Subject for notifying the user that the toast has finished closing. */\n        this._afterClosed = new Subject();\n        /** triggered when toast is activated */\n        this._activate = new Subject();\n        /** notifies the toast that it should close before the timeout */\n        this._manualClose = new Subject();\n        /** notifies the toast that it should reset the timeouts */\n        this._resetTimeout = new Subject();\n        /** notifies the toast that it should count a duplicate toast */\n        this._countDuplicate = new Subject();\n    }\n    manualClose() {\n        this._manualClose.next();\n        this._manualClose.complete();\n    }\n    manualClosed() {\n        return this._manualClose.asObservable();\n    }\n    timeoutReset() {\n        return this._resetTimeout.asObservable();\n    }\n    countDuplicate() {\n        return this._countDuplicate.asObservable();\n    }\n    /**\n     * Close the toast.\n     */\n    close() {\n        this._overlayRef.detach();\n        this._afterClosed.next();\n        this._manualClose.next();\n        this._afterClosed.complete();\n        this._manualClose.complete();\n        this._activate.complete();\n        this._resetTimeout.complete();\n        this._countDuplicate.complete();\n    }\n    /** Gets an observable that is notified when the toast is finished closing. */\n    afterClosed() {\n        return this._afterClosed.asObservable();\n    }\n    isInactive() {\n        return this._activate.isStopped;\n    }\n    activate() {\n        this._activate.next();\n        this._activate.complete();\n    }\n    /** Gets an observable that is notified when the toast has started opening. */\n    afterActivate() {\n        return this._activate.asObservable();\n    }\n    /** Reset the toast timouts and count duplicates */\n    onDuplicate(resetTimeout, countDuplicate) {\n        if (resetTimeout) {\n            this._resetTimeout.next();\n        }\n        if (countDuplicate) {\n            this._countDuplicate.next(++this.duplicatesCount);\n        }\n    }\n}\n\n/**\n * Everything a toast needs to launch\n */\nclass ToastPackage {\n    constructor(toastId, config, message, title, toastType, toastRef) {\n        this.toastId = toastId;\n        this.config = config;\n        this.message = message;\n        this.title = title;\n        this.toastType = toastType;\n        this.toastRef = toastRef;\n        this._onTap = new Subject();\n        this._onAction = new Subject();\n        this.toastRef.afterClosed().subscribe(() => {\n            this._onAction.complete();\n            this._onTap.complete();\n        });\n    }\n    /** Fired on click */\n    triggerTap() {\n        this._onTap.next();\n        if (this.config.tapToDismiss) {\n            this._onTap.complete();\n        }\n    }\n    onTap() {\n        return this._onTap.asObservable();\n    }\n    /** available for use in custom toast */\n    triggerAction(action) {\n        this._onAction.next(action);\n    }\n    onAction() {\n        return this._onAction.asObservable();\n    }\n}\nconst DefaultNoComponentGlobalConfig = {\n    maxOpened: 0,\n    autoDismiss: false,\n    newestOnTop: true,\n    preventDuplicates: false,\n    countDuplicates: false,\n    resetTimeoutOnDuplicate: false,\n    includeTitleDuplicates: false,\n    iconClasses: {\n        error: 'toast-error',\n        info: 'toast-info',\n        success: 'toast-success',\n        warning: 'toast-warning',\n    },\n    // Individual\n    closeButton: false,\n    disableTimeOut: false,\n    timeOut: 5000,\n    extendedTimeOut: 1000,\n    enableHtml: false,\n    progressBar: false,\n    toastClass: 'ngx-toastr',\n    positionClass: 'toast-top-right',\n    titleClass: 'toast-title',\n    messageClass: 'toast-message',\n    easing: 'ease-in',\n    easeTime: 300,\n    tapToDismiss: true,\n    onActivateTick: false,\n    progressAnimation: 'decreasing',\n    payload: null\n};\nconst TOAST_CONFIG = new InjectionToken('ToastConfig');\n\n/**\n * A PortalHost for attaching portals to an arbitrary DOM element outside of the Angular\n * application context.\n *\n * This is the only part of the portal core that directly touches the DOM.\n */\nclass DomPortalHost extends BasePortalHost {\n    constructor(_hostDomElement, _componentFactoryResolver, _appRef) {\n        super();\n        this._hostDomElement = _hostDomElement;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n    }\n    /**\n     * Attach the given ComponentPortal to DOM element using the ComponentFactoryResolver.\n     * @param portal Portal to be attached\n     */\n    attachComponentPortal(portal, newestOnTop) {\n        const componentFactory = this._componentFactoryResolver.resolveComponentFactory(portal.component);\n        let componentRef;\n        // If the portal specifies a ViewContainerRef, we will use that as the attachment point\n        // for the component (in terms of Angular's component tree, not rendering).\n        // When the ViewContainerRef is missing, we use the factory to create the component directly\n        // and then manually attach the ChangeDetector for that component to the application (which\n        // happens automatically when using a ViewContainer).\n        componentRef = componentFactory.create(portal.injector);\n        // When creating a component outside of a ViewContainer, we need to manually register\n        // its ChangeDetector with the application. This API is unfortunately not yet published\n        // in Angular core. The change detector must also be deregistered when the component\n        // is destroyed to prevent memory leaks.\n        this._appRef.attachView(componentRef.hostView);\n        this.setDisposeFn(() => {\n            this._appRef.detachView(componentRef.hostView);\n            componentRef.destroy();\n        });\n        // At this point the component has been instantiated, so we move it to the location in the DOM\n        // where we want it to be rendered.\n        if (newestOnTop) {\n            this._hostDomElement.insertBefore(this._getComponentRootNode(componentRef), this._hostDomElement.firstChild);\n        }\n        else {\n            this._hostDomElement.appendChild(this._getComponentRootNode(componentRef));\n        }\n        return componentRef;\n    }\n    /** Gets the root HTMLElement for an instantiated component. */\n    _getComponentRootNode(componentRef) {\n        return componentRef.hostView.rootNodes[0];\n    }\n}\n\n/**\n * Reference to an overlay that has been created with the Overlay service.\n * Used to manipulate or dispose of said overlay.\n */\nclass OverlayRef {\n    constructor(_portalHost) {\n        this._portalHost = _portalHost;\n    }\n    attach(portal, newestOnTop = true) {\n        return this._portalHost.attach(portal, newestOnTop);\n    }\n    /**\n     * Detaches an overlay from a portal.\n     * @returns Resolves when the overlay has been detached.\n     */\n    detach() {\n        return this._portalHost.detach();\n    }\n}\n\n/** Container inside which all toasts will render. */\nclass OverlayContainer {\n    constructor(_document) {\n        this._document = _document;\n    }\n    ngOnDestroy() {\n        if (this._containerElement && this._containerElement.parentNode) {\n            this._containerElement.parentNode.removeChild(this._containerElement);\n        }\n    }\n    /**\n     * This method returns the overlay container element. It will lazily\n     * create the element the first time  it is called to facilitate using\n     * the container in non-browser environments.\n     * @returns the container element\n     */\n    getContainerElement() {\n        if (!this._containerElement) {\n            this._createContainer();\n        }\n        return this._containerElement;\n    }\n    /**\n     * Create the overlay container element, which is simply a div\n     * with the 'cdk-overlay-container' class on the document body\n     * and 'aria-live=\"polite\"'\n     */\n    _createContainer() {\n        const container = this._document.createElement('div');\n        container.classList.add('overlay-container');\n        container.setAttribute('aria-live', 'polite');\n        this._document.body.appendChild(container);\n        this._containerElement = container;\n    }\n}\nOverlayContainer.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlayContainer.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: OverlayContainer, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/* eslint-disable @typescript-eslint/no-non-null-assertion */\n/**\n * Service to create Overlays. Overlays are dynamically added pieces of floating UI, meant to be\n * used as a low-level building building block for other components. Dialogs, tooltips, menus,\n * selects, etc. can all be built using overlays. The service should primarily be used by authors\n * of re-usable components rather than developers building end-user applications.\n *\n * An overlay *is* a PortalHost, so any kind of Portal can be loaded into one.\n */\nclass Overlay {\n    constructor(_overlayContainer, _componentFactoryResolver, _appRef, _document) {\n        this._overlayContainer = _overlayContainer;\n        this._componentFactoryResolver = _componentFactoryResolver;\n        this._appRef = _appRef;\n        this._document = _document;\n        // Namespace panes by overlay container\n        this._paneElements = new Map();\n    }\n    /**\n     * Creates an overlay.\n     * @returns A reference to the created overlay.\n     */\n    create(positionClass, overlayContainer) {\n        // get existing pane if possible\n        return this._createOverlayRef(this.getPaneElement(positionClass, overlayContainer));\n    }\n    getPaneElement(positionClass = '', overlayContainer) {\n        if (!this._paneElements.get(overlayContainer)) {\n            this._paneElements.set(overlayContainer, {});\n        }\n        if (!this._paneElements.get(overlayContainer)[positionClass]) {\n            this._paneElements.get(overlayContainer)[positionClass] = this._createPaneElement(positionClass, overlayContainer);\n        }\n        return this._paneElements.get(overlayContainer)[positionClass];\n    }\n    /**\n     * Creates the DOM element for an overlay and appends it to the overlay container.\n     * @returns Newly-created pane element\n     */\n    _createPaneElement(positionClass, overlayContainer) {\n        const pane = this._document.createElement('div');\n        pane.id = 'toast-container';\n        pane.classList.add(positionClass);\n        pane.classList.add('toast-container');\n        if (!overlayContainer) {\n            this._overlayContainer.getContainerElement().appendChild(pane);\n        }\n        else {\n            overlayContainer.getContainerElement().appendChild(pane);\n        }\n        return pane;\n    }\n    /**\n     * Create a DomPortalHost into which the overlay content can be loaded.\n     * @param pane The DOM element to turn into a portal host.\n     * @returns A portal host for the given DOM element.\n     */\n    _createPortalHost(pane) {\n        return new DomPortalHost(pane, this._componentFactoryResolver, this._appRef);\n    }\n    /**\n     * Creates an OverlayRef for an overlay in the given DOM element.\n     * @param pane DOM element for the overlay\n     */\n    _createOverlayRef(pane) {\n        return new OverlayRef(this._createPortalHost(pane));\n    }\n}\nOverlay.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, deps: [{ token: OverlayContainer }, { token: i0.ComponentFactoryResolver }, { token: i0.ApplicationRef }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nOverlay.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Overlay, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: OverlayContainer }, { type: i0.ComponentFactoryResolver }, { type: i0.ApplicationRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\nclass ToastrService {\n    constructor(token, overlay, _injector, sanitizer, ngZone) {\n        this.overlay = overlay;\n        this._injector = _injector;\n        this.sanitizer = sanitizer;\n        this.ngZone = ngZone;\n        this.currentlyActive = 0;\n        this.toasts = [];\n        this.index = 0;\n        this.toastrConfig = {\n            ...token.default,\n            ...token.config,\n        };\n        if (token.config.iconClasses) {\n            this.toastrConfig.iconClasses = {\n                ...token.default.iconClasses,\n                ...token.config.iconClasses,\n            };\n        }\n    }\n    /** show toast */\n    show(message, title, override = {}, type = '') {\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show successful toast */\n    success(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.success || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show error toast */\n    error(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.error || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show info toast */\n    info(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.info || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /** show warning toast */\n    warning(message, title, override = {}) {\n        const type = this.toastrConfig.iconClasses.warning || '';\n        return this._preBuildNotification(type, message, title, this.applyConfig(override));\n    }\n    /**\n     * Remove all or a single toast by id\n     */\n    clear(toastId) {\n        // Call every toastRef manualClose function\n        for (const toast of this.toasts) {\n            if (toastId !== undefined) {\n                if (toast.toastId === toastId) {\n                    toast.toastRef.manualClose();\n                    return;\n                }\n            }\n            else {\n                toast.toastRef.manualClose();\n            }\n        }\n    }\n    /**\n     * Remove and destroy a single toast by id\n     */\n    remove(toastId) {\n        const found = this._findToast(toastId);\n        if (!found) {\n            return false;\n        }\n        found.activeToast.toastRef.close();\n        this.toasts.splice(found.index, 1);\n        this.currentlyActive = this.currentlyActive - 1;\n        if (!this.toastrConfig.maxOpened || !this.toasts.length) {\n            return false;\n        }\n        if (this.currentlyActive < this.toastrConfig.maxOpened && this.toasts[this.currentlyActive]) {\n            const p = this.toasts[this.currentlyActive].toastRef;\n            if (!p.isInactive()) {\n                this.currentlyActive = this.currentlyActive + 1;\n                p.activate();\n            }\n        }\n        return true;\n    }\n    /**\n     * Determines if toast message is already shown\n     */\n    findDuplicate(title = '', message = '', resetOnDuplicate, countDuplicates) {\n        const { includeTitleDuplicates } = this.toastrConfig;\n        for (const toast of this.toasts) {\n            const hasDuplicateTitle = includeTitleDuplicates && toast.title === title;\n            if ((!includeTitleDuplicates || hasDuplicateTitle) && toast.message === message) {\n                toast.toastRef.onDuplicate(resetOnDuplicate, countDuplicates);\n                return toast;\n            }\n        }\n        return null;\n    }\n    /** create a clone of global config and apply individual settings */\n    applyConfig(override = {}) {\n        return { ...this.toastrConfig, ...override };\n    }\n    /**\n     * Find toast object by id\n     */\n    _findToast(toastId) {\n        for (let i = 0; i < this.toasts.length; i++) {\n            if (this.toasts[i].toastId === toastId) {\n                return { index: i, activeToast: this.toasts[i] };\n            }\n        }\n        return null;\n    }\n    /**\n     * Determines the need to run inside angular's zone then builds the toast\n     */\n    _preBuildNotification(toastType, message, title, config) {\n        if (config.onActivateTick) {\n            return this.ngZone.run(() => this._buildNotification(toastType, message, title, config));\n        }\n        return this._buildNotification(toastType, message, title, config);\n    }\n    /**\n     * Creates and attaches toast data to component\n     * returns the active toast, or in case preventDuplicates is enabled the original/non-duplicate active toast.\n     */\n    _buildNotification(toastType, message, title, config) {\n        if (!config.toastComponent) {\n            throw new Error('toastComponent required');\n        }\n        // max opened and auto dismiss = true\n        // if timeout = 0 resetting it would result in setting this.hideTime = Date.now(). Hence, we only want to reset timeout if there is\n        // a timeout at all\n        const duplicate = this.findDuplicate(title, message, this.toastrConfig.resetTimeoutOnDuplicate && config.timeOut > 0, this.toastrConfig.countDuplicates);\n        if (((this.toastrConfig.includeTitleDuplicates && title) || message) &&\n            this.toastrConfig.preventDuplicates &&\n            duplicate !== null) {\n            return duplicate;\n        }\n        this.previousToastMessage = message;\n        let keepInactive = false;\n        if (this.toastrConfig.maxOpened && this.currentlyActive >= this.toastrConfig.maxOpened) {\n            keepInactive = true;\n            if (this.toastrConfig.autoDismiss) {\n                this.clear(this.toasts[0].toastId);\n            }\n        }\n        const overlayRef = this.overlay.create(config.positionClass, this.overlayContainer);\n        this.index = this.index + 1;\n        let sanitizedMessage = message;\n        if (message && config.enableHtml) {\n            sanitizedMessage = this.sanitizer.sanitize(SecurityContext.HTML, message);\n        }\n        const toastRef = new ToastRef(overlayRef);\n        const toastPackage = new ToastPackage(this.index, config, sanitizedMessage, title, toastType, toastRef);\n        /** New injector that contains an instance of `ToastPackage`. */\n        const providers = [{ provide: ToastPackage, useValue: toastPackage }];\n        const toastInjector = Injector.create({ providers, parent: this._injector });\n        const component = new ComponentPortal(config.toastComponent, toastInjector);\n        const portal = overlayRef.attach(component, config.newestOnTop);\n        toastRef.componentInstance = portal.instance;\n        const ins = {\n            toastId: this.index,\n            title: title || '',\n            message: message || '',\n            toastRef,\n            onShown: toastRef.afterActivate(),\n            onHidden: toastRef.afterClosed(),\n            onTap: toastPackage.onTap(),\n            onAction: toastPackage.onAction(),\n            portal,\n        };\n        if (!keepInactive) {\n            this.currentlyActive = this.currentlyActive + 1;\n            setTimeout(() => {\n                ins.toastRef.activate();\n            });\n        }\n        this.toasts.push(ins);\n        return ins;\n    }\n}\nToastrService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrService, deps: [{ token: TOAST_CONFIG }, { token: Overlay }, { token: i0.Injector }, { token: i2.DomSanitizer }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable });\nToastrService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrService, providedIn: 'root' });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrService, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [TOAST_CONFIG]\n                }] }, { type: Overlay }, { type: i0.Injector }, { type: i2.DomSanitizer }, { type: i0.NgZone }]; } });\n\nclass Toast {\n    constructor(toastrService, toastPackage, ngZone) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.ngZone = ngZone;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = {\n            value: 'inactive',\n            params: {\n                easeTime: this.toastPackage.config.easeTime,\n                easing: 'ease-in'\n            }\n        };\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state.value === 'inactive') {\n            return 'none';\n        }\n        return;\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = { ...this.state, value: 'active' };\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.outsideTimeout(() => this.remove(), this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.outsideInterval(() => this.updateProgress(), 10);\n            }\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = { ...this.state, value: 'active' };\n        this.outsideTimeout(() => this.remove(), this.originalTimeout);\n        this.options.timeOut = this.originalTimeout;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = { ...this.state, value: 'removed' };\n        this.outsideTimeout(() => this.toastrService.remove(this.toastPackage.toastId), +this.toastPackage.config.easeTime);\n    }\n    tapToast() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state.value === 'removed') {\n            return;\n        }\n        if (this.options.disableTimeOut !== 'extendedTimeOut') {\n            clearTimeout(this.timeout);\n            this.options.timeOut = 0;\n            this.hideTime = 0;\n            // disable progressBar\n            clearInterval(this.intervalId);\n            this.width = 0;\n        }\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state.value === 'removed') {\n            return;\n        }\n        this.outsideTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.outsideInterval(() => this.updateProgress(), 10);\n        }\n    }\n    outsideTimeout(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.timeout = setTimeout(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.timeout = setTimeout(() => func(), timeout);\n        }\n    }\n    outsideInterval(func, timeout) {\n        if (this.ngZone) {\n            this.ngZone.runOutsideAngular(() => (this.intervalId = setInterval(() => this.runInsideAngular(func), timeout)));\n        }\n        else {\n            this.intervalId = setInterval(() => func(), timeout);\n        }\n    }\n    runInsideAngular(func) {\n        if (this.ngZone) {\n            this.ngZone.run(() => func());\n        }\n        else {\n            func();\n        }\n    }\n}\nToast.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Toast, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component });\nToast.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: Toast, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"@flyInOut\": \"this.state\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], animations: [\n        trigger('flyInOut', [\n            state('inactive', style({ opacity: 0 })),\n            state('active', style({ opacity: 1 })),\n            state('removed', style({ opacity: 0 })),\n            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n        ])\n    ] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: Toast, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                    animations: [\n                        trigger('flyInOut', [\n                            state('inactive', style({ opacity: 0 })),\n                            state('active', style({ opacity: 1 })),\n                            state('removed', style({ opacity: 0 })),\n                            transition('inactive => active', animate('{{ easeTime }}ms {{ easing }}')),\n                            transition('active => removed', animate('{{ easeTime }}ms {{ easing }}'))\n                        ])\n                    ],\n                    preserveWhitespaces: false\n                }]\n        }], ctorParameters: function () { return [{ type: ToastrService }, { type: ToastPackage }, { type: i0.NgZone }]; }, propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], state: [{\n                type: HostBinding,\n                args: ['@flyInOut']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\n\nconst DefaultGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: Toast,\n};\nclass ToastrModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nToastrModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrModule, declarations: [Toast], imports: [CommonModule], exports: [Toast] });\nToastrModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [Toast],\n                    exports: [Toast],\n                }]\n        }] });\nclass ToastrComponentlessModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastrModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoComponentGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastrComponentlessModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrComponentlessModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nToastrComponentlessModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrComponentlessModule, imports: [CommonModule] });\nToastrComponentlessModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrComponentlessModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastrComponentlessModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                }]\n        }] });\n\nclass ToastNoAnimation {\n    constructor(toastrService, toastPackage, appRef) {\n        this.toastrService = toastrService;\n        this.toastPackage = toastPackage;\n        this.appRef = appRef;\n        /** width of progress bar */\n        this.width = -1;\n        /** a combination of toast type and options.toastClass */\n        this.toastClasses = '';\n        /** controls animation */\n        this.state = 'inactive';\n        this.message = toastPackage.message;\n        this.title = toastPackage.title;\n        this.options = toastPackage.config;\n        this.originalTimeout = toastPackage.config.timeOut;\n        this.toastClasses = `${toastPackage.toastType} ${toastPackage.config.toastClass}`;\n        this.sub = toastPackage.toastRef.afterActivate().subscribe(() => {\n            this.activateToast();\n        });\n        this.sub1 = toastPackage.toastRef.manualClosed().subscribe(() => {\n            this.remove();\n        });\n        this.sub2 = toastPackage.toastRef.timeoutReset().subscribe(() => {\n            this.resetTimeout();\n        });\n        this.sub3 = toastPackage.toastRef.countDuplicate().subscribe(count => {\n            this.duplicatesCount = count;\n        });\n    }\n    /** hides component when waiting to be displayed */\n    get displayStyle() {\n        if (this.state === 'inactive') {\n            return 'none';\n        }\n    }\n    ngOnDestroy() {\n        this.sub.unsubscribe();\n        this.sub1.unsubscribe();\n        this.sub2.unsubscribe();\n        this.sub3.unsubscribe();\n        clearInterval(this.intervalId);\n        clearTimeout(this.timeout);\n    }\n    /**\n     * activates toast and sets timeout\n     */\n    activateToast() {\n        this.state = 'active';\n        if (!(this.options.disableTimeOut === true || this.options.disableTimeOut === 'timeOut') && this.options.timeOut) {\n            this.timeout = setTimeout(() => {\n                this.remove();\n            }, this.options.timeOut);\n            this.hideTime = new Date().getTime() + this.options.timeOut;\n            if (this.options.progressBar) {\n                this.intervalId = setInterval(() => this.updateProgress(), 10);\n            }\n        }\n        if (this.options.onActivateTick) {\n            this.appRef.tick();\n        }\n    }\n    /**\n     * updates progress bar width\n     */\n    updateProgress() {\n        if (this.width === 0 || this.width === 100 || !this.options.timeOut) {\n            return;\n        }\n        const now = new Date().getTime();\n        const remaining = this.hideTime - now;\n        this.width = (remaining / this.options.timeOut) * 100;\n        if (this.options.progressAnimation === 'increasing') {\n            this.width = 100 - this.width;\n        }\n        if (this.width <= 0) {\n            this.width = 0;\n        }\n        if (this.width >= 100) {\n            this.width = 100;\n        }\n    }\n    resetTimeout() {\n        clearTimeout(this.timeout);\n        clearInterval(this.intervalId);\n        this.state = 'active';\n        this.options.timeOut = this.originalTimeout;\n        this.timeout = setTimeout(() => this.remove(), this.originalTimeout);\n        this.hideTime = new Date().getTime() + (this.originalTimeout || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n    /**\n     * tells toastrService to remove this toast after animation time\n     */\n    remove() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.state = 'removed';\n        this.timeout = setTimeout(() => this.toastrService.remove(this.toastPackage.toastId));\n    }\n    tapToast() {\n        if (this.state === 'removed') {\n            return;\n        }\n        this.toastPackage.triggerTap();\n        if (this.options.tapToDismiss) {\n            this.remove();\n        }\n    }\n    stickAround() {\n        if (this.state === 'removed') {\n            return;\n        }\n        clearTimeout(this.timeout);\n        this.options.timeOut = 0;\n        this.hideTime = 0;\n        // disable progressBar\n        clearInterval(this.intervalId);\n        this.width = 0;\n    }\n    delayedHideToast() {\n        if ((this.options.disableTimeOut === true || this.options.disableTimeOut === 'extendedTimeOut') ||\n            this.options.extendedTimeOut === 0 ||\n            this.state === 'removed') {\n            return;\n        }\n        this.timeout = setTimeout(() => this.remove(), this.options.extendedTimeOut);\n        this.options.timeOut = this.options.extendedTimeOut;\n        this.hideTime = new Date().getTime() + (this.options.timeOut || 0);\n        this.width = -1;\n        if (this.options.progressBar) {\n            this.intervalId = setInterval(() => this.updateProgress(), 10);\n        }\n    }\n}\nToastNoAnimation.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimation, deps: [{ token: ToastrService }, { token: ToastPackage }, { token: i0.ApplicationRef }], target: i0.ɵɵFactoryTarget.Component });\nToastNoAnimation.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"15.0.0\", type: ToastNoAnimation, selector: \"[toast-component]\", host: { listeners: { \"click\": \"tapToast()\", \"mouseenter\": \"stickAround()\", \"mouseleave\": \"delayedHideToast()\" }, properties: { \"class\": \"this.toastClasses\", \"style.display\": \"this.displayStyle\" } }, ngImport: i0, template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimation, decorators: [{\n            type: Component,\n            args: [{\n                    selector: '[toast-component]',\n                    template: `\n  <button *ngIf=\"options.closeButton\" (click)=\"remove()\" type=\"button\" class=\"toast-close-button\" aria-label=\"Close\">\n    <span aria-hidden=\"true\">&times;</span>\n  </button>\n  <div *ngIf=\"title\" [class]=\"options.titleClass\" [attr.aria-label]=\"title\">\n    {{ title }} <ng-container *ngIf=\"duplicatesCount\">[{{ duplicatesCount + 1 }}]</ng-container>\n  </div>\n  <div *ngIf=\"message && options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [innerHTML]=\"message\">\n  </div>\n  <div *ngIf=\"message && !options.enableHtml\" role=\"alert\"\n    [class]=\"options.messageClass\" [attr.aria-label]=\"message\">\n    {{ message }}\n  </div>\n  <div *ngIf=\"options.progressBar\">\n    <div class=\"toast-progress\" [style.width]=\"width + '%'\"></div>\n  </div>\n  `,\n                }]\n        }], ctorParameters: function () { return [{ type: ToastrService }, { type: ToastPackage }, { type: i0.ApplicationRef }]; }, propDecorators: { toastClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], displayStyle: [{\n                type: HostBinding,\n                args: ['style.display']\n            }], tapToast: [{\n                type: HostListener,\n                args: ['click']\n            }], stickAround: [{\n                type: HostListener,\n                args: ['mouseenter']\n            }], delayedHideToast: [{\n                type: HostListener,\n                args: ['mouseleave']\n            }] } });\nconst DefaultNoAnimationsGlobalConfig = {\n    ...DefaultNoComponentGlobalConfig,\n    toastComponent: ToastNoAnimation,\n};\nclass ToastNoAnimationModule {\n    static forRoot(config = {}) {\n        return {\n            ngModule: ToastNoAnimationModule,\n            providers: [\n                {\n                    provide: TOAST_CONFIG,\n                    useValue: {\n                        default: DefaultNoAnimationsGlobalConfig,\n                        config,\n                    },\n                },\n            ],\n        };\n    }\n}\nToastNoAnimationModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimationModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nToastNoAnimationModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimationModule, declarations: [ToastNoAnimation], imports: [CommonModule], exports: [ToastNoAnimation] });\nToastNoAnimationModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimationModule, imports: [CommonModule] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"15.0.0\", ngImport: i0, type: ToastNoAnimationModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    declarations: [ToastNoAnimation],\n                    exports: [ToastNoAnimation],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { BasePortalHost, ComponentPortal, DefaultGlobalConfig, DefaultNoAnimationsGlobalConfig, DefaultNoComponentGlobalConfig, Overlay, OverlayContainer, OverlayRef, TOAST_CONFIG, Toast, ToastContainerDirective, ToastContainerModule, ToastNoAnimation, ToastNoAnimationModule, ToastPackage, ToastRef, ToastrComponentlessModule, ToastrModule, ToastrService };\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}