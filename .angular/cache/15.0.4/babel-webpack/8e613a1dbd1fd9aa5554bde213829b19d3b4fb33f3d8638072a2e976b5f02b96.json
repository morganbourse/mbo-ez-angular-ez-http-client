{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n  return source => source.lift(new CountOperator(predicate, source));\n}\n\nclass CountOperator {\n  constructor(predicate, source) {\n    this.predicate = predicate;\n    this.source = source;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n  }\n\n}\n\nclass CountSubscriber extends Subscriber {\n  constructor(destination, predicate, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.source = source;\n    this.count = 0;\n    this.index = 0;\n  }\n\n  _next(value) {\n    if (this.predicate) {\n      this._tryPredicate(value);\n    } else {\n      this.count++;\n    }\n  }\n\n  _tryPredicate(value) {\n    let result;\n\n    try {\n      result = this.predicate(value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (result) {\n      this.count++;\n    }\n  }\n\n  _complete() {\n    this.destination.next(this.count);\n    this.destination.complete();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/count.js"],"names":["Subscriber","count","predicate","source","lift","CountOperator","constructor","call","subscriber","subscribe","CountSubscriber","destination","index","_next","value","_tryPredicate","result","err","error","_complete","next","complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,KAAT,CAAeC,SAAf,EAA0B;AAC7B,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,aAAJ,CAAkBH,SAAlB,EAA6BC,MAA7B,CAAZ,CAAnB;AACH;;AACD,MAAME,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACJ,SAAD,EAAYC,MAAZ,EAAoB;AAC3B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDI,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,UAApB,EAAgC,KAAKN,SAArC,EAAgD,KAAKC,MAArD,CAAjB,CAAP;AACH;;AAPe;;AASpB,MAAMO,eAAN,SAA8BV,UAA9B,CAAyC;AACrCM,EAAAA,WAAW,CAACK,WAAD,EAAcT,SAAd,EAAyBC,MAAzB,EAAiC;AACxC,UAAMQ,WAAN;AACA,SAAKT,SAAL,GAAiBA,SAAjB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKF,KAAL,GAAa,CAAb;AACA,SAAKW,KAAL,GAAa,CAAb;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAI,KAAKZ,SAAT,EAAoB;AAChB,WAAKa,aAAL,CAAmBD,KAAnB;AACH,KAFD,MAGK;AACD,WAAKb,KAAL;AACH;AACJ;;AACDc,EAAAA,aAAa,CAACD,KAAD,EAAQ;AACjB,QAAIE,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,KAAKd,SAAL,CAAeY,KAAf,EAAsB,KAAKF,KAAL,EAAtB,EAAoC,KAAKT,MAAzC,CAAT;AACH,KAFD,CAGA,OAAOc,GAAP,EAAY;AACR,WAAKN,WAAL,CAAiBO,KAAjB,CAAuBD,GAAvB;AACA;AACH;;AACD,QAAID,MAAJ,EAAY;AACR,WAAKf,KAAL;AACH;AACJ;;AACDkB,EAAAA,SAAS,GAAG;AACR,SAAKR,WAAL,CAAiBS,IAAjB,CAAsB,KAAKnB,KAA3B;AACA,SAAKU,WAAL,CAAiBU,QAAjB;AACH;;AAhCoC","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function count(predicate) {\n    return (source) => source.lift(new CountOperator(predicate, source));\n}\nclass CountOperator {\n    constructor(predicate, source) {\n        this.predicate = predicate;\n        this.source = source;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new CountSubscriber(subscriber, this.predicate, this.source));\n    }\n}\nclass CountSubscriber extends Subscriber {\n    constructor(destination, predicate, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.source = source;\n        this.count = 0;\n        this.index = 0;\n    }\n    _next(value) {\n        if (this.predicate) {\n            this._tryPredicate(value);\n        }\n        else {\n            this.count++;\n        }\n    }\n    _tryPredicate(value) {\n        let result;\n        try {\n            result = this.predicate(value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (result) {\n            this.count++;\n        }\n    }\n    _complete() {\n        this.destination.next(this.count);\n        this.destination.complete();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}