{"ast":null,"code":"import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n  constructor(subscribe) {\n    this._isScalar = false;\n\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  lift(operator) {\n    const observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observerOrNext, error, complete) {\n    const {\n      operator\n    } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      sink.add(operator.call(sink, this.source));\n    } else {\n      sink.add(this.source || config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      if (sink.syncErrorThrowable) {\n        sink.syncErrorThrowable = false;\n\n        if (sink.syncErrorThrown) {\n          throw sink.syncErrorValue;\n        }\n      }\n    }\n\n    return sink;\n  }\n\n  _trySubscribe(sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        sink.syncErrorThrown = true;\n        sink.syncErrorValue = err;\n      }\n\n      if (canReportError(sink)) {\n        sink.error(err);\n      } else {\n        console.warn(err);\n      }\n    }\n  }\n\n  forEach(next, promiseCtor) {\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor((resolve, reject) => {\n      let subscription;\n      subscription = this.subscribe(value => {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n\n          if (subscription) {\n            subscription.unsubscribe();\n          }\n        }\n      }, reject, resolve);\n    });\n  }\n\n  _subscribe(subscriber) {\n    const {\n      source\n    } = this;\n    return source && source.subscribe(subscriber);\n  }\n\n  [Symbol_observable]() {\n    return this;\n  }\n\n  pipe(...operations) {\n    if (operations.length === 0) {\n      return this;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  toPromise(promiseCtor) {\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor((resolve, reject) => {\n      let value;\n      this.subscribe(x => value = x, err => reject(err), () => resolve(value));\n    });\n  }\n\n}\n\nObservable.create = subscribe => {\n  return new Observable(subscribe);\n};\n\nfunction getPromiseCtor(promiseCtor) {\n  if (!promiseCtor) {\n    promiseCtor = config.Promise || Promise;\n  }\n\n  if (!promiseCtor) {\n    throw new Error('no Promise impl found');\n  }\n\n  return promiseCtor;\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/Observable.js"],"names":["canReportError","toSubscriber","observable","Symbol_observable","pipeFromArray","config","Observable","constructor","subscribe","_isScalar","_subscribe","lift","operator","source","observerOrNext","error","complete","sink","add","call","useDeprecatedSynchronousErrorHandling","syncErrorThrowable","_trySubscribe","syncErrorThrown","syncErrorValue","err","console","warn","forEach","next","promiseCtor","getPromiseCtor","resolve","reject","subscription","value","unsubscribe","subscriber","pipe","operations","length","toPromise","x","create","Promise","Error"],"mappings":"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","sourcesContent":["import { canReportError } from './util/canReportError';\nimport { toSubscriber } from './util/toSubscriber';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nexport class Observable {\n    constructor(subscribe) {\n        this._isScalar = false;\n        if (subscribe) {\n            this._subscribe = subscribe;\n        }\n    }\n    lift(operator) {\n        const observable = new Observable();\n        observable.source = this;\n        observable.operator = operator;\n        return observable;\n    }\n    subscribe(observerOrNext, error, complete) {\n        const { operator } = this;\n        const sink = toSubscriber(observerOrNext, error, complete);\n        if (operator) {\n            sink.add(operator.call(sink, this.source));\n        }\n        else {\n            sink.add(this.source || (config.useDeprecatedSynchronousErrorHandling && !sink.syncErrorThrowable) ?\n                this._subscribe(sink) :\n                this._trySubscribe(sink));\n        }\n        if (config.useDeprecatedSynchronousErrorHandling) {\n            if (sink.syncErrorThrowable) {\n                sink.syncErrorThrowable = false;\n                if (sink.syncErrorThrown) {\n                    throw sink.syncErrorValue;\n                }\n            }\n        }\n        return sink;\n    }\n    _trySubscribe(sink) {\n        try {\n            return this._subscribe(sink);\n        }\n        catch (err) {\n            if (config.useDeprecatedSynchronousErrorHandling) {\n                sink.syncErrorThrown = true;\n                sink.syncErrorValue = err;\n            }\n            if (canReportError(sink)) {\n                sink.error(err);\n            }\n            else {\n                console.warn(err);\n            }\n        }\n    }\n    forEach(next, promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let subscription;\n            subscription = this.subscribe((value) => {\n                try {\n                    next(value);\n                }\n                catch (err) {\n                    reject(err);\n                    if (subscription) {\n                        subscription.unsubscribe();\n                    }\n                }\n            }, reject, resolve);\n        });\n    }\n    _subscribe(subscriber) {\n        const { source } = this;\n        return source && source.subscribe(subscriber);\n    }\n    [Symbol_observable]() {\n        return this;\n    }\n    pipe(...operations) {\n        if (operations.length === 0) {\n            return this;\n        }\n        return pipeFromArray(operations)(this);\n    }\n    toPromise(promiseCtor) {\n        promiseCtor = getPromiseCtor(promiseCtor);\n        return new promiseCtor((resolve, reject) => {\n            let value;\n            this.subscribe((x) => value = x, (err) => reject(err), () => resolve(value));\n        });\n    }\n}\nObservable.create = (subscribe) => {\n    return new Observable(subscribe);\n};\nfunction getPromiseCtor(promiseCtor) {\n    if (!promiseCtor) {\n        promiseCtor = config.Promise || Promise;\n    }\n    if (!promiseCtor) {\n        throw new Error('no Promise impl found');\n    }\n    return promiseCtor;\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}