{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n  let hasSeed = false;\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nclass ScanOperator {\n  constructor(accumulator, seed, hasSeed = false) {\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  }\n\n}\n\nclass ScanSubscriber extends Subscriber {\n  constructor(destination, accumulator, _seed, hasSeed) {\n    super(destination);\n    this.accumulator = accumulator;\n    this._seed = _seed;\n    this.hasSeed = hasSeed;\n    this.index = 0;\n  }\n\n  get seed() {\n    return this._seed;\n  }\n\n  set seed(value) {\n    this.hasSeed = true;\n    this._seed = value;\n  }\n\n  _next(value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  }\n\n  _tryNext(value) {\n    const index = this.index++;\n    let result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/scan.js"],"names":["Subscriber","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","lift","ScanOperator","constructor","call","subscriber","subscribe","ScanSubscriber","destination","_seed","index","value","_next","next","_tryNext","result","err","error"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,IAAT,CAAcC,WAAd,EAA2BC,IAA3B,EAAiC;AACpC,MAAIC,OAAO,GAAG,KAAd;;AACA,MAAIC,SAAS,CAACC,MAAV,IAAoB,CAAxB,EAA2B;AACvBF,IAAAA,OAAO,GAAG,IAAV;AACH;;AACD,SAAO,SAASG,oBAAT,CAA8BC,MAA9B,EAAsC;AACzC,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,YAAJ,CAAiBR,WAAjB,EAA8BC,IAA9B,EAAoCC,OAApC,CAAZ,CAAP;AACH,GAFD;AAGH;;AACD,MAAMM,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACT,WAAD,EAAcC,IAAd,EAAoBC,OAAO,GAAG,KAA9B,EAAqC;AAC5C,SAAKF,WAAL,GAAmBA,WAAnB;AACA,SAAKC,IAAL,GAAYA,IAAZ;AACA,SAAKC,OAAL,GAAeA,OAAf;AACH;;AACDQ,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,cAAJ,CAAmBF,UAAnB,EAA+B,KAAKX,WAApC,EAAiD,KAAKC,IAAtD,EAA4D,KAAKC,OAAjE,CAAjB,CAAP;AACH;;AARc;;AAUnB,MAAMW,cAAN,SAA6Bf,UAA7B,CAAwC;AACpCW,EAAAA,WAAW,CAACK,WAAD,EAAcd,WAAd,EAA2Be,KAA3B,EAAkCb,OAAlC,EAA2C;AAClD,UAAMY,WAAN;AACA,SAAKd,WAAL,GAAmBA,WAAnB;AACA,SAAKe,KAAL,GAAaA,KAAb;AACA,SAAKb,OAAL,GAAeA,OAAf;AACA,SAAKc,KAAL,GAAa,CAAb;AACH;;AACO,MAAJf,IAAI,GAAG;AACP,WAAO,KAAKc,KAAZ;AACH;;AACO,MAAJd,IAAI,CAACgB,KAAD,EAAQ;AACZ,SAAKf,OAAL,GAAe,IAAf;AACA,SAAKa,KAAL,GAAaE,KAAb;AACH;;AACDC,EAAAA,KAAK,CAACD,KAAD,EAAQ;AACT,QAAI,CAAC,KAAKf,OAAV,EAAmB;AACf,WAAKD,IAAL,GAAYgB,KAAZ;AACA,WAAKH,WAAL,CAAiBK,IAAjB,CAAsBF,KAAtB;AACH,KAHD,MAIK;AACD,aAAO,KAAKG,QAAL,CAAcH,KAAd,CAAP;AACH;AACJ;;AACDG,EAAAA,QAAQ,CAACH,KAAD,EAAQ;AACZ,UAAMD,KAAK,GAAG,KAAKA,KAAL,EAAd;AACA,QAAIK,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,KAAKrB,WAAL,CAAiB,KAAKC,IAAtB,EAA4BgB,KAA5B,EAAmCD,KAAnC,CAAT;AACH,KAFD,CAGA,OAAOM,GAAP,EAAY;AACR,WAAKR,WAAL,CAAiBS,KAAjB,CAAuBD,GAAvB;AACH;;AACD,SAAKrB,IAAL,GAAYoB,MAAZ;AACA,SAAKP,WAAL,CAAiBK,IAAjB,CAAsBE,MAAtB;AACH;;AAnCmC","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function scan(accumulator, seed) {\n    let hasSeed = false;\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nclass ScanOperator {\n    constructor(accumulator, seed, hasSeed = false) {\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    }\n}\nclass ScanSubscriber extends Subscriber {\n    constructor(destination, accumulator, _seed, hasSeed) {\n        super(destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    get seed() {\n        return this._seed;\n    }\n    set seed(value) {\n        this.hasSeed = true;\n        this._seed = value;\n    }\n    _next(value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    }\n    _tryNext(value) {\n        const index = this.index++;\n        let result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}