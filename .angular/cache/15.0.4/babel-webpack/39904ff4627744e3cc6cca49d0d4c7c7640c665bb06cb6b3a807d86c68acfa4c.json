{"ast":null,"code":"import { EventEmitter, SimpleChanges } from '@angular/core';\nimport { ModalDirective } from 'angular-bootstrap-md';\nimport { TaskService } from 'src/app/core/services/task.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/task.service\";\nimport * as i2 from \"@angular/forms\";\nimport * as i3 from \"angular-bootstrap-md\";\nexport class SaveOrUpdateTaskPopupComponent {\n  constructor(taskService) {\n    this.taskService = taskService;\n    this.displayChange = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n    this.onHiddenSubscription = this.modal?.onHidden.subscribe(() => {\n      this.onClose.emit();\n    });\n  }\n\n  ngOnChanges(changes) {\n    if (changes.display.currentValue === true) {\n      this.modal?.show();\n    } else {\n      this.modal?.hide();\n    }\n\n    if (changes.task && changes.task.currentValue) {\n      this.taskModel = {\n        name: changes.task.currentValue.name,\n        description: changes.task.currentValue.description\n      };\n    } else {\n      this.taskModel = {\n        name: '',\n        description: ''\n      };\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.onHiddenSubscription && !this.onHiddenSubscription.closed) {\n      this.onHiddenSubscription.unsubscribe();\n    }\n  }\n  /**\r\n   * Close the current modal instance\r\n   */\n\n\n  close() {\n    this.display = false;\n    this.displayChange.emit(false);\n  }\n  /**\r\n   * Create or update a task\r\n   */\n\n\n  createOrUpdate() {\n    let promise;\n\n    if (this.task) {\n      promise = this.taskService.updateTask(this.task.id, this.taskModel);\n    } else {\n      promise = this.taskService.addTask(this.taskModel);\n    }\n\n    promise.then(updatedTask => {\n      this.onSuccess.emit(updatedTask);\n      this.close();\n    });\n  }\n\n}\n\nSaveOrUpdateTaskPopupComponent.ɵfac = function SaveOrUpdateTaskPopupComponent_Factory(t) {\n  return new (t || SaveOrUpdateTaskPopupComponent)(i0.ɵɵdirectiveInject(i1.TaskService));\n};\n\nSaveOrUpdateTaskPopupComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SaveOrUpdateTaskPopupComponent,\n  selectors: [[\"save-or-update-task-popup\"]],\n  viewQuery: function SaveOrUpdateTaskPopupComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(ModalDirective, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.modal = _t.first);\n    }\n  },\n  inputs: {\n    display: \"display\",\n    task: \"task\"\n  },\n  outputs: {\n    displayChange: \"displayChange\",\n    onClose: \"onClose\",\n    onSuccess: \"onSuccess\"\n  },\n  features: [i0.ɵɵNgOnChangesFeature],\n  decls: 23,\n  vars: 5,\n  consts: [[\"mdbModal\", \"\", \"tabindex\", \"-1\", \"role\", \"dialog\", \"aria-labelledby\", \"myModalLabel\", \"aria-hidden\", \"true\", 1, \"modal\", \"fade\"], [\"modalUpdateTask\", \"mdbModal\"], [\"role\", \"document\", 1, \"modal-dialog\", \"modal-notify\", \"modal-info\"], [1, \"modal-content\"], [1, \"modal-header\", \"text-center\"], [1, \"modal-title\", \"white-text\", \"w-100\", \"font-weight-bold\", \"py-2\"], [\"type\", \"button\", \"data-dismiss\", \"modal\", \"aria-label\", \"Close\", 1, \"close\", 3, \"click\"], [\"aria-hidden\", \"true\", 1, \"white-text\"], [1, \"modal-body\"], [1, \"md-form\", \"mb-5\"], [\"type\", \"text\", \"mdbInput\", \"\", 1, \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"form3\"], [1, \"md-form\"], [\"type\", \"text\", \"id\", \"form2\", \"rows\", \"4\", \"mdbInput\", \"\", 1, \"md-textarea\", \"form-control\", 3, \"ngModel\", \"ngModelChange\"], [\"for\", \"form2\"], [1, \"modal-footer\", \"justify-content-center\"], [\"type\", \"button\", \"mdbBtn\", \"\", \"color\", \"info\", \"mdbWavesEffect\", \"\", 1, \"waves-effect\", 3, \"outline\", \"click\"], [\"far\", \"\", \"icon\", \"plus-square\", 1, \"mr-1\"]],\n  template: function SaveOrUpdateTaskPopupComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0, 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"h4\", 5);\n      i0.ɵɵtext(6);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function SaveOrUpdateTaskPopupComponent_Template_button_click_7_listener() {\n        return ctx.close();\n      });\n      i0.ɵɵelementStart(8, \"span\", 7);\n      i0.ɵɵtext(9, \"\\u00D7\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(10, \"div\", 8)(11, \"div\", 9)(12, \"input\", 10);\n      i0.ɵɵlistener(\"ngModelChange\", function SaveOrUpdateTaskPopupComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.taskModel.name = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"label\", 11);\n      i0.ɵɵtext(14, \"Name\");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(15, \"div\", 12)(16, \"textarea\", 13);\n      i0.ɵɵlistener(\"ngModelChange\", function SaveOrUpdateTaskPopupComponent_Template_textarea_ngModelChange_16_listener($event) {\n        return ctx.taskModel.description = $event;\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"label\", 14);\n      i0.ɵɵtext(18, \"Description\");\n      i0.ɵɵelementEnd()()();\n      i0.ɵɵelementStart(19, \"div\", 15)(20, \"a\", 16);\n      i0.ɵɵlistener(\"click\", function SaveOrUpdateTaskPopupComponent_Template_a_click_20_listener() {\n        return ctx.createOrUpdate();\n      });\n      i0.ɵɵelement(21, \"mdb-icon\", 17);\n      i0.ɵɵtext(22);\n      i0.ɵɵelementEnd()()()()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵtextInterpolate1(\"\", ctx.task ? \"UPDATE\" : \"ADD\", \" TASK\");\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngModel\", ctx.taskModel.name);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.taskModel.description);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"outline\", true);\n      i0.ɵɵadvance(2);\n      i0.ɵɵtextInterpolate1(\" \", ctx.task ? \"UPDATE\" : \"ADD\", \" \");\n    }\n  },\n  dependencies: [i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgModel, i3.MdbBtnDirective, i3.WavesDirective, i3.MdbInput, i3.ModalDirective, i3.MdbIconComponent, i3.FarDirective],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\features\\todo-list\\save-or-update-task-popup\\save-or-update-task-popup.component.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\features\\todo-list\\save-or-update-task-popup\\save-or-update-task-popup.component.html"],"names":[],"mappings":"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","sourcesContent":["import { Component, EventEmitter, Input, OnChanges, OnDestroy, Output, SimpleChanges, ViewChild } from '@angular/core';\nimport { ModalDirective } from 'angular-bootstrap-md';\nimport { Subscription } from 'rxjs';\nimport { PartialTask } from 'src/app/core/models/tasks/partial-task.model';\nimport { Task } from 'src/app/core/models/tasks/task.model';\nimport { TaskService } from 'src/app/core/services/task.service';\n\n@Component({\n  selector: 'save-or-update-task-popup',\n  templateUrl: './save-or-update-task-popup.component.html',\n  styleUrls: ['./save-or-update-task-popup.component.scss']\n})\nexport class SaveOrUpdateTaskPopupComponent implements OnChanges, OnDestroy {\n  @ViewChild(ModalDirective) \n  private modal: ModalDirective | undefined;\n\n  private onHiddenSubscription?: Subscription;\n\n  @Input()\n  display!: boolean;\n\n  @Output()\n  displayChange: EventEmitter<boolean>;\n\n  @Output()\n  onClose: EventEmitter<any>;\n\n  @Input()\n  task?: Task;\n\n  @Output()\n  onSuccess: EventEmitter<Task>;\n\n  taskModel!: PartialTask;\n\n  constructor(private taskService: TaskService) {\n    this.displayChange = new EventEmitter();\n    this.onClose = new EventEmitter();\n    this.onSuccess = new EventEmitter();\n\n    this.onHiddenSubscription = this.modal?.onHidden.subscribe(() => {\n      this.onClose.emit();\n    });\n  }\n\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes.display.currentValue === true) {\n      this.modal?.show();\n    } else {\n      this.modal?.hide();\n    }\n\n    if (changes.task && changes.task.currentValue) {\n      this.taskModel = {name: changes.task.currentValue.name, description: changes.task.currentValue.description};\n    } else {\n      this.taskModel = {name: '', description: ''};\n    }\n  }\n\n  ngOnDestroy(): void {\n    if (this.onHiddenSubscription && !this.onHiddenSubscription.closed) {\n      this.onHiddenSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * Close the current modal instance\n   */\n  close(): void {\n    this.display = false;\n    this.displayChange.emit(false);\n  }\n\n  /**\n   * Create or update a task\n   */\n  createOrUpdate(): void {\n    let promise: Promise<Task>;\n    if (this.task) {\n      promise = this.taskService.updateTask(this.task.id, this.taskModel!);\n    } else {\n      promise = this.taskService.addTask(this.taskModel!);\n    }\n\n    promise.then((updatedTask: Task) => {\n      this.onSuccess.emit(updatedTask);\n      this.close();\n    });\n  }\n}\n","<div mdbModal #modalUpdateTask=\"mdbModal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"\n     aria-labelledby=\"myModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-notify modal-info\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header text-center\">\n        <h4 class=\"modal-title white-text w-100 font-weight-bold py-2\">{{task ? 'UPDATE' : 'ADD'}} TASK</h4>\n        <button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\" (click)=\"close()\">\n          <span aria-hidden=\"true\" class=\"white-text\">&times;</span>\n        </button>\n      </div>\n\n      <div class=\"modal-body\">\n        <div class=\"md-form mb-5\">          \n          <input type=\"text\" class=\"form-control\" mdbInput [(ngModel)]=\"taskModel.name\">\n          <label for=\"form3\">Name</label>          \n        </div>\n\n        <div class=\"md-form\">\n          <textarea type=\"text\" id=\"form2\" class=\"md-textarea form-control\" rows=\"4\" mdbInput [(ngModel)]=\"taskModel.description\"></textarea>\n          <label for=\"form2\">Description</label>\n        </div>\n      </div>\n\n      <div class=\"modal-footer justify-content-center\">\n        <a type=\"button\" mdbBtn color=\"info\" [outline]=\"true\" class=\"waves-effect\" (click)=\"createOrUpdate()\" mdbWavesEffect>\n          <mdb-icon far icon=\"plus-square\" class=\"mr-1\"></mdb-icon>\n          {{task ? 'UPDATE' : 'ADD'}}\n        </a>\n      </div>\n    </div>\n  </div>\n</div>"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}