{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n  return source => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\n\nclass DistinctUntilChangedOperator {\n  constructor(compare, keySelector) {\n    this.compare = compare;\n    this.keySelector = keySelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n  }\n\n}\n\nclass DistinctUntilChangedSubscriber extends Subscriber {\n  constructor(destination, compare, keySelector) {\n    super(destination);\n    this.keySelector = keySelector;\n    this.hasKey = false;\n\n    if (typeof compare === 'function') {\n      this.compare = compare;\n    }\n  }\n\n  compare(x, y) {\n    return x === y;\n  }\n\n  _next(value) {\n    let key;\n\n    try {\n      const {\n        keySelector\n      } = this;\n      key = keySelector ? keySelector(value) : value;\n    } catch (err) {\n      return this.destination.error(err);\n    }\n\n    let result = false;\n\n    if (this.hasKey) {\n      try {\n        const {\n          compare\n        } = this;\n        result = compare(this.key, key);\n      } catch (err) {\n        return this.destination.error(err);\n      }\n    } else {\n      this.hasKey = true;\n    }\n\n    if (!result) {\n      this.key = key;\n      this.destination.next(value);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/distinctUntilChanged.js"],"names":["Subscriber","distinctUntilChanged","compare","keySelector","source","lift","DistinctUntilChangedOperator","constructor","call","subscriber","subscribe","DistinctUntilChangedSubscriber","destination","hasKey","x","y","_next","value","key","err","error","result","next"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,oBAAT,CAA8BC,OAA9B,EAAuCC,WAAvC,EAAoD;AACvD,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,4BAAJ,CAAiCJ,OAAjC,EAA0CC,WAA1C,CAAZ,CAAnB;AACH;;AACD,MAAMG,4BAAN,CAAmC;AAC/BC,EAAAA,WAAW,CAACL,OAAD,EAAUC,WAAV,EAAuB;AAC9B,SAAKD,OAAL,GAAeA,OAAf;AACA,SAAKC,WAAL,GAAmBA,WAAnB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,8BAAJ,CAAmCF,UAAnC,EAA+C,KAAKP,OAApD,EAA6D,KAAKC,WAAlE,CAAjB,CAAP;AACH;;AAP8B;;AASnC,MAAMQ,8BAAN,SAA6CX,UAA7C,CAAwD;AACpDO,EAAAA,WAAW,CAACK,WAAD,EAAcV,OAAd,EAAuBC,WAAvB,EAAoC;AAC3C,UAAMS,WAAN;AACA,SAAKT,WAAL,GAAmBA,WAAnB;AACA,SAAKU,MAAL,GAAc,KAAd;;AACA,QAAI,OAAOX,OAAP,KAAmB,UAAvB,EAAmC;AAC/B,WAAKA,OAAL,GAAeA,OAAf;AACH;AACJ;;AACDA,EAAAA,OAAO,CAACY,CAAD,EAAIC,CAAJ,EAAO;AACV,WAAOD,CAAC,KAAKC,CAAb;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAIC,GAAJ;;AACA,QAAI;AACA,YAAM;AAAEf,QAAAA;AAAF,UAAkB,IAAxB;AACAe,MAAAA,GAAG,GAAGf,WAAW,GAAGA,WAAW,CAACc,KAAD,CAAd,GAAwBA,KAAzC;AACH,KAHD,CAIA,OAAOE,GAAP,EAAY;AACR,aAAO,KAAKP,WAAL,CAAiBQ,KAAjB,CAAuBD,GAAvB,CAAP;AACH;;AACD,QAAIE,MAAM,GAAG,KAAb;;AACA,QAAI,KAAKR,MAAT,EAAiB;AACb,UAAI;AACA,cAAM;AAAEX,UAAAA;AAAF,YAAc,IAApB;AACAmB,QAAAA,MAAM,GAAGnB,OAAO,CAAC,KAAKgB,GAAN,EAAWA,GAAX,CAAhB;AACH,OAHD,CAIA,OAAOC,GAAP,EAAY;AACR,eAAO,KAAKP,WAAL,CAAiBQ,KAAjB,CAAuBD,GAAvB,CAAP;AACH;AACJ,KARD,MASK;AACD,WAAKN,MAAL,GAAc,IAAd;AACH;;AACD,QAAI,CAACQ,MAAL,EAAa;AACT,WAAKH,GAAL,GAAWA,GAAX;AACA,WAAKN,WAAL,CAAiBU,IAAjB,CAAsBL,KAAtB;AACH;AACJ;;AAtCmD","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function distinctUntilChanged(compare, keySelector) {\n    return (source) => source.lift(new DistinctUntilChangedOperator(compare, keySelector));\n}\nclass DistinctUntilChangedOperator {\n    constructor(compare, keySelector) {\n        this.compare = compare;\n        this.keySelector = keySelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DistinctUntilChangedSubscriber(subscriber, this.compare, this.keySelector));\n    }\n}\nclass DistinctUntilChangedSubscriber extends Subscriber {\n    constructor(destination, compare, keySelector) {\n        super(destination);\n        this.keySelector = keySelector;\n        this.hasKey = false;\n        if (typeof compare === 'function') {\n            this.compare = compare;\n        }\n    }\n    compare(x, y) {\n        return x === y;\n    }\n    _next(value) {\n        let key;\n        try {\n            const { keySelector } = this;\n            key = keySelector ? keySelector(value) : value;\n        }\n        catch (err) {\n            return this.destination.error(err);\n        }\n        let result = false;\n        if (this.hasKey) {\n            try {\n                const { compare } = this;\n                result = compare(this.key, key);\n            }\n            catch (err) {\n                return this.destination.error(err);\n            }\n        }\n        else {\n            this.hasKey = true;\n        }\n        if (!result) {\n            this.key = key;\n            this.destination.next(value);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}