{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n  return function observeOnOperatorFunction(source) {\n    return source.lift(new ObserveOnOperator(scheduler, delay));\n  };\n}\nexport class ObserveOnOperator {\n  constructor(scheduler, delay = 0) {\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n  }\n\n}\nexport class ObserveOnSubscriber extends Subscriber {\n  constructor(destination, scheduler, delay = 0) {\n    super(destination);\n    this.scheduler = scheduler;\n    this.delay = delay;\n  }\n\n  static dispatch(arg) {\n    const {\n      notification,\n      destination\n    } = arg;\n    notification.observe(destination);\n    this.unsubscribe();\n  }\n\n  scheduleMessage(notification) {\n    const destination = this.destination;\n    destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n  }\n\n  _next(value) {\n    this.scheduleMessage(Notification.createNext(value));\n  }\n\n  _error(err) {\n    this.scheduleMessage(Notification.createError(err));\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.scheduleMessage(Notification.createComplete());\n    this.unsubscribe();\n  }\n\n}\nexport class ObserveOnMessage {\n  constructor(notification, destination) {\n    this.notification = notification;\n    this.destination = destination;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/observeOn.js"],"names":["Subscriber","Notification","observeOn","scheduler","delay","observeOnOperatorFunction","source","lift","ObserveOnOperator","constructor","call","subscriber","subscribe","ObserveOnSubscriber","destination","dispatch","arg","notification","observe","unsubscribe","scheduleMessage","add","schedule","ObserveOnMessage","_next","value","createNext","_error","err","createError","_complete","createComplete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,YAAT,QAA6B,iBAA7B;AACA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,KAAK,GAAG,CAAtC,EAAyC;AAC5C,SAAO,SAASC,yBAAT,CAAmCC,MAAnC,EAA2C;AAC9C,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBL,SAAtB,EAAiCC,KAAjC,CAAZ,CAAP;AACH,GAFD;AAGH;AACD,OAAO,MAAMI,iBAAN,CAAwB;AAC3BC,EAAAA,WAAW,CAACN,SAAD,EAAYC,KAAK,GAAG,CAApB,EAAuB;AAC9B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACDM,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKR,SAAzC,EAAoD,KAAKC,KAAzD,CAAjB,CAAP;AACH;;AAP0B;AAS/B,OAAO,MAAMS,mBAAN,SAAkCb,UAAlC,CAA6C;AAChDS,EAAAA,WAAW,CAACK,WAAD,EAAcX,SAAd,EAAyBC,KAAK,GAAG,CAAjC,EAAoC;AAC3C,UAAMU,WAAN;AACA,SAAKX,SAAL,GAAiBA,SAAjB;AACA,SAAKC,KAAL,GAAaA,KAAb;AACH;;AACc,SAARW,QAAQ,CAACC,GAAD,EAAM;AACjB,UAAM;AAAEC,MAAAA,YAAF;AAAgBH,MAAAA;AAAhB,QAAgCE,GAAtC;AACAC,IAAAA,YAAY,CAACC,OAAb,CAAqBJ,WAArB;AACA,SAAKK,WAAL;AACH;;AACDC,EAAAA,eAAe,CAACH,YAAD,EAAe;AAC1B,UAAMH,WAAW,GAAG,KAAKA,WAAzB;AACAA,IAAAA,WAAW,CAACO,GAAZ,CAAgB,KAAKlB,SAAL,CAAemB,QAAf,CAAwBT,mBAAmB,CAACE,QAA5C,EAAsD,KAAKX,KAA3D,EAAkE,IAAImB,gBAAJ,CAAqBN,YAArB,EAAmC,KAAKH,WAAxC,CAAlE,CAAhB;AACH;;AACDU,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKL,eAAL,CAAqBnB,YAAY,CAACyB,UAAb,CAAwBD,KAAxB,CAArB;AACH;;AACDE,EAAAA,MAAM,CAACC,GAAD,EAAM;AACR,SAAKR,eAAL,CAAqBnB,YAAY,CAAC4B,WAAb,CAAyBD,GAAzB,CAArB;AACA,SAAKT,WAAL;AACH;;AACDW,EAAAA,SAAS,GAAG;AACR,SAAKV,eAAL,CAAqBnB,YAAY,CAAC8B,cAAb,EAArB;AACA,SAAKZ,WAAL;AACH;;AAzB+C;AA2BpD,OAAO,MAAMI,gBAAN,CAAuB;AAC1Bd,EAAAA,WAAW,CAACQ,YAAD,EAAeH,WAAf,EAA4B;AACnC,SAAKG,YAAL,GAAoBA,YAApB;AACA,SAAKH,WAAL,GAAmBA,WAAnB;AACH;;AAJyB","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function observeOn(scheduler, delay = 0) {\n    return function observeOnOperatorFunction(source) {\n        return source.lift(new ObserveOnOperator(scheduler, delay));\n    };\n}\nexport class ObserveOnOperator {\n    constructor(scheduler, delay = 0) {\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new ObserveOnSubscriber(subscriber, this.scheduler, this.delay));\n    }\n}\nexport class ObserveOnSubscriber extends Subscriber {\n    constructor(destination, scheduler, delay = 0) {\n        super(destination);\n        this.scheduler = scheduler;\n        this.delay = delay;\n    }\n    static dispatch(arg) {\n        const { notification, destination } = arg;\n        notification.observe(destination);\n        this.unsubscribe();\n    }\n    scheduleMessage(notification) {\n        const destination = this.destination;\n        destination.add(this.scheduler.schedule(ObserveOnSubscriber.dispatch, this.delay, new ObserveOnMessage(notification, this.destination)));\n    }\n    _next(value) {\n        this.scheduleMessage(Notification.createNext(value));\n    }\n    _error(err) {\n        this.scheduleMessage(Notification.createError(err));\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleMessage(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nexport class ObserveOnMessage {\n    constructor(notification, destination) {\n        this.notification = notification;\n        this.destination = destination;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}