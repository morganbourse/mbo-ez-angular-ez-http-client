{"ast":null,"code":"import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n    }\n  }\n\n  return function (...args) {\n    const params = {\n      subject: undefined,\n      args,\n      callbackFunc,\n      scheduler,\n      context: this\n    };\n    return new Observable(subscriber => {\n      const {\n        context\n      } = params;\n      let {\n        subject\n      } = params;\n\n      if (!scheduler) {\n        if (!subject) {\n          subject = params.subject = new AsyncSubject();\n\n          const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n\n            if (err) {\n              subject.error(err);\n              return;\n            }\n\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          };\n\n          try {\n            callbackFunc.apply(context, [...args, handler]);\n          } catch (err) {\n            if (canReportError(subject)) {\n              subject.error(err);\n            } else {\n              console.warn(err);\n            }\n          }\n        }\n\n        return subject.subscribe(subscriber);\n      } else {\n        return scheduler.schedule(dispatch, 0, {\n          params,\n          subscriber,\n          context\n        });\n      }\n    });\n  };\n}\n\nfunction dispatch(state) {\n  const {\n    params,\n    subscriber,\n    context\n  } = state;\n  const {\n    callbackFunc,\n    args,\n    scheduler\n  } = params;\n  let subject = params.subject;\n\n  if (!subject) {\n    subject = params.subject = new AsyncSubject();\n\n    const handler = (...innerArgs) => {\n      const err = innerArgs.shift();\n\n      if (err) {\n        this.add(scheduler.schedule(dispatchError, 0, {\n          err,\n          subject\n        }));\n      } else {\n        const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        this.add(scheduler.schedule(dispatchNext, 0, {\n          value,\n          subject\n        }));\n      }\n    };\n\n    try {\n      callbackFunc.apply(context, [...args, handler]);\n    } catch (err) {\n      this.add(scheduler.schedule(dispatchError, 0, {\n        err,\n        subject\n      }));\n    }\n  }\n\n  this.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(arg) {\n  const {\n    value,\n    subject\n  } = arg;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(arg) {\n  const {\n    err,\n    subject\n  } = arg;\n  subject.error(err);\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/observable/bindNodeCallback.js"],"names":["Observable","AsyncSubject","map","canReportError","isScheduler","isArray","bindNodeCallback","callbackFunc","resultSelector","scheduler","args","pipe","params","subject","undefined","context","subscriber","handler","innerArgs","err","shift","error","next","length","complete","apply","console","warn","subscribe","schedule","dispatch","state","add","dispatchError","value","dispatchNext","arg"],"mappings":"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","sourcesContent":["import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { map } from '../operators/map';\nimport { canReportError } from '../util/canReportError';\nimport { isScheduler } from '../util/isScheduler';\nimport { isArray } from '../util/isArray';\nexport function bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n    if (resultSelector) {\n        if (isScheduler(resultSelector)) {\n            scheduler = resultSelector;\n        }\n        else {\n            return (...args) => bindNodeCallback(callbackFunc, scheduler)(...args).pipe(map(args => isArray(args) ? resultSelector(...args) : resultSelector(args)));\n        }\n    }\n    return function (...args) {\n        const params = {\n            subject: undefined,\n            args,\n            callbackFunc,\n            scheduler,\n            context: this,\n        };\n        return new Observable(subscriber => {\n            const { context } = params;\n            let { subject } = params;\n            if (!scheduler) {\n                if (!subject) {\n                    subject = params.subject = new AsyncSubject();\n                    const handler = (...innerArgs) => {\n                        const err = innerArgs.shift();\n                        if (err) {\n                            subject.error(err);\n                            return;\n                        }\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    };\n                    try {\n                        callbackFunc.apply(context, [...args, handler]);\n                    }\n                    catch (err) {\n                        if (canReportError(subject)) {\n                            subject.error(err);\n                        }\n                        else {\n                            console.warn(err);\n                        }\n                    }\n                }\n                return subject.subscribe(subscriber);\n            }\n            else {\n                return scheduler.schedule(dispatch, 0, { params, subscriber, context });\n            }\n        });\n    };\n}\nfunction dispatch(state) {\n    const { params, subscriber, context } = state;\n    const { callbackFunc, args, scheduler } = params;\n    let subject = params.subject;\n    if (!subject) {\n        subject = params.subject = new AsyncSubject();\n        const handler = (...innerArgs) => {\n            const err = innerArgs.shift();\n            if (err) {\n                this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n            }\n            else {\n                const value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                this.add(scheduler.schedule(dispatchNext, 0, { value, subject }));\n            }\n        };\n        try {\n            callbackFunc.apply(context, [...args, handler]);\n        }\n        catch (err) {\n            this.add(scheduler.schedule(dispatchError, 0, { err, subject }));\n        }\n    }\n    this.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    const { value, subject } = arg;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    const { err, subject } = arg;\n    subject.error(err);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}