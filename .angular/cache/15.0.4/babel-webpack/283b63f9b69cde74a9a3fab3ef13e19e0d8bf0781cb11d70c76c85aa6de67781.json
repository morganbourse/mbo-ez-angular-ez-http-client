{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n  return function windowOperatorFunction(source) {\n    return source.lift(new WindowOperator(windowBoundaries));\n  };\n}\n\nclass WindowOperator {\n  constructor(windowBoundaries) {\n    this.windowBoundaries = windowBoundaries;\n  }\n\n  call(subscriber, source) {\n    const windowSubscriber = new WindowSubscriber(subscriber);\n    const sourceSubscription = source.subscribe(windowSubscriber);\n\n    if (!sourceSubscription.closed) {\n      windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n    }\n\n    return sourceSubscription;\n  }\n\n}\n\nclass WindowSubscriber extends SimpleOuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.window = new Subject();\n    destination.next(this.window);\n  }\n\n  notifyNext() {\n    this.openWindow();\n  }\n\n  notifyError(error) {\n    this._error(error);\n  }\n\n  notifyComplete() {\n    this._complete();\n  }\n\n  _next(value) {\n    this.window.next(value);\n  }\n\n  _error(err) {\n    this.window.error(err);\n    this.destination.error(err);\n  }\n\n  _complete() {\n    this.window.complete();\n    this.destination.complete();\n  }\n\n  _unsubscribe() {\n    this.window = null;\n  }\n\n  openWindow() {\n    const prevWindow = this.window;\n\n    if (prevWindow) {\n      prevWindow.complete();\n    }\n\n    const destination = this.destination;\n    const newWindow = this.window = new Subject();\n    destination.next(newWindow);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/window.js"],"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","window","windowBoundaries","windowOperatorFunction","source","lift","WindowOperator","constructor","call","subscriber","windowSubscriber","WindowSubscriber","sourceSubscription","subscribe","closed","add","destination","next","notifyNext","openWindow","notifyError","error","_error","notifyComplete","_complete","_next","value","err","complete","_unsubscribe","prevWindow","newWindow"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,MAAT,CAAgBC,gBAAhB,EAAkC;AACrC,SAAO,SAASC,sBAAT,CAAgCC,MAAhC,EAAwC;AAC3C,WAAOA,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmBJ,gBAAnB,CAAZ,CAAP;AACH,GAFD;AAGH;;AACD,MAAMI,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACL,gBAAD,EAAmB;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;;AACDM,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,UAAMM,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqBF,UAArB,CAAzB;AACA,UAAMG,kBAAkB,GAAGR,MAAM,CAACS,SAAP,CAAiBH,gBAAjB,CAA3B;;AACA,QAAI,CAACE,kBAAkB,CAACE,MAAxB,EAAgC;AAC5BJ,MAAAA,gBAAgB,CAACK,GAAjB,CAAqBhB,cAAc,CAAC,KAAKG,gBAAN,EAAwB,IAAIF,qBAAJ,CAA0BU,gBAA1B,CAAxB,CAAnC;AACH;;AACD,WAAOE,kBAAP;AACH;;AAXgB;;AAarB,MAAMD,gBAAN,SAA+Bb,qBAA/B,CAAqD;AACjDS,EAAAA,WAAW,CAACS,WAAD,EAAc;AACrB,UAAMA,WAAN;AACA,SAAKf,MAAL,GAAc,IAAIJ,OAAJ,EAAd;AACAmB,IAAAA,WAAW,CAACC,IAAZ,CAAiB,KAAKhB,MAAtB;AACH;;AACDiB,EAAAA,UAAU,GAAG;AACT,SAAKC,UAAL;AACH;;AACDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKC,MAAL,CAAYD,KAAZ;AACH;;AACDE,EAAAA,cAAc,GAAG;AACb,SAAKC,SAAL;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKzB,MAAL,CAAYgB,IAAZ,CAAiBS,KAAjB;AACH;;AACDJ,EAAAA,MAAM,CAACK,GAAD,EAAM;AACR,SAAK1B,MAAL,CAAYoB,KAAZ,CAAkBM,GAAlB;AACA,SAAKX,WAAL,CAAiBK,KAAjB,CAAuBM,GAAvB;AACH;;AACDH,EAAAA,SAAS,GAAG;AACR,SAAKvB,MAAL,CAAY2B,QAAZ;AACA,SAAKZ,WAAL,CAAiBY,QAAjB;AACH;;AACDC,EAAAA,YAAY,GAAG;AACX,SAAK5B,MAAL,GAAc,IAAd;AACH;;AACDkB,EAAAA,UAAU,GAAG;AACT,UAAMW,UAAU,GAAG,KAAK7B,MAAxB;;AACA,QAAI6B,UAAJ,EAAgB;AACZA,MAAAA,UAAU,CAACF,QAAX;AACH;;AACD,UAAMZ,WAAW,GAAG,KAAKA,WAAzB;AACA,UAAMe,SAAS,GAAG,KAAK9B,MAAL,GAAc,IAAIJ,OAAJ,EAAhC;AACAmB,IAAAA,WAAW,CAACC,IAAZ,CAAiBc,SAAjB;AACH;;AArCgD","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function window(windowBoundaries) {\n    return function windowOperatorFunction(source) {\n        return source.lift(new WindowOperator(windowBoundaries));\n    };\n}\nclass WindowOperator {\n    constructor(windowBoundaries) {\n        this.windowBoundaries = windowBoundaries;\n    }\n    call(subscriber, source) {\n        const windowSubscriber = new WindowSubscriber(subscriber);\n        const sourceSubscription = source.subscribe(windowSubscriber);\n        if (!sourceSubscription.closed) {\n            windowSubscriber.add(innerSubscribe(this.windowBoundaries, new SimpleInnerSubscriber(windowSubscriber)));\n        }\n        return sourceSubscription;\n    }\n}\nclass WindowSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.window = new Subject();\n        destination.next(this.window);\n    }\n    notifyNext() {\n        this.openWindow();\n    }\n    notifyError(error) {\n        this._error(error);\n    }\n    notifyComplete() {\n        this._complete();\n    }\n    _next(value) {\n        this.window.next(value);\n    }\n    _error(err) {\n        this.window.error(err);\n        this.destination.error(err);\n    }\n    _complete() {\n        this.window.complete();\n        this.destination.complete();\n    }\n    _unsubscribe() {\n        this.window = null;\n    }\n    openWindow() {\n        const prevWindow = this.window;\n        if (prevWindow) {\n            prevWindow.complete();\n        }\n        const destination = this.destination;\n        const newWindow = this.window = new Subject();\n        destination.next(newWindow);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}