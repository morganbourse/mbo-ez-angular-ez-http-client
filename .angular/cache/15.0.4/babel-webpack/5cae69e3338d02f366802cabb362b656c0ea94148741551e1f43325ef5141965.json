{"ast":null,"code":"import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n  const absoluteDelay = isDate(delay);\n  const delayFor = absoluteDelay ? +delay - scheduler.now() : Math.abs(delay);\n  return source => source.lift(new DelayOperator(delayFor, scheduler));\n}\n\nclass DelayOperator {\n  constructor(delay, scheduler) {\n    this.delay = delay;\n    this.scheduler = scheduler;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n  }\n\n}\n\nclass DelaySubscriber extends Subscriber {\n  constructor(destination, delay, scheduler) {\n    super(destination);\n    this.delay = delay;\n    this.scheduler = scheduler;\n    this.queue = [];\n    this.active = false;\n    this.errored = false;\n  }\n\n  static dispatch(state) {\n    const source = state.source;\n    const queue = source.queue;\n    const scheduler = state.scheduler;\n    const destination = state.destination;\n\n    while (queue.length > 0 && queue[0].time - scheduler.now() <= 0) {\n      queue.shift().notification.observe(destination);\n    }\n\n    if (queue.length > 0) {\n      const delay = Math.max(0, queue[0].time - scheduler.now());\n      this.schedule(state, delay);\n    } else {\n      this.unsubscribe();\n      source.active = false;\n    }\n  }\n\n  _schedule(scheduler) {\n    this.active = true;\n    const destination = this.destination;\n    destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n      source: this,\n      destination: this.destination,\n      scheduler: scheduler\n    }));\n  }\n\n  scheduleNotification(notification) {\n    if (this.errored === true) {\n      return;\n    }\n\n    const scheduler = this.scheduler;\n    const message = new DelayMessage(scheduler.now() + this.delay, notification);\n    this.queue.push(message);\n\n    if (this.active === false) {\n      this._schedule(scheduler);\n    }\n  }\n\n  _next(value) {\n    this.scheduleNotification(Notification.createNext(value));\n  }\n\n  _error(err) {\n    this.errored = true;\n    this.queue = [];\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  _complete() {\n    this.scheduleNotification(Notification.createComplete());\n    this.unsubscribe();\n  }\n\n}\n\nclass DelayMessage {\n  constructor(time, notification) {\n    this.time = time;\n    this.notification = notification;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/delay.js"],"names":["async","isDate","Subscriber","Notification","delay","scheduler","absoluteDelay","delayFor","now","Math","abs","source","lift","DelayOperator","constructor","call","subscriber","subscribe","DelaySubscriber","destination","queue","active","errored","dispatch","state","length","time","shift","notification","observe","max","schedule","unsubscribe","_schedule","add","scheduleNotification","message","DelayMessage","push","_next","value","createNext","_error","err","error","_complete","createComplete"],"mappings":"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","sourcesContent":["import { async } from '../scheduler/async';\nimport { isDate } from '../util/isDate';\nimport { Subscriber } from '../Subscriber';\nimport { Notification } from '../Notification';\nexport function delay(delay, scheduler = async) {\n    const absoluteDelay = isDate(delay);\n    const delayFor = absoluteDelay ? (+delay - scheduler.now()) : Math.abs(delay);\n    return (source) => source.lift(new DelayOperator(delayFor, scheduler));\n}\nclass DelayOperator {\n    constructor(delay, scheduler) {\n        this.delay = delay;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DelaySubscriber(subscriber, this.delay, this.scheduler));\n    }\n}\nclass DelaySubscriber extends Subscriber {\n    constructor(destination, delay, scheduler) {\n        super(destination);\n        this.delay = delay;\n        this.scheduler = scheduler;\n        this.queue = [];\n        this.active = false;\n        this.errored = false;\n    }\n    static dispatch(state) {\n        const source = state.source;\n        const queue = source.queue;\n        const scheduler = state.scheduler;\n        const destination = state.destination;\n        while (queue.length > 0 && (queue[0].time - scheduler.now()) <= 0) {\n            queue.shift().notification.observe(destination);\n        }\n        if (queue.length > 0) {\n            const delay = Math.max(0, queue[0].time - scheduler.now());\n            this.schedule(state, delay);\n        }\n        else {\n            this.unsubscribe();\n            source.active = false;\n        }\n    }\n    _schedule(scheduler) {\n        this.active = true;\n        const destination = this.destination;\n        destination.add(scheduler.schedule(DelaySubscriber.dispatch, this.delay, {\n            source: this, destination: this.destination, scheduler: scheduler\n        }));\n    }\n    scheduleNotification(notification) {\n        if (this.errored === true) {\n            return;\n        }\n        const scheduler = this.scheduler;\n        const message = new DelayMessage(scheduler.now() + this.delay, notification);\n        this.queue.push(message);\n        if (this.active === false) {\n            this._schedule(scheduler);\n        }\n    }\n    _next(value) {\n        this.scheduleNotification(Notification.createNext(value));\n    }\n    _error(err) {\n        this.errored = true;\n        this.queue = [];\n        this.destination.error(err);\n        this.unsubscribe();\n    }\n    _complete() {\n        this.scheduleNotification(Notification.createComplete());\n        this.unsubscribe();\n    }\n}\nclass DelayMessage {\n    constructor(time, notification) {\n        this.time = time;\n        this.notification = notification;\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}