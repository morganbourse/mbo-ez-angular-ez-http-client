{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n  return source => source.lift(new EveryOperator(predicate, thisArg, source));\n}\n\nclass EveryOperator {\n  constructor(predicate, thisArg, source) {\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n  }\n\n  call(observer, source) {\n    return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n  }\n\n}\n\nclass EverySubscriber extends Subscriber {\n  constructor(destination, predicate, thisArg, source) {\n    super(destination);\n    this.predicate = predicate;\n    this.thisArg = thisArg;\n    this.source = source;\n    this.index = 0;\n    this.thisArg = thisArg || this;\n  }\n\n  notifyComplete(everyValueMatch) {\n    this.destination.next(everyValueMatch);\n    this.destination.complete();\n  }\n\n  _next(value) {\n    let result = false;\n\n    try {\n      result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    if (!result) {\n      this.notifyComplete(false);\n    }\n  }\n\n  _complete() {\n    this.notifyComplete(true);\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/every.js"],"names":["Subscriber","every","predicate","thisArg","source","lift","EveryOperator","constructor","call","observer","subscribe","EverySubscriber","destination","index","notifyComplete","everyValueMatch","next","complete","_next","value","result","err","error","_complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,KAAT,CAAeC,SAAf,EAA0BC,OAA1B,EAAmC;AACtC,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,aAAJ,CAAkBJ,SAAlB,EAA6BC,OAA7B,EAAsCC,MAAtC,CAAZ,CAAnB;AACH;;AACD,MAAME,aAAN,CAAoB;AAChBC,EAAAA,WAAW,CAACL,SAAD,EAAYC,OAAZ,EAAqBC,MAArB,EAA6B;AACpC,SAAKF,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AACDI,EAAAA,IAAI,CAACC,QAAD,EAAWL,MAAX,EAAmB;AACnB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,eAAJ,CAAoBF,QAApB,EAA8B,KAAKP,SAAnC,EAA8C,KAAKC,OAAnD,EAA4D,KAAKC,MAAjE,CAAjB,CAAP;AACH;;AARe;;AAUpB,MAAMO,eAAN,SAA8BX,UAA9B,CAAyC;AACrCO,EAAAA,WAAW,CAACK,WAAD,EAAcV,SAAd,EAAyBC,OAAzB,EAAkCC,MAAlC,EAA0C;AACjD,UAAMQ,WAAN;AACA,SAAKV,SAAL,GAAiBA,SAAjB;AACA,SAAKC,OAAL,GAAeA,OAAf;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKS,KAAL,GAAa,CAAb;AACA,SAAKV,OAAL,GAAeA,OAAO,IAAI,IAA1B;AACH;;AACDW,EAAAA,cAAc,CAACC,eAAD,EAAkB;AAC5B,SAAKH,WAAL,CAAiBI,IAAjB,CAAsBD,eAAtB;AACA,SAAKH,WAAL,CAAiBK,QAAjB;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAIC,MAAM,GAAG,KAAb;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,KAAKlB,SAAL,CAAeM,IAAf,CAAoB,KAAKL,OAAzB,EAAkCgB,KAAlC,EAAyC,KAAKN,KAAL,EAAzC,EAAuD,KAAKT,MAA5D,CAAT;AACH,KAFD,CAGA,OAAOiB,GAAP,EAAY;AACR,WAAKT,WAAL,CAAiBU,KAAjB,CAAuBD,GAAvB;AACA;AACH;;AACD,QAAI,CAACD,MAAL,EAAa;AACT,WAAKN,cAAL,CAAoB,KAApB;AACH;AACJ;;AACDS,EAAAA,SAAS,GAAG;AACR,SAAKT,cAAL,CAAoB,IAApB;AACH;;AA5BoC","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function every(predicate, thisArg) {\n    return (source) => source.lift(new EveryOperator(predicate, thisArg, source));\n}\nclass EveryOperator {\n    constructor(predicate, thisArg, source) {\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n    }\n    call(observer, source) {\n        return source.subscribe(new EverySubscriber(observer, this.predicate, this.thisArg, this.source));\n    }\n}\nclass EverySubscriber extends Subscriber {\n    constructor(destination, predicate, thisArg, source) {\n        super(destination);\n        this.predicate = predicate;\n        this.thisArg = thisArg;\n        this.source = source;\n        this.index = 0;\n        this.thisArg = thisArg || this;\n    }\n    notifyComplete(everyValueMatch) {\n        this.destination.next(everyValueMatch);\n        this.destination.complete();\n    }\n    _next(value) {\n        let result = false;\n        try {\n            result = this.predicate.call(this.thisArg, value, this.index++, this.source);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        if (!result) {\n            this.notifyComplete(false);\n        }\n    }\n    _complete() {\n        this.notifyComplete(true);\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}