{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n  return source => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\n\nclass TakeWhileOperator {\n  constructor(predicate, inclusive) {\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n  }\n\n}\n\nclass TakeWhileSubscriber extends Subscriber {\n  constructor(destination, predicate, inclusive) {\n    super(destination);\n    this.predicate = predicate;\n    this.inclusive = inclusive;\n    this.index = 0;\n  }\n\n  _next(value) {\n    const destination = this.destination;\n    let result;\n\n    try {\n      result = this.predicate(value, this.index++);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this.nextOrComplete(value, result);\n  }\n\n  nextOrComplete(value, predicateResult) {\n    const destination = this.destination;\n\n    if (Boolean(predicateResult)) {\n      destination.next(value);\n    } else {\n      if (this.inclusive) {\n        destination.next(value);\n      }\n\n      destination.complete();\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/takeWhile.js"],"names":["Subscriber","takeWhile","predicate","inclusive","source","lift","TakeWhileOperator","constructor","call","subscriber","subscribe","TakeWhileSubscriber","destination","index","_next","value","result","err","error","nextOrComplete","predicateResult","Boolean","next","complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,SAAT,CAAmBC,SAAnB,EAA8BC,SAAS,GAAG,KAA1C,EAAiD;AACpD,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBJ,SAAtB,EAAiCC,SAAjC,CAAZ,CAAnB;AACH;;AACD,MAAMG,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACL,SAAD,EAAYC,SAAZ,EAAuB;AAC9B,SAAKD,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,mBAAJ,CAAwBF,UAAxB,EAAoC,KAAKP,SAAzC,EAAoD,KAAKC,SAAzD,CAAjB,CAAP;AACH;;AAPmB;;AASxB,MAAMQ,mBAAN,SAAkCX,UAAlC,CAA6C;AACzCO,EAAAA,WAAW,CAACK,WAAD,EAAcV,SAAd,EAAyBC,SAAzB,EAAoC;AAC3C,UAAMS,WAAN;AACA,SAAKV,SAAL,GAAiBA,SAAjB;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKU,KAAL,GAAa,CAAb;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,UAAMH,WAAW,GAAG,KAAKA,WAAzB;AACA,QAAII,MAAJ;;AACA,QAAI;AACAA,MAAAA,MAAM,GAAG,KAAKd,SAAL,CAAea,KAAf,EAAsB,KAAKF,KAAL,EAAtB,CAAT;AACH,KAFD,CAGA,OAAOI,GAAP,EAAY;AACRL,MAAAA,WAAW,CAACM,KAAZ,CAAkBD,GAAlB;AACA;AACH;;AACD,SAAKE,cAAL,CAAoBJ,KAApB,EAA2BC,MAA3B;AACH;;AACDG,EAAAA,cAAc,CAACJ,KAAD,EAAQK,eAAR,EAAyB;AACnC,UAAMR,WAAW,GAAG,KAAKA,WAAzB;;AACA,QAAIS,OAAO,CAACD,eAAD,CAAX,EAA8B;AAC1BR,MAAAA,WAAW,CAACU,IAAZ,CAAiBP,KAAjB;AACH,KAFD,MAGK;AACD,UAAI,KAAKZ,SAAT,EAAoB;AAChBS,QAAAA,WAAW,CAACU,IAAZ,CAAiBP,KAAjB;AACH;;AACDH,MAAAA,WAAW,CAACW,QAAZ;AACH;AACJ;;AA9BwC","sourcesContent":["import { Subscriber } from '../Subscriber';\nexport function takeWhile(predicate, inclusive = false) {\n    return (source) => source.lift(new TakeWhileOperator(predicate, inclusive));\n}\nclass TakeWhileOperator {\n    constructor(predicate, inclusive) {\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeWhileSubscriber(subscriber, this.predicate, this.inclusive));\n    }\n}\nclass TakeWhileSubscriber extends Subscriber {\n    constructor(destination, predicate, inclusive) {\n        super(destination);\n        this.predicate = predicate;\n        this.inclusive = inclusive;\n        this.index = 0;\n    }\n    _next(value) {\n        const destination = this.destination;\n        let result;\n        try {\n            result = this.predicate(value, this.index++);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this.nextOrComplete(value, result);\n    }\n    nextOrComplete(value, predicateResult) {\n        const destination = this.destination;\n        if (Boolean(predicateResult)) {\n            destination.next(value);\n        }\n        else {\n            if (this.inclusive) {\n                destination.next(value);\n            }\n            destination.complete();\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}