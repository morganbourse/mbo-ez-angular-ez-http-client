{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n  return source => source.lift(new SampleTimeOperator(period, scheduler));\n}\n\nclass SampleTimeOperator {\n  constructor(period, scheduler) {\n    this.period = period;\n    this.scheduler = scheduler;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n  }\n\n}\n\nclass SampleTimeSubscriber extends Subscriber {\n  constructor(destination, period, scheduler) {\n    super(destination);\n    this.period = period;\n    this.scheduler = scheduler;\n    this.hasValue = false;\n    this.add(scheduler.schedule(dispatchNotification, period, {\n      subscriber: this,\n      period\n    }));\n  }\n\n  _next(value) {\n    this.lastValue = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.lastValue);\n    }\n  }\n\n}\n\nfunction dispatchNotification(state) {\n  let {\n    subscriber,\n    period\n  } = state;\n  subscriber.notifyNext();\n  this.schedule(state, period);\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/sampleTime.js"],"names":["Subscriber","async","sampleTime","period","scheduler","source","lift","SampleTimeOperator","constructor","call","subscriber","subscribe","SampleTimeSubscriber","destination","hasValue","add","schedule","dispatchNotification","_next","value","lastValue","notifyNext","next","state"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,KAAT,QAAsB,oBAAtB;AACA,OAAO,SAASC,UAAT,CAAoBC,MAApB,EAA4BC,SAAS,GAAGH,KAAxC,EAA+C;AAClD,SAAQI,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBJ,MAAvB,EAA+BC,SAA/B,CAAZ,CAAnB;AACH;;AACD,MAAMG,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACL,MAAD,EAASC,SAAT,EAAoB;AAC3B,SAAKD,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKP,MAA1C,EAAkD,KAAKC,SAAvD,CAAjB,CAAP;AACH;;AAPoB;;AASzB,MAAMQ,oBAAN,SAAmCZ,UAAnC,CAA8C;AAC1CQ,EAAAA,WAAW,CAACK,WAAD,EAAcV,MAAd,EAAsBC,SAAtB,EAAiC;AACxC,UAAMS,WAAN;AACA,SAAKV,MAAL,GAAcA,MAAd;AACA,SAAKC,SAAL,GAAiBA,SAAjB;AACA,SAAKU,QAAL,GAAgB,KAAhB;AACA,SAAKC,GAAL,CAASX,SAAS,CAACY,QAAV,CAAmBC,oBAAnB,EAAyCd,MAAzC,EAAiD;AAAEO,MAAAA,UAAU,EAAE,IAAd;AAAoBP,MAAAA;AAApB,KAAjD,CAAT;AACH;;AACDe,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKC,SAAL,GAAiBD,KAAjB;AACA,SAAKL,QAAL,GAAgB,IAAhB;AACH;;AACDO,EAAAA,UAAU,GAAG;AACT,QAAI,KAAKP,QAAT,EAAmB;AACf,WAAKA,QAAL,GAAgB,KAAhB;AACA,WAAKD,WAAL,CAAiBS,IAAjB,CAAsB,KAAKF,SAA3B;AACH;AACJ;;AAjByC;;AAmB9C,SAASH,oBAAT,CAA8BM,KAA9B,EAAqC;AACjC,MAAI;AAAEb,IAAAA,UAAF;AAAcP,IAAAA;AAAd,MAAyBoB,KAA7B;AACAb,EAAAA,UAAU,CAACW,UAAX;AACA,OAAKL,QAAL,CAAcO,KAAd,EAAqBpB,MAArB;AACH","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { async } from '../scheduler/async';\nexport function sampleTime(period, scheduler = async) {\n    return (source) => source.lift(new SampleTimeOperator(period, scheduler));\n}\nclass SampleTimeOperator {\n    constructor(period, scheduler) {\n        this.period = period;\n        this.scheduler = scheduler;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new SampleTimeSubscriber(subscriber, this.period, this.scheduler));\n    }\n}\nclass SampleTimeSubscriber extends Subscriber {\n    constructor(destination, period, scheduler) {\n        super(destination);\n        this.period = period;\n        this.scheduler = scheduler;\n        this.hasValue = false;\n        this.add(scheduler.schedule(dispatchNotification, period, { subscriber: this, period }));\n    }\n    _next(value) {\n        this.lastValue = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.lastValue);\n        }\n    }\n}\nfunction dispatchNotification(state) {\n    let { subscriber, period } = state;\n    subscriber.notifyNext();\n    this.schedule(state, period);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}