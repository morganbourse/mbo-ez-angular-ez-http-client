{"ast":null,"code":"import * as i1 from '@angular/common/http';\nimport * as i0 from '@angular/core';\nimport { Injectable } from '@angular/core';\nimport 'reflect-metadata';\nvar EzHttpRequestMethod;\n\n(function (EzHttpRequestMethod) {\n  EzHttpRequestMethod[EzHttpRequestMethod[\"DELETE\"] = 0] = \"DELETE\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"GET\"] = 1] = \"GET\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"HEAD\"] = 2] = \"HEAD\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"OPTIONS\"] = 3] = \"OPTIONS\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"PATCH\"] = 4] = \"PATCH\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"POST\"] = 5] = \"POST\";\n  EzHttpRequestMethod[EzHttpRequestMethod[\"PUT\"] = 6] = \"PUT\";\n})(EzHttpRequestMethod || (EzHttpRequestMethod = {}));\n\nfunction EzHttpClient(apiPath, module) {\n  return function (targetClass) {\n    if (!apiPath || apiPath.length === 0) {\n      apiPath = '';\n    }\n\n    const apiBasePathDescriptor = {\n      enumerable: true,\n      configurable: true,\n      writable: false,\n      value: apiPath\n    };\n    Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\n\n    class EzHttpClientDecoratedClass extends targetClass {\n      constructor(http) {\n        super();\n        this.http = http;\n        const httpClientPropertyDescriptor = {\n          enumerable: true,\n          configurable: true,\n          writable: false,\n          value: http\n        };\n        Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\n      }\n\n    }\n\n    EzHttpClientDecoratedClass.ɵfac = function EzHttpClientDecoratedClass_Factory(t) {\n      return new (t || EzHttpClientDecoratedClass)(i0.ɵɵinject(i1.HttpClient));\n    };\n\n    EzHttpClientDecoratedClass.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n      token: EzHttpClientDecoratedClass,\n      factory: EzHttpClientDecoratedClass.ɵfac,\n      providedIn: module || 'root'\n    });\n\n    (function () {\n      (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(EzHttpClientDecoratedClass, [{\n        type: Injectable,\n        args: [{\n          providedIn: module || 'root'\n        }]\n      }], function () {\n        return [{\n          type: i1.HttpClient\n        }];\n      }, null);\n    })();\n\n    return EzHttpClientDecoratedClass;\n  };\n}\n\nfunction EzHttpClientHeaders(headers) {\n  return function (targetClass) {\n    if (!headers) {\n      headers = {};\n    }\n\n    const apiHeadersDescriptor = {\n      enumerable: true,\n      configurable: true,\n      writable: false,\n      value: headers\n    };\n    const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\n    Object.defineProperty(parentClass.name.toLowerCase() === 'object' ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\n    return targetClass;\n  };\n}\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\n\n\nfunction EzHttpClientCommonResponseOperators(options) {\n  return function (targetClass) {\n    if (!options) {\n      options = {\n        operators: []\n      };\n    }\n\n    if (!options.operators) {\n      options.operators = [];\n    }\n\n    const apiHeadersDescriptor = {\n      enumerable: true,\n      configurable: true,\n      writable: false,\n      value: options\n    };\n    const parentClass = Object.getPrototypeOf(targetClass.prototype).constructor;\n    Object.defineProperty(parentClass.name.toLowerCase() === 'object' ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\n    return targetClass;\n  };\n}\n\nconst EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\n\nfunction EzHttpQueryParam(paramName) {\n  return function (target, methodName, parameterIndex) {\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\n    requestParameters.push({\n      index: parameterIndex,\n      paramName\n    });\n    Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\n  };\n}\n\nconst EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\n\nfunction EzHttpPartData(paramName) {\n  return function (target, methodName, parameterIndex) {\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\n    requestParameters.push({\n      index: parameterIndex,\n      paramName\n    });\n    Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\n  };\n}\n\nconst EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\n\nfunction EzHttpPartFile(paramName) {\n  return function (target, methodName, parameterIndex) {\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\n    requestParameters.push({\n      index: parameterIndex,\n      paramName\n    });\n    Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\n  };\n}\n\nconst EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\n\nfunction EzHttpRequestBody(target, methodName, parameterIndex) {\n  const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\n\n  if (requestParameters.length >= 1) {\n    throw new Error('Only one body can be defined !');\n  }\n\n  requestParameters.push({\n    index: parameterIndex,\n    paramName: 'body'\n  });\n  Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\n}\n\nconst EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\n\nfunction EzHttpRequestParam(paramName) {\n  return function (target, methodName, parameterIndex) {\n    const requestParameters = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\n    requestParameters.push({\n      index: parameterIndex,\n      paramName\n    });\n    Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\n  };\n}\n\nconst EZ_RESPONSE_META_KEY = `EzHttpResponse`;\n\nfunction EzHttpResponse(target, methodName, parameterIndex) {\n  const requestParameters = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\n\n  if (requestParameters.length >= 1) {\n    throw new Error('Only response mapping parameter can be defined !');\n  }\n\n  requestParameters.push({\n    index: parameterIndex,\n    paramName: 'response'\n  });\n  Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\n} // -------------------- DECORATORS --------------------\n\n\nfunction EzHttpRequest(httpMethod, options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, httpMethod, options);\n  };\n}\n\nfunction EzHttpRequestDELETE(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\n  };\n}\n\nfunction EzHttpRequestGET(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\n  };\n}\n\nfunction EzHttpRequestHEAD(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\n  };\n}\n\nfunction EzHttpRequestOPTIONS(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\n  };\n}\n\nfunction EzHttpRequestPATCH(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\n  };\n}\n\nfunction EzHttpRequestPOST(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\n  };\n}\n\nfunction EzHttpRequestPUT(options) {\n  return function (target, key, descriptor) {\n    return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\n  };\n} // -------------------- PRIVATE FUNCTIONS --------------------\n\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\n\n\nfunction resolveUrl(targetObject, hasParameters, ezRequestParams, options, args) {\n  let uri = options.path; // resolve uri parameters\n\n  if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\n    // replace all parameters\n    ezRequestParams.forEach(paramDescriptor => {\n      uri = uri?.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\n    });\n  } // build url\n\n\n  let basePath = targetObject.constructor.API_BASE_PATH || '';\n\n  if (basePath.length > 0 && basePath.endsWith('/')) {\n    basePath = basePath.substring(0, basePath.length - 1);\n  }\n\n  return `${basePath}${uri}`;\n}\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\n\n\nfunction buildHttpOptions(options, ezQueryParams, args, targetObject) {\n  const httpOptions = {};\n  const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\n\n  if (globalHeaders) {\n    options.headers = Object.assign(globalHeaders, options.headers || {});\n  }\n\n  if (options.headers || options.consume) {\n    httpOptions.headers = options.headers || {};\n\n    if (options.consume && options.consume.length > 0) {\n      stripContentType(httpOptions);\n      httpOptions.headers['Content-Type'] = options.consume;\n    }\n  }\n\n  if (options.responseType) {\n    httpOptions.responseType = options.responseType;\n  } // compute http query params\n\n\n  if (ezQueryParams && ezQueryParams.length > 0) {\n    httpOptions.params = {};\n    ezQueryParams.forEach(paramDescriptor => {\n      const paramValue = args[paramDescriptor.index];\n\n      if (paramValue) {\n        // @ts-ignore: Object is possibly 'null'.\n        httpOptions.params[paramDescriptor.paramName] = paramValue;\n      }\n    });\n  }\n\n  return httpOptions;\n}\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\n\n\nfunction stripContentType(httpOptions) {\n  if (!httpOptions) {\n    return;\n  }\n\n  for (const key in httpOptions.headers) {\n    if (key.toLowerCase() === 'content-type') {\n      delete httpOptions.headers[key];\n    }\n  }\n}\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\n\n\nfunction doCall(httpClient, url, httpMethod, httpOptions, body, responseOperators) {\n  let responseObservable;\n\n  switch (httpMethod) {\n    case EzHttpRequestMethod.DELETE:\n      responseObservable = httpClient.delete(url, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.GET:\n      responseObservable = httpClient.get(url, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.HEAD:\n      responseObservable = httpClient.head(url, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.OPTIONS:\n      responseObservable = httpClient.options(url, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.PATCH:\n      responseObservable = httpClient.patch(url, body, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.POST:\n      responseObservable = httpClient.post(url, body, httpOptions);\n      break;\n\n    case EzHttpRequestMethod.PUT:\n      responseObservable = httpClient.put(url, body, httpOptions);\n      break;\n  }\n\n  if (responseOperators && responseOperators.length > 0) {\n    responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\n  }\n\n  return responseObservable;\n}\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\n\n\nfunction apply(target, key, descriptor, httpMethod, options) {\n  if (!options) {\n    options = {};\n  }\n\n  if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\n    options.path = '/' + options.path;\n  } else if (!options.path) {\n    options.path = '';\n  }\n\n  let ezRequestParams = [];\n  const hasParameters = !!options.path.match(/{\\w+}/g);\n\n  if (hasParameters) {\n    ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\n  }\n\n  const ezQueryParams = Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\n  const ezBody = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\n  const ezPartDatas = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\n  const ezPartFiles = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\n  const ezResponseMapper = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\n  const originalMethod = descriptor.value;\n\n  descriptor.value = (...args) => {\n    // try to get http client instance\n    const httpClient = target.constructor.HTTP_CLIENT;\n\n    if (!httpClient) {\n      throw new Error('Unable to get http client instance !');\n    }\n\n    const url = resolveUrl(target, hasParameters, ezRequestParams, options, args);\n    const httpOptions = buildHttpOptions(options, ezQueryParams, args, target);\n    const body = ezBody?.length ? args[ezBody[0].index] : {};\n    const multiPartFormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\n\n    if (!!multiPartFormData) {\n      stripContentType(httpOptions);\n      console.log(httpOptions);\n    }\n\n    const commonOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\n\n    if (!options.responseOperators) {\n      options.responseOperators = {\n        operators: []\n      };\n    }\n\n    const operators = [];\n\n    if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options.responseOperators.skipGlobalCommonsOperators !== true) {\n      if (commonOperatorsOptions.before) {\n        operators.push(...commonOperatorsOptions.operators);\n        operators.push(...options.responseOperators.operators);\n      } else {\n        operators.push(...options.responseOperators.operators);\n        operators.push(...commonOperatorsOptions.operators);\n      }\n    } else {\n      operators.push(...options.responseOperators.operators);\n    }\n\n    const response = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\n\n    if (ezResponseMapper && ezResponseMapper.length > 0) {\n      args[ezResponseMapper[0].index] = response;\n      return originalMethod(...args);\n    }\n\n    return response;\n  };\n\n  return descriptor;\n}\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\n\n\nfunction buildMultipartFormData(args, ezPartDatas, ezPartFiles, body) {\n  const buildFormData = ezPartDatas && !!ezPartDatas.length || ezPartFiles && !!ezPartFiles.length;\n\n  if (buildFormData) {\n    const formData = new FormData();\n    (ezPartDatas || []).forEach(data => {\n      const value = args[data.index]; // if type of value is not string then build blob otherwise push as is\n\n      if (typeof value === 'string') {\n        formData.append(data.paramName, value);\n      } else {\n        formData.append(data.paramName, new Blob([JSON.stringify(value)], {\n          type: \"application/json\"\n        }));\n      }\n    });\n    (ezPartFiles || []).forEach(data => {\n      const value = args[data.index]; // if type of value is not File or Blob then ignore\n\n      if (value instanceof File || value instanceof Blob) {\n        formData.append(data.paramName, value);\n      }\n    });\n\n    if (!!body && Object.keys(body).length > 0) {\n      // if type of body is not string then build blob otherwise push as is\n      if (typeof body === 'string') {\n        formData.append('body', body);\n      } else {\n        formData.append('body', new Blob([JSON.stringify(body)], {\n          type: \"application/json\"\n        }));\n      }\n    }\n\n    return formData;\n  }\n\n  return undefined;\n}\n/*\r\n * Public API Surface of ez-http-client-lib\r\n */\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\n\nexport { EZ_REQUEST_BODY_META_KEY, EZ_REQUEST_PARAMS_META_KEY, EZ_REQUEST_PART_DATA_META_KEY, EZ_REQUEST_PART_FILE_META_KEY, EZ_REQUEST_QUERY_PARAMS_META_KEY, EZ_RESPONSE_META_KEY, EzHttpClient, EzHttpClientCommonResponseOperators, EzHttpClientHeaders, EzHttpPartData, EzHttpPartFile, EzHttpQueryParam, EzHttpRequest, EzHttpRequestBody, EzHttpRequestDELETE, EzHttpRequestGET, EzHttpRequestHEAD, EzHttpRequestMethod, EzHttpRequestOPTIONS, EzHttpRequestPATCH, EzHttpRequestPOST, EzHttpRequestPUT, EzHttpRequestParam, EzHttpResponse };","map":{"version":3,"sources":["C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\models\\ez-http-request-method.enum.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-client.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-client-headers.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-client-common-response-operators.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-query-param.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-part-data.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-part-file.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-request-body.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-request-param.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-response.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\lib\\ez-http-request.decorator.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\public-api.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\projects\\ez-http-client-lib\\src\\mbo-ez-angular-ez-http-client.ts"],"names":[],"mappings":"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","sourcesContent":["export enum EzHttpRequestMethod {\r\n    DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT\r\n}\r\n","import { HttpClient } from '@angular/common/http';\r\nimport { Injectable, Type } from '@angular/core';\r\n\r\nexport function EzHttpClient(apiPath?: string, module?: Type<any>): any {\r\n    return function(targetClass: any) {\r\n        if (!apiPath || apiPath.length === 0) {\r\n            apiPath = '';\r\n        }\r\n\r\n        const apiBasePathDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: apiPath\r\n        };\r\n        Object.defineProperty(targetClass, 'API_BASE_PATH', apiBasePathDescriptor);\r\n\r\n        @Injectable({\r\n            providedIn: module || 'root'\r\n        })\r\n        class EzHttpClientDecoratedClass extends targetClass {\r\n            constructor(protected http: HttpClient) {\r\n                super();\r\n\r\n                const httpClientPropertyDescriptor: PropertyDescriptor = {\r\n                    enumerable: true,\r\n                    configurable: true,\r\n                    writable: false,\r\n                    value: http\r\n                };\r\n                Object.defineProperty(targetClass, 'HTTP_CLIENT', httpClientPropertyDescriptor);\r\n            }\r\n        }\r\n        return EzHttpClientDecoratedClass;\r\n    };\r\n}\r\n","export function EzHttpClientHeaders(headers: {\r\n    [header: string]: string | string[];\r\n}): any {\r\n    return function (targetClass: any) {\r\n        if (!headers) {\r\n            headers = {};\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: headers\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_GLOBAL_HEADERS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import { EzHttpReponseOperatorsOptions } from \"./models/ez-http-client-response-oeprators-options.model\";\r\n\r\n/**\r\n * Ez http client common response operators\r\n *\r\n * @param options Common response operators options\r\n * @returns decorator factory\r\n */\r\nexport function EzHttpClientCommonResponseOperators(options: EzHttpReponseOperatorsOptions): any {\r\n    return function (targetClass: any) {\r\n        if (!options) {\r\n            options = {operators: []};\r\n        }\r\n\r\n        if (!options.operators) {\r\n            options.operators = [];\r\n        }\r\n\r\n        const apiHeadersDescriptor: PropertyDescriptor = {\r\n            enumerable: true,\r\n            configurable: true,\r\n            writable: false,\r\n            value: options\r\n        };\r\n\r\n        const parentClass: any = Object.getPrototypeOf(targetClass.prototype).constructor;\r\n        Object.defineProperty((parentClass.name.toLowerCase() === 'object') ? targetClass : parentClass, 'EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS', apiHeadersDescriptor);\r\n        return targetClass;\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_QUERY_PARAMS_META_KEY = `EzHttpQueryParam`;\r\n\r\nexport function EzHttpQueryParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_DATA_META_KEY = `EzHttpPartData`;\r\n\r\nexport function EzHttpPartData(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_DATA_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PART_FILE_META_KEY = `EzHttpPartFile`;\r\n\r\nexport function EzHttpPartFile(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PART_FILE_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_BODY_META_KEY = `EzHttpRequestBody`;\r\n\r\nexport function EzHttpRequestBody(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only one body can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'body' });\r\n    Reflect.defineMetadata(EZ_REQUEST_BODY_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_REQUEST_PARAMS_META_KEY = `EzHttpRequestParam`;\r\n\r\nexport function EzHttpRequestParam(paramName: string): any {\r\n    return function (target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number) {\r\n        const requestParameters: Array<EzHttpParameterDescriptor> =\r\n            Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, methodName) || [];\r\n        requestParameters.push({ index: parameterIndex, paramName });\r\n        Reflect.defineMetadata(EZ_REQUEST_PARAMS_META_KEY, requestParameters, target, methodName);\r\n    };\r\n}\r\n","import 'reflect-metadata';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\n\r\nexport const EZ_RESPONSE_META_KEY = `EzHttpResponse`;\r\n\r\nexport function EzHttpResponse(target: Record<string, unknown>, methodName: string | symbol, parameterIndex: number): void {\r\n    const requestParameters: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, methodName) || [];\r\n    if (requestParameters.length >= 1) {\r\n        throw new Error('Only response mapping parameter can be defined !');\r\n    }\r\n\r\n    requestParameters.push({ index: parameterIndex, paramName: 'response' });\r\n    Reflect.defineMetadata(EZ_RESPONSE_META_KEY, requestParameters, target, methodName);\r\n}\r\n","import { HttpClient, HttpParams } from '@angular/common/http';\r\nimport { Observable, OperatorFunction } from 'rxjs';\r\nimport { EZ_REQUEST_QUERY_PARAMS_META_KEY } from './ez-http-query-param.decorator';\r\nimport { EZ_REQUEST_BODY_META_KEY } from './ez-http-request-body.decorator';\r\nimport { EZ_REQUEST_PARAMS_META_KEY } from './ez-http-request-param.decorator';\r\nimport { EZ_RESPONSE_META_KEY } from './ez-http-response.decorator';\r\nimport { EzHttpRequestMethod } from './models/ez-http-request-method.enum';\r\nimport { EzHttpRequestOptions } from './models/ez-http-request-options.model';\r\nimport { EzHttpParameterDescriptor } from './models/ez-http-parameter-descriptor.model';\r\nimport { EzHttpReponseOperatorsOptions } from './models/ez-http-client-response-oeprators-options.model';\r\nimport { EZ_REQUEST_PART_DATA_META_KEY } from './ez-http-part-data.decorator';\r\nimport { EZ_REQUEST_PART_FILE_META_KEY } from './ez-http-part-file.decorator';\r\n\r\n/**\r\n * Http call options\r\n */\r\ntype HttpOptions = {\r\n    headers?: {\r\n        [header: string]: string | string[];\r\n    };\r\n    params?: HttpParams | {\r\n        [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;\r\n    };\r\n    responseType?: any;\r\n};\r\n\r\n// -------------------- DECORATORS --------------------\r\nexport function EzHttpRequest(httpMethod: EzHttpRequestMethod, options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, httpMethod, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestDELETE(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.DELETE, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestGET(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.GET, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestHEAD(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.HEAD, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestOPTIONS(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.OPTIONS, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPATCH(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PATCH, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPOST(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.POST, options);\r\n    };\r\n}\r\n\r\nexport function EzHttpRequestPUT(options?: EzHttpRequestOptions): any {\r\n    return function (\r\n        target: any,\r\n        key: string | symbol,\r\n        descriptor: PropertyDescriptor\r\n    ) {\r\n        return apply(target, key, descriptor, EzHttpRequestMethod.PUT, options);\r\n    };\r\n}\r\n\r\n// -------------------- PRIVATE FUNCTIONS --------------------\r\n/**\r\n * Resolve url to call\r\n *\r\n * @param targetObject The target object (the current object class)\r\n * @param hasParameters Indicate if the url has paameters\r\n * @param ezRequestParams The list of ezRequestParams\r\n * @param options The EzHttpRequest options\r\n * @param args The method arguments\r\n * @returns The resolved url\r\n */\r\nfunction resolveUrl(\r\n    targetObject: any, hasParameters: boolean, ezRequestParams: Array<EzHttpParameterDescriptor>, options: EzHttpRequestOptions, args: Array<any>\r\n): string {\r\n    let uri = options.path;\r\n\r\n    // resolve uri parameters\r\n    if (hasParameters && ezRequestParams.length > 0 && uri && uri.length > 0) {\r\n        // replace all parameters\r\n        ezRequestParams.forEach(paramDescriptor => {\r\n            uri = uri?.replace(`{${paramDescriptor.paramName}}`, args[paramDescriptor.index]);\r\n        });\r\n    }\r\n\r\n    // build url\r\n    let basePath: string = targetObject.constructor.API_BASE_PATH || '';\r\n    if (basePath.length > 0 && basePath.endsWith('/')) {\r\n        basePath = basePath.substring(0, basePath.length - 1);\r\n    }\r\n\r\n    return `${basePath}${uri}`;\r\n}\r\n\r\n/**\r\n * Build the http options used pending http call\r\n *\r\n * @param options The EzHttpRequest options\r\n * @param ezQueryParams The list of query params (like ?name=Toto&surname=Titi)\r\n * @returns The built HttpOptions\r\n */\r\nfunction buildHttpOptions(options: EzHttpRequestOptions, ezQueryParams: Array<EzHttpParameterDescriptor>, args: Array<any>, targetObject: any): HttpOptions {\r\n    const httpOptions: HttpOptions = {};\r\n    const globalHeaders = targetObject.constructor.EZ_HTTP_CLIENT_GLOBAL_HEADERS;\r\n    if (globalHeaders) {\r\n        options.headers = Object.assign(globalHeaders, (options.headers || {}));\r\n    }\r\n\r\n    if (options.headers || options.consume) {\r\n        httpOptions.headers = options.headers || {};\r\n        if (options.consume && options.consume.length > 0) {\r\n            stripContentType(httpOptions);\r\n            httpOptions.headers['Content-Type'] = options.consume;\r\n        }\r\n    }\r\n\r\n    if (options.responseType) {\r\n        httpOptions.responseType = options.responseType;\r\n    }\r\n\r\n    // compute http query params\r\n    if (ezQueryParams && ezQueryParams.length > 0) {\r\n        httpOptions.params = {};\r\n        ezQueryParams.forEach(paramDescriptor => {\r\n            const paramValue: any = args[paramDescriptor.index];\r\n            if (paramValue) {\r\n                // @ts-ignore: Object is possibly 'null'.\r\n                httpOptions.params[paramDescriptor.paramName] = paramValue;\r\n            }\r\n        });\r\n    }\r\n\r\n    return httpOptions;\r\n}\r\n\r\n/**\r\n * Remove content-type header\r\n *\r\n * @param httpOptions The http options\r\n */\r\nfunction stripContentType(httpOptions: HttpOptions): void {\r\n    if (!httpOptions) {\r\n        return;\r\n    }\r\n\r\n    for (const key in httpOptions.headers) {\r\n        if (key.toLowerCase() === 'content-type') {\r\n            delete httpOptions.headers[key];\r\n        }\r\n    }\r\n}\r\n\r\n/**\r\n * Do the http call\r\n *\r\n * @param httpClient The http client instance to use\r\n * @param url The url to call\r\n * @param httpMethod The http method to use\r\n * @param httpOptions The http call options\r\n * @param body The request body\r\n * @param pipes The rxjs pipe (with rxjs operators)\r\n */\r\nfunction doCall(httpClient: HttpClient, url: string, httpMethod: EzHttpRequestMethod, httpOptions: HttpOptions, body: any, responseOperators?: Array<OperatorFunction<any, any>>): Observable<any> {\r\n    let responseObservable: Observable<any>;\r\n    switch (httpMethod) {\r\n        case EzHttpRequestMethod.DELETE:\r\n            responseObservable = httpClient.delete<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.GET:\r\n            responseObservable = httpClient.get<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.HEAD:\r\n            responseObservable = httpClient.head<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.OPTIONS:\r\n            responseObservable = httpClient.options<any>(url, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PATCH:\r\n            responseObservable = httpClient.patch<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.POST:\r\n            responseObservable = httpClient.post<any>(url, body, httpOptions);\r\n            break;\r\n\r\n        case EzHttpRequestMethod.PUT:\r\n            responseObservable = httpClient.put<any>(url, body, httpOptions);\r\n            break;\r\n    }\r\n\r\n    if (responseOperators && responseOperators.length > 0) {\r\n        responseOperators.forEach(op => responseObservable = responseObservable.pipe(op));\r\n    }\r\n\r\n    return responseObservable;\r\n}\r\n\r\n/**\r\n * Apply the task\r\n *\r\n * @param target The target object (the current object class)\r\n * @param key The current method name\r\n * @param descriptor The method descriptor\r\n * @param httpMethod The http method to do\r\n * @param options The ez http request options\r\n * @returns The method updated descriptor\r\n */\r\nfunction apply(target: any,\r\n    key: string | symbol,\r\n    descriptor: PropertyDescriptor,\r\n    httpMethod: EzHttpRequestMethod,\r\n    options?: EzHttpRequestOptions): PropertyDescriptor {\r\n    if (!options) {\r\n        options = {};\r\n    }\r\n\r\n    if (options.path && options.path.length > 0 && !options.path.startsWith('/')) {\r\n        options.path = '/' + options.path;\r\n    } else if (!options.path) {\r\n        options.path = '';\r\n    }\r\n\r\n    let ezRequestParams: Array<EzHttpParameterDescriptor> = [];\r\n    const hasParameters = !!options.path.match(/{\\w+}/g);\r\n    if (hasParameters) {\r\n        ezRequestParams = Reflect.getOwnMetadata(EZ_REQUEST_PARAMS_META_KEY, target, key.toString()) || [];\r\n    }\r\n\r\n    const ezQueryParams: Array<EzHttpParameterDescriptor> =\r\n        Reflect.getOwnMetadata(EZ_REQUEST_QUERY_PARAMS_META_KEY, target, key.toString()) || [];\r\n    const ezBody: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_BODY_META_KEY, target, key.toString());\r\n    const ezPartDatas: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_DATA_META_KEY, target, key.toString()) || [];\r\n    const ezPartFiles: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_REQUEST_PART_FILE_META_KEY, target, key.toString()) || [];\r\n    const ezResponseMapper: Array<EzHttpParameterDescriptor> = Reflect.getOwnMetadata(EZ_RESPONSE_META_KEY, target, key.toString());\r\n\r\n    const originalMethod: (...args: any[]) => Promise<any> = descriptor.value;\r\n    descriptor.value = (...args: any[]) => {\r\n        // try to get http client instance\r\n        const httpClient: HttpClient = target.constructor.HTTP_CLIENT;\r\n        if (!httpClient) {\r\n            throw new Error('Unable to get http client instance !');\r\n        }\r\n\r\n        const url: string = resolveUrl(target, hasParameters, ezRequestParams, options!, args);\r\n\r\n        const httpOptions: HttpOptions = buildHttpOptions(options!, ezQueryParams, args, target);\r\n        const body: any = ezBody?.length ? args[ezBody[0].index] : {};\r\n        const multiPartFormData: FormData = buildMultipartFormData(args, ezPartDatas, ezPartFiles, body);\r\n\r\n        if (!!multiPartFormData) {\r\n            stripContentType(httpOptions);\r\n            console.log(httpOptions);\r\n        }\r\n\r\n        const commonOperatorsOptions: EzHttpReponseOperatorsOptions = target.constructor.EZ_HTTP_CLIENT_COMMON_RESPONSE_OPERATORS;\r\n        if (!options!.responseOperators) {\r\n            options!.responseOperators = {\r\n                operators: []\r\n            };\r\n        }\r\n\r\n        const operators: Array<OperatorFunction<any, any>> = [];\r\n        if (commonOperatorsOptions && commonOperatorsOptions.operators && commonOperatorsOptions.operators.length && options!.responseOperators.skipGlobalCommonsOperators !== true) {\r\n            if (commonOperatorsOptions.before) {\r\n                operators.push(...commonOperatorsOptions.operators);\r\n                operators.push(...options!.responseOperators.operators);\r\n            } else {\r\n                operators.push(...options!.responseOperators.operators);\r\n                operators.push(...commonOperatorsOptions.operators);\r\n            }\r\n        } else {\r\n            operators.push(...options!.responseOperators.operators);\r\n        }\r\n\r\n        const response: Observable<any> = doCall(httpClient, url, httpMethod, httpOptions, !!multiPartFormData ? multiPartFormData : body, operators);\r\n\r\n        if (ezResponseMapper && ezResponseMapper.length > 0) {\r\n            args[ezResponseMapper[0].index] = response;\r\n            return originalMethod(...args);\r\n        }\r\n        return response;\r\n    };\r\n    return descriptor;\r\n}\r\n\r\n/**\r\n * Build multipart form data if necessary\r\n *\r\n * @param args Method args\r\n * @param ezPartDatas Part data descriptor array\r\n * @param ezPartFiles Part file descriptor array\r\n * @param body Request body\r\n * @returns FormData or undefined\r\n */\r\nfunction buildMultipartFormData(args: Array<any>, ezPartDatas: Array<EzHttpParameterDescriptor>, ezPartFiles: Array<EzHttpParameterDescriptor>, body?: any): FormData {\r\n    const buildFormData: boolean = (ezPartDatas && !!ezPartDatas.length) || (ezPartFiles && !!ezPartFiles.length);\r\n    if (buildFormData) {\r\n        const formData = new FormData();\r\n        (ezPartDatas || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not string then build blob otherwise push as is\r\n            if (typeof value === 'string') {\r\n                formData.append(data.paramName, value);\r\n            } else {\r\n                formData.append(data.paramName, new Blob([JSON.stringify(value)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        });\r\n\r\n        (ezPartFiles || []).forEach(data => {\r\n            const value: any = args[data.index];\r\n\r\n            // if type of value is not File or Blob then ignore\r\n            if (value instanceof File || value instanceof Blob) {\r\n                formData.append(data.paramName, value);\r\n            }\r\n        });\r\n\r\n        if (!!body && Object.keys(body).length > 0) {\r\n            // if type of body is not string then build blob otherwise push as is\r\n            if (typeof body === 'string') {\r\n                formData.append('body', body);\r\n            } else {\r\n                formData.append('body', new Blob([JSON.stringify(body)], {\r\n                    type: \"application/json\"\r\n                }));\r\n            }\r\n        }\r\n\r\n        return formData;\r\n    }\r\n\r\n    return undefined!;\r\n}\r\n","/*\n * Public API Surface of ez-http-client-lib\n */\n\nexport * from './lib/models/ez-http-request-method.enum';\nexport * from './lib/models/ez-http-request-options.model';\nexport * from './lib/models/ez-http-parameter-descriptor.model';\nexport * from './lib/models/ez-http-client-response-oeprators-options.model';\nexport * from './lib/ez-http-client.decorator';\nexport * from './lib/ez-http-client-headers.decorator';\nexport * from './lib/ez-http-client-common-response-operators.decorator';\nexport * from './lib/ez-http-query-param.decorator';\nexport * from './lib/ez-http-part-data.decorator';\nexport * from './lib/ez-http-part-file.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-body.decorator';\nexport * from './lib/ez-http-request-param.decorator';\nexport * from './lib/ez-http-request.decorator';\nexport * from './lib/ez-http-response.decorator';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}