{"ast":null,"code":"import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n  return source => source.lift(new RepeatWhenOperator(notifier));\n}\n\nclass RepeatWhenOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n  }\n\n}\n\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, notifier, source) {\n    super(destination);\n    this.notifier = notifier;\n    this.source = source;\n    this.sourceIsBeingSubscribedTo = true;\n  }\n\n  notifyNext() {\n    this.sourceIsBeingSubscribedTo = true;\n    this.source.subscribe(this);\n  }\n\n  notifyComplete() {\n    if (this.sourceIsBeingSubscribedTo === false) {\n      return super.complete();\n    }\n  }\n\n  complete() {\n    this.sourceIsBeingSubscribedTo = false;\n\n    if (!this.isStopped) {\n      if (!this.retries) {\n        this.subscribeToRetries();\n      }\n\n      if (!this.retriesSubscription || this.retriesSubscription.closed) {\n        return super.complete();\n      }\n\n      this._unsubscribeAndRecycle();\n\n      this.notifications.next(undefined);\n    }\n  }\n\n  _unsubscribe() {\n    const {\n      notifications,\n      retriesSubscription\n    } = this;\n\n    if (notifications) {\n      notifications.unsubscribe();\n      this.notifications = undefined;\n    }\n\n    if (retriesSubscription) {\n      retriesSubscription.unsubscribe();\n      this.retriesSubscription = undefined;\n    }\n\n    this.retries = undefined;\n  }\n\n  _unsubscribeAndRecycle() {\n    const {\n      _unsubscribe\n    } = this;\n    this._unsubscribe = null;\n\n    super._unsubscribeAndRecycle();\n\n    this._unsubscribe = _unsubscribe;\n    return this;\n  }\n\n  subscribeToRetries() {\n    this.notifications = new Subject();\n    let retries;\n\n    try {\n      const {\n        notifier\n      } = this;\n      retries = notifier(this.notifications);\n    } catch (e) {\n      return super.complete();\n    }\n\n    this.retries = retries;\n    this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/repeatWhen.js"],"names":["Subject","SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","repeatWhen","notifier","source","lift","RepeatWhenOperator","constructor","call","subscriber","subscribe","RepeatWhenSubscriber","destination","sourceIsBeingSubscribedTo","notifyNext","notifyComplete","complete","isStopped","retries","subscribeToRetries","retriesSubscription","closed","_unsubscribeAndRecycle","notifications","next","undefined","_unsubscribe","unsubscribe","e"],"mappings":"AAAA,SAASA,OAAT,QAAwB,YAAxB;AACA,SAASC,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,UAAT,CAAoBC,QAApB,EAA8B;AACjC,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,kBAAJ,CAAuBH,QAAvB,CAAZ,CAAnB;AACH;;AACD,MAAMG,kBAAN,CAAyB;AACrBC,EAAAA,WAAW,CAACJ,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,oBAAJ,CAAyBF,UAAzB,EAAqC,KAAKN,QAA1C,EAAoDC,MAApD,CAAjB,CAAP;AACH;;AANoB;;AAQzB,MAAMO,oBAAN,SAAmCZ,qBAAnC,CAAyD;AACrDQ,EAAAA,WAAW,CAACK,WAAD,EAAcT,QAAd,EAAwBC,MAAxB,EAAgC;AACvC,UAAMQ,WAAN;AACA,SAAKT,QAAL,GAAgBA,QAAhB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACA,SAAKS,yBAAL,GAAiC,IAAjC;AACH;;AACDC,EAAAA,UAAU,GAAG;AACT,SAAKD,yBAAL,GAAiC,IAAjC;AACA,SAAKT,MAAL,CAAYM,SAAZ,CAAsB,IAAtB;AACH;;AACDK,EAAAA,cAAc,GAAG;AACb,QAAI,KAAKF,yBAAL,KAAmC,KAAvC,EAA8C;AAC1C,aAAO,MAAMG,QAAN,EAAP;AACH;AACJ;;AACDA,EAAAA,QAAQ,GAAG;AACP,SAAKH,yBAAL,GAAiC,KAAjC;;AACA,QAAI,CAAC,KAAKI,SAAV,EAAqB;AACjB,UAAI,CAAC,KAAKC,OAAV,EAAmB;AACf,aAAKC,kBAAL;AACH;;AACD,UAAI,CAAC,KAAKC,mBAAN,IAA6B,KAAKA,mBAAL,CAAyBC,MAA1D,EAAkE;AAC9D,eAAO,MAAML,QAAN,EAAP;AACH;;AACD,WAAKM,sBAAL;;AACA,WAAKC,aAAL,CAAmBC,IAAnB,CAAwBC,SAAxB;AACH;AACJ;;AACDC,EAAAA,YAAY,GAAG;AACX,UAAM;AAAEH,MAAAA,aAAF;AAAiBH,MAAAA;AAAjB,QAAyC,IAA/C;;AACA,QAAIG,aAAJ,EAAmB;AACfA,MAAAA,aAAa,CAACI,WAAd;AACA,WAAKJ,aAAL,GAAqBE,SAArB;AACH;;AACD,QAAIL,mBAAJ,EAAyB;AACrBA,MAAAA,mBAAmB,CAACO,WAApB;AACA,WAAKP,mBAAL,GAA2BK,SAA3B;AACH;;AACD,SAAKP,OAAL,GAAeO,SAAf;AACH;;AACDH,EAAAA,sBAAsB,GAAG;AACrB,UAAM;AAAEI,MAAAA;AAAF,QAAmB,IAAzB;AACA,SAAKA,YAAL,GAAoB,IAApB;;AACA,UAAMJ,sBAAN;;AACA,SAAKI,YAAL,GAAoBA,YAApB;AACA,WAAO,IAAP;AACH;;AACDP,EAAAA,kBAAkB,GAAG;AACjB,SAAKI,aAAL,GAAqB,IAAIzB,OAAJ,EAArB;AACA,QAAIoB,OAAJ;;AACA,QAAI;AACA,YAAM;AAAEf,QAAAA;AAAF,UAAe,IAArB;AACAe,MAAAA,OAAO,GAAGf,QAAQ,CAAC,KAAKoB,aAAN,CAAlB;AACH,KAHD,CAIA,OAAOK,CAAP,EAAU;AACN,aAAO,MAAMZ,QAAN,EAAP;AACH;;AACD,SAAKE,OAAL,GAAeA,OAAf;AACA,SAAKE,mBAAL,GAA2BpB,cAAc,CAACkB,OAAD,EAAU,IAAIjB,qBAAJ,CAA0B,IAA1B,CAAV,CAAzC;AACH;;AA5DoD","sourcesContent":["import { Subject } from '../Subject';\nimport { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function repeatWhen(notifier) {\n    return (source) => source.lift(new RepeatWhenOperator(notifier));\n}\nclass RepeatWhenOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new RepeatWhenSubscriber(subscriber, this.notifier, source));\n    }\n}\nclass RepeatWhenSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, notifier, source) {\n        super(destination);\n        this.notifier = notifier;\n        this.source = source;\n        this.sourceIsBeingSubscribedTo = true;\n    }\n    notifyNext() {\n        this.sourceIsBeingSubscribedTo = true;\n        this.source.subscribe(this);\n    }\n    notifyComplete() {\n        if (this.sourceIsBeingSubscribedTo === false) {\n            return super.complete();\n        }\n    }\n    complete() {\n        this.sourceIsBeingSubscribedTo = false;\n        if (!this.isStopped) {\n            if (!this.retries) {\n                this.subscribeToRetries();\n            }\n            if (!this.retriesSubscription || this.retriesSubscription.closed) {\n                return super.complete();\n            }\n            this._unsubscribeAndRecycle();\n            this.notifications.next(undefined);\n        }\n    }\n    _unsubscribe() {\n        const { notifications, retriesSubscription } = this;\n        if (notifications) {\n            notifications.unsubscribe();\n            this.notifications = undefined;\n        }\n        if (retriesSubscription) {\n            retriesSubscription.unsubscribe();\n            this.retriesSubscription = undefined;\n        }\n        this.retries = undefined;\n    }\n    _unsubscribeAndRecycle() {\n        const { _unsubscribe } = this;\n        this._unsubscribe = null;\n        super._unsubscribeAndRecycle();\n        this._unsubscribe = _unsubscribe;\n        return this;\n    }\n    subscribeToRetries() {\n        this.notifications = new Subject();\n        let retries;\n        try {\n            const { notifier } = this;\n            retries = notifier(this.notifications);\n        }\n        catch (e) {\n            return super.complete();\n        }\n        this.retries = retries;\n        this.retriesSubscription = innerSubscribe(retries, new SimpleInnerSubscriber(this));\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}