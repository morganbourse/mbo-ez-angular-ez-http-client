{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n  return source => source.lift(new DebounceOperator(durationSelector));\n}\n\nclass DebounceOperator {\n  constructor(durationSelector) {\n    this.durationSelector = durationSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n  }\n\n}\n\nclass DebounceSubscriber extends SimpleOuterSubscriber {\n  constructor(destination, durationSelector) {\n    super(destination);\n    this.durationSelector = durationSelector;\n    this.hasValue = false;\n  }\n\n  _next(value) {\n    try {\n      const result = this.durationSelector.call(this, value);\n\n      if (result) {\n        this._tryNext(value, result);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  }\n\n  _complete() {\n    this.emitValue();\n    this.destination.complete();\n  }\n\n  _tryNext(value, duration) {\n    let subscription = this.durationSubscription;\n    this.value = value;\n    this.hasValue = true;\n\n    if (subscription) {\n      subscription.unsubscribe();\n      this.remove(subscription);\n    }\n\n    subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n\n    if (subscription && !subscription.closed) {\n      this.add(this.durationSubscription = subscription);\n    }\n  }\n\n  notifyNext() {\n    this.emitValue();\n  }\n\n  notifyComplete() {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      const value = this.value;\n      const subscription = this.durationSubscription;\n\n      if (subscription) {\n        this.durationSubscription = undefined;\n        subscription.unsubscribe();\n        this.remove(subscription);\n      }\n\n      this.value = undefined;\n      this.hasValue = false;\n\n      super._next(value);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/debounce.js"],"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","debounce","durationSelector","source","lift","DebounceOperator","constructor","call","subscriber","subscribe","DebounceSubscriber","destination","hasValue","_next","value","result","_tryNext","err","error","_complete","emitValue","complete","duration","subscription","durationSubscription","unsubscribe","remove","closed","add","notifyNext","notifyComplete","undefined"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,QAAT,CAAkBC,gBAAlB,EAAoC;AACvC,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,gBAAJ,CAAqBH,gBAArB,CAAZ,CAAnB;AACH;;AACD,MAAMG,gBAAN,CAAuB;AACnBC,EAAAA,WAAW,CAACJ,gBAAD,EAAmB;AAC1B,SAAKA,gBAAL,GAAwBA,gBAAxB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACM,SAAP,CAAiB,IAAIC,kBAAJ,CAAuBF,UAAvB,EAAmC,KAAKN,gBAAxC,CAAjB,CAAP;AACH;;AANkB;;AAQvB,MAAMQ,kBAAN,SAAiCZ,qBAAjC,CAAuD;AACnDQ,EAAAA,WAAW,CAACK,WAAD,EAAcT,gBAAd,EAAgC;AACvC,UAAMS,WAAN;AACA,SAAKT,gBAAL,GAAwBA,gBAAxB;AACA,SAAKU,QAAL,GAAgB,KAAhB;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,QAAI;AACA,YAAMC,MAAM,GAAG,KAAKb,gBAAL,CAAsBK,IAAtB,CAA2B,IAA3B,EAAiCO,KAAjC,CAAf;;AACA,UAAIC,MAAJ,EAAY;AACR,aAAKC,QAAL,CAAcF,KAAd,EAAqBC,MAArB;AACH;AACJ,KALD,CAMA,OAAOE,GAAP,EAAY;AACR,WAAKN,WAAL,CAAiBO,KAAjB,CAAuBD,GAAvB;AACH;AACJ;;AACDE,EAAAA,SAAS,GAAG;AACR,SAAKC,SAAL;AACA,SAAKT,WAAL,CAAiBU,QAAjB;AACH;;AACDL,EAAAA,QAAQ,CAACF,KAAD,EAAQQ,QAAR,EAAkB;AACtB,QAAIC,YAAY,GAAG,KAAKC,oBAAxB;AACA,SAAKV,KAAL,GAAaA,KAAb;AACA,SAAKF,QAAL,GAAgB,IAAhB;;AACA,QAAIW,YAAJ,EAAkB;AACdA,MAAAA,YAAY,CAACE,WAAb;AACA,WAAKC,MAAL,CAAYH,YAAZ;AACH;;AACDA,IAAAA,YAAY,GAAGxB,cAAc,CAACuB,QAAD,EAAW,IAAItB,qBAAJ,CAA0B,IAA1B,CAAX,CAA7B;;AACA,QAAIuB,YAAY,IAAI,CAACA,YAAY,CAACI,MAAlC,EAA0C;AACtC,WAAKC,GAAL,CAAS,KAAKJ,oBAAL,GAA4BD,YAArC;AACH;AACJ;;AACDM,EAAAA,UAAU,GAAG;AACT,SAAKT,SAAL;AACH;;AACDU,EAAAA,cAAc,GAAG;AACb,SAAKV,SAAL;AACH;;AACDA,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKR,QAAT,EAAmB;AACf,YAAME,KAAK,GAAG,KAAKA,KAAnB;AACA,YAAMS,YAAY,GAAG,KAAKC,oBAA1B;;AACA,UAAID,YAAJ,EAAkB;AACd,aAAKC,oBAAL,GAA4BO,SAA5B;AACAR,QAAAA,YAAY,CAACE,WAAb;AACA,aAAKC,MAAL,CAAYH,YAAZ;AACH;;AACD,WAAKT,KAAL,GAAaiB,SAAb;AACA,WAAKnB,QAAL,GAAgB,KAAhB;;AACA,YAAMC,KAAN,CAAYC,KAAZ;AACH;AACJ;;AArDkD","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function debounce(durationSelector) {\n    return (source) => source.lift(new DebounceOperator(durationSelector));\n}\nclass DebounceOperator {\n    constructor(durationSelector) {\n        this.durationSelector = durationSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new DebounceSubscriber(subscriber, this.durationSelector));\n    }\n}\nclass DebounceSubscriber extends SimpleOuterSubscriber {\n    constructor(destination, durationSelector) {\n        super(destination);\n        this.durationSelector = durationSelector;\n        this.hasValue = false;\n    }\n    _next(value) {\n        try {\n            const result = this.durationSelector.call(this, value);\n            if (result) {\n                this._tryNext(value, result);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    }\n    _complete() {\n        this.emitValue();\n        this.destination.complete();\n    }\n    _tryNext(value, duration) {\n        let subscription = this.durationSubscription;\n        this.value = value;\n        this.hasValue = true;\n        if (subscription) {\n            subscription.unsubscribe();\n            this.remove(subscription);\n        }\n        subscription = innerSubscribe(duration, new SimpleInnerSubscriber(this));\n        if (subscription && !subscription.closed) {\n            this.add(this.durationSubscription = subscription);\n        }\n    }\n    notifyNext() {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            const value = this.value;\n            const subscription = this.durationSubscription;\n            if (subscription) {\n                this.durationSubscription = undefined;\n                subscription.unsubscribe();\n                this.remove(subscription);\n            }\n            this.value = undefined;\n            this.hasValue = false;\n            super._next(value);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}