{"ast":null,"code":"import { ElementRef } from '@angular/core';\nimport { fromEvent } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, tap } from 'rxjs/operators';\nimport { TaskStateFilter } from './enum/task-state-filter.enum';\nimport { TaskSearchNotifyService } from './services/task-search-notifier.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./services/task-search-notifier.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"angular-bootstrap-md\";\nconst _c0 = [\"searchInput\"];\n\nfunction TaskSearchComponent_option_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"option\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const item_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(item_r2.key);\n  }\n}\n\nexport class TaskSearchComponent {\n  constructor(taskSearchNotifyService) {\n    this.taskSearchNotifyService = taskSearchNotifyService;\n    this.taskStateFilterEnum = TaskStateFilter;\n    this.searchValue = '';\n    this.taskStateFilter = TaskStateFilter.ALL;\n  }\n  /**\r\n   * After init view event listener\r\n   */\n\n\n  ngAfterViewInit() {\n    this.searchKeyUpSubscription = fromEvent(this.input.nativeElement, 'keyup').pipe(map(event => {\n      return event.target.value;\n    }), debounceTime(300), distinctUntilChanged(), tap(text => {\n      this.searchValue = text;\n      this.notifySearch();\n    })).subscribe();\n  }\n  /**\r\n   * On destroy component listener\r\n   */\n\n\n  ngOnDestroy() {\n    if (this.searchKeyUpSubscription && !this.searchKeyUpSubscription.closed) {\n      this.searchKeyUpSubscription.unsubscribe();\n    }\n  }\n  /**\r\n   * On task state filter change event listener\r\n   *\r\n   * @param $event The event to listen\r\n   */\n\n\n  onStateFilterChanged($event) {\n    this.taskStateFilter = $event.target.value;\n    this.notifySearch();\n  }\n  /**\r\n   * Notify search with search text and state filter\r\n   */\n\n\n  notifySearch() {\n    this.taskSearchNotifyService.notify({\n      text: this.searchValue,\n      state: this.taskStateFilter\n    });\n  }\n\n}\n\nTaskSearchComponent.ɵfac = function TaskSearchComponent_Factory(t) {\n  return new (t || TaskSearchComponent)(i0.ɵɵdirectiveInject(i1.TaskSearchNotifyService));\n};\n\nTaskSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: TaskSearchComponent,\n  selectors: [[\"app-task-search\"]],\n  viewQuery: function TaskSearchComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 5);\n    }\n\n    if (rf & 2) {\n      let _t;\n\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.input = _t.first);\n    }\n  },\n  decls: 8,\n  vars: 3,\n  consts: [[1, \"md-form\", \"active-cyan-1\", \"text-white\", \"d-flex\", \"flex-row\", \"align-items-baseline\"], [1, \"d-flex\", \"flex-row\", \"align-items-baseline\"], [\"id\", \"searchInput\", \"type\", \"text\", \"placeholder\", \"Search\", \"aria-label\", \"Search\", \"mdbInput\", \"\", 1, \"form-control\", \"form-control-sm\", \"mr-3\", \"text-white\"], [\"searchInput\", \"\"], [\"fas\", \"\", \"icon\", \"search\", \"aria-hidden\", \"true\", 1, \"align-self-center\"], [1, \"browser-default\", \"custom-select\", \"ml-3\", 3, \"change\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function TaskSearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"input\", 2, 3)(4, \"mdb-icon\", 4);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"select\", 5);\n      i0.ɵɵlistener(\"change\", function TaskSearchComponent_Template_select_change_5_listener($event) {\n        return ctx.onStateFilterChanged($event);\n      });\n      i0.ɵɵtemplate(6, TaskSearchComponent_option_6_Template, 2, 1, \"option\", 6);\n      i0.ɵɵpipe(7, \"keyvalue\");\n      i0.ɵɵelementEnd()();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(7, 1, ctx.taskStateFilterEnum));\n    }\n  },\n  dependencies: [i2.NgForOf, i3.ɵNgNoValidate, i3.NgSelectOption, i3.ɵNgSelectMultipleOption, i3.NgControlStatusGroup, i3.NgForm, i4.MdbInput, i4.MdbIconComponent, i4.FasDirective, i2.KeyValuePipe],\n  styles: [\"#searchInput[_ngcontent-%COMP%] {\\n  min-width: 10rem;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvY29yZS9sYXlvdXQvaGVhZGVyL3Rhc2stc2VhcmNoL3Rhc2stc2VhcmNoLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0ksZ0JBQUE7QUFDSiIsInNvdXJjZXNDb250ZW50IjpbIiNzZWFyY2hJbnB1dCB7XHJcbiAgICBtaW4td2lkdGg6IDEwcmVtO1xyXG59Il0sInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"sources":["C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\core\\layout\\header\\task-search\\task-search.component.ts","C:\\Users\\Morgan\\Desktop\\DEV\\angular\\mbo-ez-angular-ez-http-client\\src\\app\\core\\layout\\header\\task-search\\task-search.component.html"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, ElementRef, OnDestroy, ViewChild } from '@angular/core';\nimport { fromEvent, Subscription } from 'rxjs';\nimport { debounceTime, distinctUntilChanged, map, tap } from 'rxjs/operators';\nimport { TaskStateFilter } from './enum/task-state-filter.enum';\nimport { TaskSearchNotifyService } from './services/task-search-notifier.service';\n\n@Component({\n  selector: 'app-task-search',\n  templateUrl: './task-search.component.html',\n  styleUrls: ['./task-search.component.scss']\n})\nexport class TaskSearchComponent implements AfterViewInit, OnDestroy {\n  @ViewChild('searchInput')\n  private input!: ElementRef<HTMLInputElement>;\n\n  private searchKeyUpSubscription: Subscription | undefined;\n\n  taskStateFilterEnum = TaskStateFilter;\n  searchValue = '';\n  taskStateFilter: TaskStateFilter = TaskStateFilter.ALL;\n\n  public constructor(private taskSearchNotifyService: TaskSearchNotifyService) {\n  }\n\n  /**\n   * After init view event listener\n   */\n  public ngAfterViewInit(): void {\n    this.searchKeyUpSubscription = fromEvent(this.input.nativeElement,'keyup')\n    .pipe(\n        map((event: any) => {\n          return event.target.value;\n        }),\n        debounceTime(300),\n        distinctUntilChanged(),\n        tap((text) => {\n          this.searchValue = text;\n          this.notifySearch();\n        })\n    ).subscribe();\n  }\n\n  /**\n   * On destroy component listener\n   */\n  public ngOnDestroy(): void {\n    if (this.searchKeyUpSubscription && !this.searchKeyUpSubscription.closed) {\n      this.searchKeyUpSubscription.unsubscribe();\n    }\n  }\n\n  /**\n   * On task state filter change event listener\n   *\n   * @param $event The event to listen\n   */\n  public onStateFilterChanged($event: Event): void {\n    this.taskStateFilter = ($event.target! as HTMLSelectElement).value as TaskStateFilter;\n    this.notifySearch();\n  }\n  \n  /**\n   * Notify search with search text and state filter\n   */\n  private notifySearch(): void {\n    this.taskSearchNotifyService.notify({text: this.searchValue, state: this.taskStateFilter});\n  }\n}\n","<form class=\"md-form active-cyan-1 text-white d-flex flex-row align-items-baseline\">\n    <div class=\"d-flex flex-row align-items-baseline\">\n        <input id=\"searchInput\" class=\"form-control form-control-sm mr-3 text-white\" type=\"text\" placeholder=\"Search\" aria-label=\"Search\" mdbInput #searchInput>\n        <mdb-icon class=\"align-self-center\" fas icon=\"search\" aria-hidden=\"true\"></mdb-icon>\n    </div>\n    <select class=\"browser-default custom-select ml-3\" (change)=\"onStateFilterChanged($event)\">\n        <option *ngFor=\"let item of taskStateFilterEnum | keyvalue\">{{item.key}}</option>\n      </select>\n</form>"],"sourceRoot":""},"metadata":{},"sourceType":"module","externalDependencies":[]}