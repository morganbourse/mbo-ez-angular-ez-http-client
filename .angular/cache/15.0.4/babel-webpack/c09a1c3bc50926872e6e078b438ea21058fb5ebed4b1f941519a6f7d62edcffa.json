{"ast":null,"code":"import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n  return source => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\n\nclass WindowToggleOperator {\n  constructor(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n\n}\n\nclass WindowToggleSubscriber extends OuterSubscriber {\n  constructor(destination, openings, closingSelector) {\n    super(destination);\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n  }\n\n  _next(value) {\n    const {\n      contexts\n    } = this;\n\n    if (contexts) {\n      const len = contexts.length;\n\n      for (let i = 0; i < len; i++) {\n        contexts[i].window.next(value);\n      }\n    }\n  }\n\n  _error(err) {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.error(err);\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._error(err);\n  }\n\n  _complete() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.complete();\n        context.subscription.unsubscribe();\n      }\n    }\n\n    super._complete();\n  }\n\n  _unsubscribe() {\n    const {\n      contexts\n    } = this;\n    this.contexts = null;\n\n    if (contexts) {\n      const len = contexts.length;\n      let index = -1;\n\n      while (++index < len) {\n        const context = contexts[index];\n        context.window.unsubscribe();\n        context.subscription.unsubscribe();\n      }\n    }\n  }\n\n  notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    if (outerValue === this.openings) {\n      let closingNotifier;\n\n      try {\n        const {\n          closingSelector\n        } = this;\n        closingNotifier = closingSelector(innerValue);\n      } catch (e) {\n        return this.error(e);\n      }\n\n      const window = new Subject();\n      const subscription = new Subscription();\n      const context = {\n        window,\n        subscription\n      };\n      this.contexts.push(context);\n      const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n      if (innerSubscription.closed) {\n        this.closeWindow(this.contexts.length - 1);\n      } else {\n        innerSubscription.context = context;\n        subscription.add(innerSubscription);\n      }\n\n      this.destination.next(window);\n    } else {\n      this.closeWindow(this.contexts.indexOf(outerValue));\n    }\n  }\n\n  notifyError(err) {\n    this.error(err);\n  }\n\n  notifyComplete(inner) {\n    if (inner !== this.openSubscription) {\n      this.closeWindow(this.contexts.indexOf(inner.context));\n    }\n  }\n\n  closeWindow(index) {\n    if (index === -1) {\n      return;\n    }\n\n    const {\n      contexts\n    } = this;\n    const context = contexts[index];\n    const {\n      window,\n      subscription\n    } = context;\n    contexts.splice(index, 1);\n    window.complete();\n    subscription.unsubscribe();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/windowToggle.js"],"names":["Subject","Subscription","OuterSubscriber","subscribeToResult","windowToggle","openings","closingSelector","source","lift","WindowToggleOperator","constructor","call","subscriber","subscribe","WindowToggleSubscriber","destination","contexts","add","openSubscription","_next","value","len","length","i","window","next","_error","err","index","context","error","subscription","unsubscribe","_complete","complete","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","closingNotifier","e","push","innerSubscription","closed","closeWindow","indexOf","notifyError","notifyComplete","inner","splice"],"mappings":"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","sourcesContent":["import { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { OuterSubscriber } from '../OuterSubscriber';\nimport { subscribeToResult } from '../util/subscribeToResult';\nexport function windowToggle(openings, closingSelector) {\n    return (source) => source.lift(new WindowToggleOperator(openings, closingSelector));\n}\nclass WindowToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new WindowToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass WindowToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(this.openSubscription = subscribeToResult(this, openings, openings));\n    }\n    _next(value) {\n        const { contexts } = this;\n        if (contexts) {\n            const len = contexts.length;\n            for (let i = 0; i < len; i++) {\n                contexts[i].window.next(value);\n            }\n        }\n    }\n    _error(err) {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.error(err);\n                context.subscription.unsubscribe();\n            }\n        }\n        super._error(err);\n    }\n    _complete() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.complete();\n                context.subscription.unsubscribe();\n            }\n        }\n        super._complete();\n    }\n    _unsubscribe() {\n        const { contexts } = this;\n        this.contexts = null;\n        if (contexts) {\n            const len = contexts.length;\n            let index = -1;\n            while (++index < len) {\n                const context = contexts[index];\n                context.window.unsubscribe();\n                context.subscription.unsubscribe();\n            }\n        }\n    }\n    notifyNext(outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        if (outerValue === this.openings) {\n            let closingNotifier;\n            try {\n                const { closingSelector } = this;\n                closingNotifier = closingSelector(innerValue);\n            }\n            catch (e) {\n                return this.error(e);\n            }\n            const window = new Subject();\n            const subscription = new Subscription();\n            const context = { window, subscription };\n            this.contexts.push(context);\n            const innerSubscription = subscribeToResult(this, closingNotifier, context);\n            if (innerSubscription.closed) {\n                this.closeWindow(this.contexts.length - 1);\n            }\n            else {\n                innerSubscription.context = context;\n                subscription.add(innerSubscription);\n            }\n            this.destination.next(window);\n        }\n        else {\n            this.closeWindow(this.contexts.indexOf(outerValue));\n        }\n    }\n    notifyError(err) {\n        this.error(err);\n    }\n    notifyComplete(inner) {\n        if (inner !== this.openSubscription) {\n            this.closeWindow(this.contexts.indexOf(inner.context));\n        }\n    }\n    closeWindow(index) {\n        if (index === -1) {\n            return;\n        }\n        const { contexts } = this;\n        const context = contexts[index];\n        const { window, subscription } = context;\n        contexts.splice(index, 1);\n        window.complete();\n        subscription.unsubscribe();\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}