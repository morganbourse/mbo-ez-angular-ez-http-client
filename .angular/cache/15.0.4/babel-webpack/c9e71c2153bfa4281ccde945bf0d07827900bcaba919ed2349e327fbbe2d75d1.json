{"ast":null,"code":"import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n  return new Observable(subscriber => {\n    if (count === undefined) {\n      count = start;\n      start = 0;\n    }\n\n    let index = 0;\n    let current = start;\n\n    if (scheduler) {\n      return scheduler.schedule(dispatch, 0, {\n        index,\n        count,\n        start,\n        subscriber\n      });\n    } else {\n      do {\n        if (index++ >= count) {\n          subscriber.complete();\n          break;\n        }\n\n        subscriber.next(current++);\n\n        if (subscriber.closed) {\n          break;\n        }\n      } while (true);\n    }\n\n    return undefined;\n  });\n}\nexport function dispatch(state) {\n  const {\n    start,\n    index,\n    count,\n    subscriber\n  } = state;\n\n  if (index >= count) {\n    subscriber.complete();\n    return;\n  }\n\n  subscriber.next(start);\n\n  if (subscriber.closed) {\n    return;\n  }\n\n  state.index = index + 1;\n  state.start = start + 1;\n  this.schedule(state);\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/observable/range.js"],"names":["Observable","range","start","count","scheduler","subscriber","undefined","index","current","schedule","dispatch","complete","next","closed","state"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,OAAO,SAASC,KAAT,CAAeC,KAAK,GAAG,CAAvB,EAA0BC,KAA1B,EAAiCC,SAAjC,EAA4C;AAC/C,SAAO,IAAIJ,UAAJ,CAAeK,UAAU,IAAI;AAChC,QAAIF,KAAK,KAAKG,SAAd,EAAyB;AACrBH,MAAAA,KAAK,GAAGD,KAAR;AACAA,MAAAA,KAAK,GAAG,CAAR;AACH;;AACD,QAAIK,KAAK,GAAG,CAAZ;AACA,QAAIC,OAAO,GAAGN,KAAd;;AACA,QAAIE,SAAJ,EAAe;AACX,aAAOA,SAAS,CAACK,QAAV,CAAmBC,QAAnB,EAA6B,CAA7B,EAAgC;AACnCH,QAAAA,KADmC;AAC5BJ,QAAAA,KAD4B;AACrBD,QAAAA,KADqB;AACdG,QAAAA;AADc,OAAhC,CAAP;AAGH,KAJD,MAKK;AACD,SAAG;AACC,YAAIE,KAAK,MAAMJ,KAAf,EAAsB;AAClBE,UAAAA,UAAU,CAACM,QAAX;AACA;AACH;;AACDN,QAAAA,UAAU,CAACO,IAAX,CAAgBJ,OAAO,EAAvB;;AACA,YAAIH,UAAU,CAACQ,MAAf,EAAuB;AACnB;AACH;AACJ,OATD,QASS,IATT;AAUH;;AACD,WAAOP,SAAP;AACH,GAzBM,CAAP;AA0BH;AACD,OAAO,SAASI,QAAT,CAAkBI,KAAlB,EAAyB;AAC5B,QAAM;AAAEZ,IAAAA,KAAF;AAASK,IAAAA,KAAT;AAAgBJ,IAAAA,KAAhB;AAAuBE,IAAAA;AAAvB,MAAsCS,KAA5C;;AACA,MAAIP,KAAK,IAAIJ,KAAb,EAAoB;AAChBE,IAAAA,UAAU,CAACM,QAAX;AACA;AACH;;AACDN,EAAAA,UAAU,CAACO,IAAX,CAAgBV,KAAhB;;AACA,MAAIG,UAAU,CAACQ,MAAf,EAAuB;AACnB;AACH;;AACDC,EAAAA,KAAK,CAACP,KAAN,GAAcA,KAAK,GAAG,CAAtB;AACAO,EAAAA,KAAK,CAACZ,KAAN,GAAcA,KAAK,GAAG,CAAtB;AACA,OAAKO,QAAL,CAAcK,KAAd;AACH","sourcesContent":["import { Observable } from '../Observable';\nexport function range(start = 0, count, scheduler) {\n    return new Observable(subscriber => {\n        if (count === undefined) {\n            count = start;\n            start = 0;\n        }\n        let index = 0;\n        let current = start;\n        if (scheduler) {\n            return scheduler.schedule(dispatch, 0, {\n                index, count, start, subscriber\n            });\n        }\n        else {\n            do {\n                if (index++ >= count) {\n                    subscriber.complete();\n                    break;\n                }\n                subscriber.next(current++);\n                if (subscriber.closed) {\n                    break;\n                }\n            } while (true);\n        }\n        return undefined;\n    });\n}\nexport function dispatch(state) {\n    const { start, index, count, subscriber } = state;\n    if (index >= count) {\n        subscriber.complete();\n        return;\n    }\n    subscriber.next(start);\n    if (subscriber.closed) {\n        return;\n    }\n    state.index = index + 1;\n    state.start = start + 1;\n    this.schedule(state);\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}