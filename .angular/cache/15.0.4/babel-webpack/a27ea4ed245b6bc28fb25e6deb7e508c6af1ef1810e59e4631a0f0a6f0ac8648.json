{"ast":null,"code":"import { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n  return function bufferToggleOperatorFunction(source) {\n    return source.lift(new BufferToggleOperator(openings, closingSelector));\n  };\n}\n\nclass BufferToggleOperator {\n  constructor(openings, closingSelector) {\n    this.openings = openings;\n    this.closingSelector = closingSelector;\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n  }\n\n}\n\nclass BufferToggleSubscriber extends OuterSubscriber {\n  constructor(destination, openings, closingSelector) {\n    super(destination);\n    this.closingSelector = closingSelector;\n    this.contexts = [];\n    this.add(subscribeToResult(this, openings));\n  }\n\n  _next(value) {\n    const contexts = this.contexts;\n    const len = contexts.length;\n\n    for (let i = 0; i < len; i++) {\n      contexts[i].buffer.push(value);\n    }\n  }\n\n  _error(err) {\n    const contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n\n    this.contexts = null;\n\n    super._error(err);\n  }\n\n  _complete() {\n    const contexts = this.contexts;\n\n    while (contexts.length > 0) {\n      const context = contexts.shift();\n      this.destination.next(context.buffer);\n      context.subscription.unsubscribe();\n      context.buffer = null;\n      context.subscription = null;\n    }\n\n    this.contexts = null;\n\n    super._complete();\n  }\n\n  notifyNext(outerValue, innerValue) {\n    outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n  }\n\n  notifyComplete(innerSub) {\n    this.closeBuffer(innerSub.context);\n  }\n\n  openBuffer(value) {\n    try {\n      const closingSelector = this.closingSelector;\n      const closingNotifier = closingSelector.call(this, value);\n\n      if (closingNotifier) {\n        this.trySubscribe(closingNotifier);\n      }\n    } catch (err) {\n      this._error(err);\n    }\n  }\n\n  closeBuffer(context) {\n    const contexts = this.contexts;\n\n    if (contexts && context) {\n      const {\n        buffer,\n        subscription\n      } = context;\n      this.destination.next(buffer);\n      contexts.splice(contexts.indexOf(context), 1);\n      this.remove(subscription);\n      subscription.unsubscribe();\n    }\n  }\n\n  trySubscribe(closingNotifier) {\n    const contexts = this.contexts;\n    const buffer = [];\n    const subscription = new Subscription();\n    const context = {\n      buffer,\n      subscription\n    };\n    contexts.push(context);\n    const innerSubscription = subscribeToResult(this, closingNotifier, context);\n\n    if (!innerSubscription || innerSubscription.closed) {\n      this.closeBuffer(context);\n    } else {\n      innerSubscription.context = context;\n      this.add(innerSubscription);\n      subscription.add(innerSubscription);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/bufferToggle.js"],"names":["Subscription","subscribeToResult","OuterSubscriber","bufferToggle","openings","closingSelector","bufferToggleOperatorFunction","source","lift","BufferToggleOperator","constructor","call","subscriber","subscribe","BufferToggleSubscriber","destination","contexts","add","_next","value","len","length","i","buffer","push","_error","err","context","shift","subscription","unsubscribe","_complete","next","notifyNext","outerValue","innerValue","closeBuffer","openBuffer","notifyComplete","innerSub","closingNotifier","trySubscribe","splice","indexOf","remove","innerSubscription","closed"],"mappings":"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","sourcesContent":["import { Subscription } from '../Subscription';\nimport { subscribeToResult } from '../util/subscribeToResult';\nimport { OuterSubscriber } from '../OuterSubscriber';\nexport function bufferToggle(openings, closingSelector) {\n    return function bufferToggleOperatorFunction(source) {\n        return source.lift(new BufferToggleOperator(openings, closingSelector));\n    };\n}\nclass BufferToggleOperator {\n    constructor(openings, closingSelector) {\n        this.openings = openings;\n        this.closingSelector = closingSelector;\n    }\n    call(subscriber, source) {\n        return source.subscribe(new BufferToggleSubscriber(subscriber, this.openings, this.closingSelector));\n    }\n}\nclass BufferToggleSubscriber extends OuterSubscriber {\n    constructor(destination, openings, closingSelector) {\n        super(destination);\n        this.closingSelector = closingSelector;\n        this.contexts = [];\n        this.add(subscribeToResult(this, openings));\n    }\n    _next(value) {\n        const contexts = this.contexts;\n        const len = contexts.length;\n        for (let i = 0; i < len; i++) {\n            contexts[i].buffer.push(value);\n        }\n    }\n    _error(err) {\n        const contexts = this.contexts;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        super._error(err);\n    }\n    _complete() {\n        const contexts = this.contexts;\n        while (contexts.length > 0) {\n            const context = contexts.shift();\n            this.destination.next(context.buffer);\n            context.subscription.unsubscribe();\n            context.buffer = null;\n            context.subscription = null;\n        }\n        this.contexts = null;\n        super._complete();\n    }\n    notifyNext(outerValue, innerValue) {\n        outerValue ? this.closeBuffer(outerValue) : this.openBuffer(innerValue);\n    }\n    notifyComplete(innerSub) {\n        this.closeBuffer(innerSub.context);\n    }\n    openBuffer(value) {\n        try {\n            const closingSelector = this.closingSelector;\n            const closingNotifier = closingSelector.call(this, value);\n            if (closingNotifier) {\n                this.trySubscribe(closingNotifier);\n            }\n        }\n        catch (err) {\n            this._error(err);\n        }\n    }\n    closeBuffer(context) {\n        const contexts = this.contexts;\n        if (contexts && context) {\n            const { buffer, subscription } = context;\n            this.destination.next(buffer);\n            contexts.splice(contexts.indexOf(context), 1);\n            this.remove(subscription);\n            subscription.unsubscribe();\n        }\n    }\n    trySubscribe(closingNotifier) {\n        const contexts = this.contexts;\n        const buffer = [];\n        const subscription = new Subscription();\n        const context = { buffer, subscription };\n        contexts.push(context);\n        const innerSubscription = subscribeToResult(this, closingNotifier, context);\n        if (!innerSubscription || innerSubscription.closed) {\n            this.closeBuffer(context);\n        }\n        else {\n            innerSubscription.context = context;\n            this.add(innerSubscription);\n            subscription.add(innerSubscription);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}