{"ast":null,"code":"import { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n  return source => source.lift(new TakeUntilOperator(notifier));\n}\n\nclass TakeUntilOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n    const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n\n    if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n      takeUntilSubscriber.add(notifierSubscription);\n      return source.subscribe(takeUntilSubscriber);\n    }\n\n    return takeUntilSubscriber;\n  }\n\n}\n\nclass TakeUntilSubscriber extends SimpleOuterSubscriber {\n  constructor(destination) {\n    super(destination);\n    this.seenValue = false;\n  }\n\n  notifyNext() {\n    this.seenValue = true;\n    this.complete();\n  }\n\n  notifyComplete() {}\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/takeUntil.js"],"names":["innerSubscribe","SimpleInnerSubscriber","SimpleOuterSubscriber","takeUntil","notifier","source","lift","TakeUntilOperator","constructor","call","subscriber","takeUntilSubscriber","TakeUntilSubscriber","notifierSubscription","seenValue","add","subscribe","destination","notifyNext","complete","notifyComplete"],"mappings":"AAAA,SAASA,cAAT,EAAyBC,qBAAzB,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,SAAT,CAAmBC,QAAnB,EAA6B;AAChC,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,iBAAJ,CAAsBH,QAAtB,CAAZ,CAAnB;AACH;;AACD,MAAMG,iBAAN,CAAwB;AACpBC,EAAAA,WAAW,CAACJ,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,UAAMM,mBAAmB,GAAG,IAAIC,mBAAJ,CAAwBF,UAAxB,CAA5B;AACA,UAAMG,oBAAoB,GAAGb,cAAc,CAAC,KAAKI,QAAN,EAAgB,IAAIH,qBAAJ,CAA0BU,mBAA1B,CAAhB,CAA3C;;AACA,QAAIE,oBAAoB,IAAI,CAACF,mBAAmB,CAACG,SAAjD,EAA4D;AACxDH,MAAAA,mBAAmB,CAACI,GAApB,CAAwBF,oBAAxB;AACA,aAAOR,MAAM,CAACW,SAAP,CAAiBL,mBAAjB,CAAP;AACH;;AACD,WAAOA,mBAAP;AACH;;AAZmB;;AAcxB,MAAMC,mBAAN,SAAkCV,qBAAlC,CAAwD;AACpDM,EAAAA,WAAW,CAACS,WAAD,EAAc;AACrB,UAAMA,WAAN;AACA,SAAKH,SAAL,GAAiB,KAAjB;AACH;;AACDI,EAAAA,UAAU,GAAG;AACT,SAAKJ,SAAL,GAAiB,IAAjB;AACA,SAAKK,QAAL;AACH;;AACDC,EAAAA,cAAc,GAAG,CAChB;;AAVmD","sourcesContent":["import { innerSubscribe, SimpleInnerSubscriber, SimpleOuterSubscriber } from '../innerSubscribe';\nexport function takeUntil(notifier) {\n    return (source) => source.lift(new TakeUntilOperator(notifier));\n}\nclass TakeUntilOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const takeUntilSubscriber = new TakeUntilSubscriber(subscriber);\n        const notifierSubscription = innerSubscribe(this.notifier, new SimpleInnerSubscriber(takeUntilSubscriber));\n        if (notifierSubscription && !takeUntilSubscriber.seenValue) {\n            takeUntilSubscriber.add(notifierSubscription);\n            return source.subscribe(takeUntilSubscriber);\n        }\n        return takeUntilSubscriber;\n    }\n}\nclass TakeUntilSubscriber extends SimpleOuterSubscriber {\n    constructor(destination) {\n        super(destination);\n        this.seenValue = false;\n    }\n    notifyNext() {\n        this.seenValue = true;\n        this.complete();\n    }\n    notifyComplete() {\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}