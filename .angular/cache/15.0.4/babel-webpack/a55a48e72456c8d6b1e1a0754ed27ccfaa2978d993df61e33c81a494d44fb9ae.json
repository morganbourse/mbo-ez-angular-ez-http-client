{"ast":null,"code":"import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n  return source => source.lift(new SampleOperator(notifier));\n}\n\nclass SampleOperator {\n  constructor(notifier) {\n    this.notifier = notifier;\n  }\n\n  call(subscriber, source) {\n    const sampleSubscriber = new SampleSubscriber(subscriber);\n    const subscription = source.subscribe(sampleSubscriber);\n    subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n    return subscription;\n  }\n\n}\n\nclass SampleSubscriber extends SimpleOuterSubscriber {\n  constructor() {\n    super(...arguments);\n    this.hasValue = false;\n  }\n\n  _next(value) {\n    this.value = value;\n    this.hasValue = true;\n  }\n\n  notifyNext() {\n    this.emitValue();\n  }\n\n  notifyComplete() {\n    this.emitValue();\n  }\n\n  emitValue() {\n    if (this.hasValue) {\n      this.hasValue = false;\n      this.destination.next(this.value);\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/sample.js"],"names":["SimpleOuterSubscriber","innerSubscribe","SimpleInnerSubscriber","sample","notifier","source","lift","SampleOperator","constructor","call","subscriber","sampleSubscriber","SampleSubscriber","subscription","subscribe","add","arguments","hasValue","_next","value","notifyNext","emitValue","notifyComplete","destination","next"],"mappings":"AAAA,SAASA,qBAAT,EAAgCC,cAAhC,EAAgDC,qBAAhD,QAA6E,mBAA7E;AACA,OAAO,SAASC,MAAT,CAAgBC,QAAhB,EAA0B;AAC7B,SAAQC,MAAD,IAAYA,MAAM,CAACC,IAAP,CAAY,IAAIC,cAAJ,CAAmBH,QAAnB,CAAZ,CAAnB;AACH;;AACD,MAAMG,cAAN,CAAqB;AACjBC,EAAAA,WAAW,CAACJ,QAAD,EAAW;AAClB,SAAKA,QAAL,GAAgBA,QAAhB;AACH;;AACDK,EAAAA,IAAI,CAACC,UAAD,EAAaL,MAAb,EAAqB;AACrB,UAAMM,gBAAgB,GAAG,IAAIC,gBAAJ,CAAqBF,UAArB,CAAzB;AACA,UAAMG,YAAY,GAAGR,MAAM,CAACS,SAAP,CAAiBH,gBAAjB,CAArB;AACAE,IAAAA,YAAY,CAACE,GAAb,CAAiBd,cAAc,CAAC,KAAKG,QAAN,EAAgB,IAAIF,qBAAJ,CAA0BS,gBAA1B,CAAhB,CAA/B;AACA,WAAOE,YAAP;AACH;;AATgB;;AAWrB,MAAMD,gBAAN,SAA+BZ,qBAA/B,CAAqD;AACjDQ,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGQ,SAAT;AACA,SAAKC,QAAL,GAAgB,KAAhB;AACH;;AACDC,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,SAAKA,KAAL,GAAaA,KAAb;AACA,SAAKF,QAAL,GAAgB,IAAhB;AACH;;AACDG,EAAAA,UAAU,GAAG;AACT,SAAKC,SAAL;AACH;;AACDC,EAAAA,cAAc,GAAG;AACb,SAAKD,SAAL;AACH;;AACDA,EAAAA,SAAS,GAAG;AACR,QAAI,KAAKJ,QAAT,EAAmB;AACf,WAAKA,QAAL,GAAgB,KAAhB;AACA,WAAKM,WAAL,CAAiBC,IAAjB,CAAsB,KAAKL,KAA3B;AACH;AACJ;;AApBgD","sourcesContent":["import { SimpleOuterSubscriber, innerSubscribe, SimpleInnerSubscriber } from '../innerSubscribe';\nexport function sample(notifier) {\n    return (source) => source.lift(new SampleOperator(notifier));\n}\nclass SampleOperator {\n    constructor(notifier) {\n        this.notifier = notifier;\n    }\n    call(subscriber, source) {\n        const sampleSubscriber = new SampleSubscriber(subscriber);\n        const subscription = source.subscribe(sampleSubscriber);\n        subscription.add(innerSubscribe(this.notifier, new SimpleInnerSubscriber(sampleSubscriber)));\n        return subscription;\n    }\n}\nclass SampleSubscriber extends SimpleOuterSubscriber {\n    constructor() {\n        super(...arguments);\n        this.hasValue = false;\n    }\n    _next(value) {\n        this.value = value;\n        this.hasValue = true;\n    }\n    notifyNext() {\n        this.emitValue();\n    }\n    notifyComplete() {\n        this.emitValue();\n    }\n    emitValue() {\n        if (this.hasValue) {\n            this.hasValue = false;\n            this.destination.next(this.value);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}