{"ast":null,"code":"import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n  return source => {\n    if (count === 0) {\n      return empty();\n    } else {\n      return source.lift(new TakeOperator(count));\n    }\n  };\n}\n\nclass TakeOperator {\n  constructor(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError();\n    }\n  }\n\n  call(subscriber, source) {\n    return source.subscribe(new TakeSubscriber(subscriber, this.total));\n  }\n\n}\n\nclass TakeSubscriber extends Subscriber {\n  constructor(destination, total) {\n    super(destination);\n    this.total = total;\n    this.count = 0;\n  }\n\n  _next(value) {\n    const total = this.total;\n    const count = ++this.count;\n\n    if (count <= total) {\n      this.destination.next(value);\n\n      if (count === total) {\n        this.destination.complete();\n        this.unsubscribe();\n      }\n    }\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/operators/take.js"],"names":["Subscriber","ArgumentOutOfRangeError","empty","take","count","source","lift","TakeOperator","constructor","total","call","subscriber","subscribe","TakeSubscriber","destination","_next","value","next","complete","unsubscribe"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,uBAAT,QAAwC,iCAAxC;AACA,SAASC,KAAT,QAAsB,qBAAtB;AACA,OAAO,SAASC,IAAT,CAAcC,KAAd,EAAqB;AACxB,SAAQC,MAAD,IAAY;AACf,QAAID,KAAK,KAAK,CAAd,EAAiB;AACb,aAAOF,KAAK,EAAZ;AACH,KAFD,MAGK;AACD,aAAOG,MAAM,CAACC,IAAP,CAAY,IAAIC,YAAJ,CAAiBH,KAAjB,CAAZ,CAAP;AACH;AACJ,GAPD;AAQH;;AACD,MAAMG,YAAN,CAAmB;AACfC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,SAAKA,KAAL,GAAaA,KAAb;;AACA,QAAI,KAAKA,KAAL,GAAa,CAAjB,EAAoB;AAChB,YAAM,IAAIR,uBAAJ,EAAN;AACH;AACJ;;AACDS,EAAAA,IAAI,CAACC,UAAD,EAAaN,MAAb,EAAqB;AACrB,WAAOA,MAAM,CAACO,SAAP,CAAiB,IAAIC,cAAJ,CAAmBF,UAAnB,EAA+B,KAAKF,KAApC,CAAjB,CAAP;AACH;;AATc;;AAWnB,MAAMI,cAAN,SAA6Bb,UAA7B,CAAwC;AACpCQ,EAAAA,WAAW,CAACM,WAAD,EAAcL,KAAd,EAAqB;AAC5B,UAAMK,WAAN;AACA,SAAKL,KAAL,GAAaA,KAAb;AACA,SAAKL,KAAL,GAAa,CAAb;AACH;;AACDW,EAAAA,KAAK,CAACC,KAAD,EAAQ;AACT,UAAMP,KAAK,GAAG,KAAKA,KAAnB;AACA,UAAML,KAAK,GAAG,EAAE,KAAKA,KAArB;;AACA,QAAIA,KAAK,IAAIK,KAAb,EAAoB;AAChB,WAAKK,WAAL,CAAiBG,IAAjB,CAAsBD,KAAtB;;AACA,UAAIZ,KAAK,KAAKK,KAAd,EAAqB;AACjB,aAAKK,WAAL,CAAiBI,QAAjB;AACA,aAAKC,WAAL;AACH;AACJ;AACJ;;AAhBmC","sourcesContent":["import { Subscriber } from '../Subscriber';\nimport { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { empty } from '../observable/empty';\nexport function take(count) {\n    return (source) => {\n        if (count === 0) {\n            return empty();\n        }\n        else {\n            return source.lift(new TakeOperator(count));\n        }\n    };\n}\nclass TakeOperator {\n    constructor(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError;\n        }\n    }\n    call(subscriber, source) {\n        return source.subscribe(new TakeSubscriber(subscriber, this.total));\n    }\n}\nclass TakeSubscriber extends Subscriber {\n    constructor(destination, total) {\n        super(destination);\n        this.total = total;\n        this.count = 0;\n    }\n    _next(value) {\n        const total = this.total;\n        const count = ++this.count;\n        if (count <= total) {\n            this.destination.next(value);\n            if (count === total) {\n                this.destination.complete();\n                this.unsubscribe();\n            }\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}