{"ast":null,"code":"import { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext(...sources) {\n  if (sources.length === 0) {\n    return EMPTY;\n  }\n\n  const [first, ...remainder] = sources;\n\n  if (sources.length === 1 && isArray(first)) {\n    return onErrorResumeNext(...first);\n  }\n\n  return new Observable(subscriber => {\n    const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));\n\n    return from(first).subscribe({\n      next(value) {\n        subscriber.next(value);\n      },\n\n      error: subNext,\n      complete: subNext\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/Morgan/Desktop/DEV/angular/mbo-ez-angular-ez-http-client/node_modules/rxjs/_esm2015/internal/observable/onErrorResumeNext.js"],"names":["Observable","from","isArray","EMPTY","onErrorResumeNext","sources","length","first","remainder","subscriber","subNext","add","subscribe","next","value","error","complete"],"mappings":"AAAA,SAASA,UAAT,QAA2B,eAA3B;AACA,SAASC,IAAT,QAAqB,QAArB;AACA,SAASC,OAAT,QAAwB,iBAAxB;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA,OAAO,SAASC,iBAAT,CAA2B,GAAGC,OAA9B,EAAuC;AAC1C,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAvB,EAA0B;AACtB,WAAOH,KAAP;AACH;;AACD,QAAM,CAACI,KAAD,EAAQ,GAAGC,SAAX,IAAwBH,OAA9B;;AACA,MAAIA,OAAO,CAACC,MAAR,KAAmB,CAAnB,IAAwBJ,OAAO,CAACK,KAAD,CAAnC,EAA4C;AACxC,WAAOH,iBAAiB,CAAC,GAAGG,KAAJ,CAAxB;AACH;;AACD,SAAO,IAAIP,UAAJ,CAAeS,UAAU,IAAI;AAChC,UAAMC,OAAO,GAAG,MAAMD,UAAU,CAACE,GAAX,CAAeP,iBAAiB,CAAC,GAAGI,SAAJ,CAAjB,CAAgCI,SAAhC,CAA0CH,UAA1C,CAAf,CAAtB;;AACA,WAAOR,IAAI,CAACM,KAAD,CAAJ,CAAYK,SAAZ,CAAsB;AACzBC,MAAAA,IAAI,CAACC,KAAD,EAAQ;AAAEL,QAAAA,UAAU,CAACI,IAAX,CAAgBC,KAAhB;AAAyB,OADd;;AAEzBC,MAAAA,KAAK,EAAEL,OAFkB;AAGzBM,MAAAA,QAAQ,EAAEN;AAHe,KAAtB,CAAP;AAKH,GAPM,CAAP;AAQH","sourcesContent":["import { Observable } from '../Observable';\nimport { from } from './from';\nimport { isArray } from '../util/isArray';\nimport { EMPTY } from './empty';\nexport function onErrorResumeNext(...sources) {\n    if (sources.length === 0) {\n        return EMPTY;\n    }\n    const [first, ...remainder] = sources;\n    if (sources.length === 1 && isArray(first)) {\n        return onErrorResumeNext(...first);\n    }\n    return new Observable(subscriber => {\n        const subNext = () => subscriber.add(onErrorResumeNext(...remainder).subscribe(subscriber));\n        return from(first).subscribe({\n            next(value) { subscriber.next(value); },\n            error: subNext,\n            complete: subNext,\n        });\n    });\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}